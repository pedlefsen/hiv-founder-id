\documentclass[12pt]{article}
\usepackage{amsmath,amsthm,amssymb}
\usepackage[dvips]{graphicx}
\usepackage[cp1250]{inputenc}
\usepackage[english]{babel}
\usepackage{amsfonts}
\usepackage{multirow}
\usepackage[round,authoryear]{natbib}
\usepackage{lscape}
\usepackage{float}
\usepackage[nomarkers]{endfloat}
\usepackage{array}
\usepackage{subfig}
\usepackage{epsfig, psfrag, graphicx, lscape}
\textwidth=6.5in
\textheight=8.4in
\setlength{\topmargin}{0.21truein}
\hoffset-18mm
\usepackage{parskip}

\newcommand\lT{\rule{0pt}{1.8ex}}
\newcommand\T{\rule{0pt}{2.4ex}}
\newcommand\TT{\rule{0pt}{3.1ex}}
\newcommand\B{\rule[-1.2ex]{0pt}{0pt}}
\renewcommand{\t}{\mathsf{t}}
\newcommand{\E}{\mathsf{E}}
\newcommand{\var}{\mathrm{var}\,}
\newcommand{\hvar}{\widehat{\mathrm{var}}\,}
\newcommand{\cov}{\mathrm{cov}\,}
\newcommand{\hcov}{\widehat{\mathrm{cov}}\,}
\renewcommand{\P}{\mathsf{P}}
\newcommand{\N}{\mathbb{N}}
\newcommand{\No}{\mathbb{N}_0}
\newcommand{\Z}{\mathbb{Z}}
\newcommand{\R}{\mathbb{R}}
\newcommand{\C}{\mathbb{C}}
\newcommand{\e}{\varepsilon}
\newcommand{\be}{\boldsymbol{\varepsilon}}
\newcommand{\bZ}{\boldsymbol{Z}}
\newcommand{\bY}{\boldsymbol{Y}}
\newcommand{\bX}{\boldsymbol{X}}
\newcommand{\bS}{\boldsymbol{S}}
\newcommand{\bB}{\boldsymbol{B}}
\newcommand{\bW}{\boldsymbol{W}}
\newcommand{\bL}{\boldsymbol{L}}
\newcommand{\bA}{\boldsymbol{A}}
\newcommand{\bF}{\boldsymbol{F}}
\newcommand{\bG}{\boldsymbol{G}}
\newcommand{\bH}{\boldsymbol{H}}
\newcommand{\bM}{\boldsymbol{M}}
\newcommand{\bI}{\boldsymbol{I}}
\newcommand{\bJ}{\boldsymbol{J}}
\newcommand{\bE}{\boldsymbol{E}}
\newcommand{\bQ}{\boldsymbol{Q}}
\newcommand{\bR}{\boldsymbol{R}}
\newcommand{\bU}{\boldsymbol{U}}
\newcommand{\bV}{\boldsymbol{V}}
\newcommand{\bD}{\boldsymbol{D}}
\newcommand{\ba}{\boldsymbol{a}}
\newcommand{\bb}{\boldsymbol{b}}
\newcommand{\bg}{\boldsymbol{g}}
\newcommand{\bh}{\boldsymbol{h}}
\newcommand{\bl}{\boldsymbol{l}}
\newcommand{\br}{\boldsymbol{r}}
\newcommand{\bt}{\boldsymbol{t}}
\newcommand{\bu}{\boldsymbol{u}}
\newcommand{\bv}{\boldsymbol{v}}
\newcommand{\bx}{\boldsymbol{x}}
\newcommand{\by}{\boldsymbol{y}}
\newcommand{\bz}{\boldsymbol{z}}
\newcommand{\bone}{\boldsymbol{1}}
\newcommand{\bomega}{\boldsymbol{\omega}}
\newcommand{\balpha}{\boldsymbol{\alpha}}
\newcommand{\bbeta}{\boldsymbol{\beta}}
\newcommand{\bmu}{\boldsymbol{\mu}}
\newcommand{\btheta}{\boldsymbol{\theta}}
\newcommand{\bxi}{\boldsymbol{\xi}}
\newcommand{\brho}{\boldsymbol{\rho}}
\newcommand{\bgamma}{\boldsymbol{\gamma}}
\newcommand{\bGamma}{\boldsymbol{\Gamma}}
\newcommand{\bOmega}{\boldsymbol{\Omega}}
\newcommand{\bSigma}{\boldsymbol{\Sigma}}
\newcommand{\bPi}{\boldsymbol{\Pi}}
\newcommand{\bPsi}{\boldsymbol{\Psi}}
\newcommand{\bpsi}{\boldsymbol{\psi}}
\newcommand{\bvarphi}{\boldsymbol{\varphi}}
\newcommand{\bLambda}{\boldsymbol{\Lambda}}
\newcommand{\bTheta}{\boldsymbol{\Theta}}
\newcommand{\bPhi}{\boldsymbol{\Phi}}
\newcommand{\bEta}{\boldsymbol{\eta}}
\newcommand{\bepsilon}{\boldsymbol{\epsilon}}
\newcommand{\bkappa}{\boldsymbol{\kappa}}
\newcommand{\bnull}{\boldsymbol{0}}
\renewcommand{\d}{\mathrm{d}}
\renewcommand{\exp}{\mathrm{e}}
\newcommand{\ii}{\mathrm{i}}
\newcommand{\Tr}{\mathop{\mathsf{Tr}}}
\newcommand{\rank}{\mathop{\mathrm{rank}}}
\newcommand{\Exp}{\mathop{\mathrm{exp}}}
\newcommand{\diag}{\mathop{\mathrm{diag}}}
\newcommand{\PP}{\mathbb{P}}
\newcommand{\GG}{\mathbb{G}}
\newcommand\independent{\protect\mathpalette{\protect\independenT}{\perp}}
\def\independenT#1#2{\mathrel{\rlap{$#1#2$}\mkern2mu{#1#2}}}
\newcommand{\logit}{\mathop{\mathrm{logit}}}


% comments
\usepackage{color}
\usepackage{ulem}
\definecolor{purple}{rgb}{0.459,0.109,0.538}
\def\tb#1#2{\sout{#1} \textcolor{purple}{#2}} 
\def\tbc#1{\textcolor{purple}{[#1]}}

\title{An Evaluation of Methods for Assessment of Founders of HIV-1 Infection using Within-Host Sequence Data}
\author{Fred Hutch VIDD Biosequence Analysis Unit}
\date{}

\usepackage{Sweave}
\SweaveOpts{concordance=TRUE}

\begin{document}

\maketitle

<<echo = FALSE>>=
# Setup for prettier Sweave output.
old.continue.option <- options( continue = " " )

source( "~/src/from-git/hiv-founder-id/ReportTimingsAndMultiplicityResults_safetosource.R" );

#############
# CONFIGURATION 
############
timings.include.methods <- c( "glm" ); # c( "glm", "step", "lasso" )
timings.include.training.codes <- c( "RT", "Rt", "rT", "rt" ); 

ismultiple.show.heatmap = FALSE;
if( ismultiple.show.heatmap ) {
    ismultiple.include.training.codes <- c( "RT", "Rt", "rT", "rt" );
    ismultiple.only.is.lasso <- FALSE;
    ismultiple.exclude.continuous.predictors <- FALSE;
} else {
    ismultiple.include.training.codes <-  "RT";
    ismultiple.only.is.lasso <- TRUE;
    ismultiple.exclude.continuous.predictors <- TRUE;
}

###########
## DEFAULTS
###########

## Configure which results we are displaying.
BakeOff.RESULTS.DIR <- Sys.getenv( "BakeOff_RESULTS_DIR" );
if( BakeOff.RESULTS.DIR != "" ) {
    RESULTS.DIR <- BakeOff.RESULTS.DIR;
} else {
    #RESULTS.DIR <- "/fast/bakeoff_merged_analysis_sequences_unfiltered/results/";
    RESULTS.DIR <- "/fast/bakeoff_merged_analysis_sequences_filteredPre2017/results/";
    #RESULTS.DIR <- "/fast/bakeoff_merged_analysis_sequences_filtered2019/results/";
}
RESULTS.DIRNAME <- "raw_fixed";

## NOTE even setting this to TRUE will not force all to be recomputed. See below where force.recomputation = FALSE.
FORCE.RECOMPUTATION <- TRUE;

@ 


\tableofcontents

{\centering \bf RESULTS FOR \Sexpr{gsub( "_", " ", RESULTS.DIR )}}

%The schedule for visits in days after first HIV+ diagnosis is: D0 D7 D14 D21 D35 D49 D77 D105 D161.
\section{Results}
\subsection{Preliminary results after phase I evaluation}

\subsubsection{Timing, including intercept and lPVL}

<<echo = FALSE, results = hide>>=
### Configuration (Defaults)
  include.intercept = TRUE; # This is what's changed: include.intercept = TRUE.
  include.all.vars.in.lasso = TRUE;
  helpful.additional.cols = c( "lPVL" );
  helpful.additional.cols.with.interactions = c();#c( "v3_not_nflg", "X6m.not.1m" );
  use.gold.is.multiple = FALSE;

# Ensure results exist.
.results.by.region.and.time.Rda.filename <- evaluateTimings(
     include.intercept = include.intercept,
     include.all.vars.in.lasso = include.all.vars.in.lasso,
     helpful.additional.cols = helpful.additional.cols,
     helpful.additional.cols.with.interactions = helpful.additional.cols.with.interactions,
     use.gold.is.multiple = use.gold.is.multiple,
     force.recomputation = FORCE.RECOMPUTATION,
     RESULTS.DIR = RESULTS.DIR,
     results.dirname = RESULTS.DIRNAME
);

# evaluateTimings.compute.config.string(..) is defined in evaluateTimings.R.
config.string <- evaluateTimings.compute.config.string(
        include.intercept = include.intercept,
        include.all.vars.in.lasso = include.all.vars.in.lasso,
        helpful.additional.cols = helpful.additional.cols,
        helpful.additional.cols.with.interactions = helpful.additional.cols.with.interactions,
        use.gold.is.multiple = use.gold.is.multiple
);


### evaluateTimings
    if( config.string == "" ) {
        evaluateTimings.tab.file.suffix <- "_evaluateTimings.tab";
    } else {
        evaluateTimings.tab.file.suffix <- paste( "_evaluateTimings_", config.string, ".tab", sep = "" );
    }
    

### MARK ERE I AM.  Testing new stuff.
# load( .results.by.region.and.time.Rda.filename ); # adds results.by.region.and.time to environment.
#.formulas.table <- get.formulas( results.by.region.and.time, .varname = "PFitter.mut.rate.coef", model.type = "step", withbounds = TRUE );
#evaluate.specific.timings.model.formula( results.by.region.and.time,  names( which.max( .formulas.table ) ) )
# .formulas.table <- get.formulas( results.by.region.and.time, .varname = "PFitter.mut.rate.coef", model.type = "glm", withbounds = TRUE );
# evaluate.specific.timings.model.formula( results.by.region.and.time,  names( which.max( .formulas.table ) ) )

##############
## sampledwidth_uniform_1mmtn003_6mhvtn502
evaluateTimings.nflg.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", to.region = "v3", the.time = "1m.6m", sort.column = NULL, the.bounds.type = "sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
colnames( evaluateTimings.nflg.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg ) <- paste( "nflg.v3.1m.6m", colnames( evaluateTimings.nflg.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg ), sep = "." );
evaluateTimings.nflg.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", the.time = "1m.6m", sort.column = NULL, the.bounds.type = "sampledwidth_uniform_1mmtn003_6mhvtn502.1m", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
colnames( evaluateTimings.nflg.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg ) <- paste( "nflg.1m.6m", colnames( evaluateTimings.nflg.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg ), sep = "." );
evaluateTimings.nflg.v3.1m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", to.region = "v3", the.time = "1m", sort.column = NULL, the.bounds.type = "sampledwidth_uniform_mtn003.nflg", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
colnames( evaluateTimings.nflg.v3.1m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg ) <- paste( "nflg.v3.1m", colnames( evaluateTimings.nflg.v3.1m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg ), sep = "." );
evaluateTimings.nflg.1m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", the.time = "1m", sort.column = NULL, the.bounds.type = "sampledwidth_uniform_mtn003", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
colnames( evaluateTimings.nflg.1m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg ) <- paste( "nflg.1m", colnames( evaluateTimings.nflg.1m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg ), sep = "." );

evaluateTimings.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg <- missing.row.safe.cbind( missing.row.safe.cbind( missing.row.safe.cbind( evaluateTimings.nflg.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg, evaluateTimings.nflg.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg ), evaluateTimings.nflg.v3.1m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg ), evaluateTimings.nflg.1m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg );

## sampledwidth_uniform_1mmtn003_6mhvtn502 6m.nflg
evaluateTimings.nflg.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", to.region = "v3", the.time = "1m.6m", sort.column = NULL, the.bounds.type = "sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
colnames( evaluateTimings.nflg.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg ) <- paste( "nflg.v3.1m.6m", colnames( evaluateTimings.nflg.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg ), sep = "." );
evaluateTimings.nflg.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", the.time = "1m.6m", sort.column = NULL, the.bounds.type = "sampledwidth_uniform_1mmtn003_6mhvtn502.6m", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
colnames( evaluateTimings.nflg.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg ) <- paste( "nflg.1m.6m", colnames( evaluateTimings.nflg.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg ), sep = "." );
evaluateTimings.nflg.v3.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", to.region = "v3", the.time = "6m", sort.column = NULL, the.bounds.type = "sampledwidth_uniform_hvtn502.nflg", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
colnames( evaluateTimings.nflg.v3.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg ) <- paste( "nflg.v3.6m", colnames( evaluateTimings.nflg.v3.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg ), sep = "." );
evaluateTimings.nflg.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", the.time = "6m", sort.column = NULL, the.bounds.type = "sampledwidth_uniform_hvtn502", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
colnames( evaluateTimings.nflg.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg ) <- paste( "nflg.6m", colnames( evaluateTimings.nflg.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg ), sep = "." );

evaluateTimings.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg <- missing.row.safe.cbind( missing.row.safe.cbind( missing.row.safe.cbind( evaluateTimings.nflg.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg, evaluateTimings.nflg.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg ), evaluateTimings.nflg.v3.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg ), evaluateTimings.nflg.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg );

## sampledwidth_uniform_1mmtn003_6mhvtn502 1m.v3
evaluateTimings.nflg.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3 <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", to.region = "v3", the.time = "1m.6m", sort.column = NULL, the.bounds.type = "sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
colnames( evaluateTimings.nflg.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3 ) <- paste( "nflg.v3.1m.6m", colnames( evaluateTimings.nflg.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3 ), sep = "." );
evaluateTimings.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3 <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "v3", the.time = "1m.6m", sort.column = NULL, the.bounds.type = "sampledwidth_uniform_1mmtn003_6mhvtn502.1m", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
colnames( evaluateTimings.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3 ) <- paste( "v3.1m.6m", colnames( evaluateTimings.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3 ), sep = "." );
evaluateTimings.nflg.v3.1m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3 <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", to.region = "v3", the.time = "1m", sort.column = NULL, the.bounds.type = "sampledwidth_uniform_mtn003.v3", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
colnames( evaluateTimings.nflg.v3.1m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3 ) <- paste( "nflg.v3.1m", colnames( evaluateTimings.nflg.v3.1m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3 ), sep = "." );
evaluateTimings.v3.1m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3 <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "v3", the.time = "1m", sort.column = NULL, the.bounds.type = "sampledwidth_uniform_mtn003", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
colnames( evaluateTimings.v3.1m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3 ) <- paste( "v3.1m", colnames( evaluateTimings.v3.1m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3 ), sep = "." );

evaluateTimings.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3 <- missing.row.safe.cbind( missing.row.safe.cbind( missing.row.safe.cbind( evaluateTimings.nflg.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3, evaluateTimings.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3 ), evaluateTimings.nflg.v3.1m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3 ), evaluateTimings.v3.1m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3 );

## sampledwidth_uniform_1mmtn003_6mhvtn502 6m.v3
evaluateTimings.nflg.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3 <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", to.region = "v3", the.time = "1m.6m", sort.column = NULL, the.bounds.type = "sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
colnames( evaluateTimings.nflg.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3 ) <- paste( "nflg.v3.1m.6m", colnames( evaluateTimings.nflg.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3 ), sep = "." );
evaluateTimings.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3 <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "v3", the.time = "1m.6m", sort.column = NULL, the.bounds.type = "sampledwidth_uniform_1mmtn003_6mhvtn502.6m", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
colnames( evaluateTimings.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3 ) <- paste( "v3.1m.6m", colnames( evaluateTimings.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3 ), sep = "." );
evaluateTimings.nflg.v3.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3 <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", to.region = "v3", the.time = "6m", sort.column = NULL, the.bounds.type = "sampledwidth_uniform_hvtn502.v3", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
colnames( evaluateTimings.nflg.v3.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3 ) <- paste( "nflg.v3.6m", colnames( evaluateTimings.nflg.v3.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3 ), sep = "." );
evaluateTimings.v3.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3 <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "v3", the.time = "6m", sort.column = NULL, the.bounds.type = "sampledwidth_uniform_hvtn502", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
colnames( evaluateTimings.v3.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3 ) <- paste( "v3.6m", colnames( evaluateTimings.v3.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3 ), sep = "." );

evaluateTimings.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3 <- missing.row.safe.cbind( missing.row.safe.cbind( missing.row.safe.cbind( evaluateTimings.nflg.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3, evaluateTimings.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3 ), evaluateTimings.nflg.v3.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3 ), evaluateTimings.v3.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3 );
##############

if( FALSE ) {
  ##############
  ## unbounded 1m.nflg
  evaluateTimings.nflg.v3.1m.6m.unbounded.1m.nflg <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", to.region = "v3", the.time = "1m.6m", sort.column = NULL, the.bounds.type = "unbounded.1m.nflg", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
  colnames( evaluateTimings.nflg.v3.1m.6m.unbounded.1m.nflg ) <- paste( "nflg.v3.1m.6m", colnames( evaluateTimings.nflg.v3.1m.6m.unbounded.1m.nflg ), sep = "." );
  evaluateTimings.nflg.1m.6m.unbounded.1m.nflg <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", the.time = "1m.6m", sort.column = NULL, the.bounds.type = "unbounded.1m", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
  colnames( evaluateTimings.nflg.1m.6m.unbounded.1m.nflg ) <- paste( "nflg.1m.6m", colnames( evaluateTimings.nflg.1m.6m.unbounded.1m.nflg ), sep = "." );
  evaluateTimings.nflg.v3.1m.unbounded.1m.nflg <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", to.region = "v3", the.time = "1m", sort.column = NULL, the.bounds.type = "unbounded.nflg", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
  colnames( evaluateTimings.nflg.v3.1m.unbounded.1m.nflg ) <- paste( "nflg.v3.1m", colnames( evaluateTimings.nflg.v3.1m.unbounded.1m.nflg ), sep = "." );
  evaluateTimings.nflg.1m.unbounded.1m.nflg <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", the.time = "1m", sort.column = NULL, the.bounds.type = "unbounded", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
  colnames( evaluateTimings.nflg.1m.unbounded.1m.nflg ) <- paste( "nflg.1m", colnames( evaluateTimings.nflg.1m.unbounded.1m.nflg ), sep = "." );
  
  evaluateTimings.unbounded.1m.nflg <- missing.row.safe.cbind( missing.row.safe.cbind( missing.row.safe.cbind( evaluateTimings.nflg.v3.1m.6m.unbounded.1m.nflg, evaluateTimings.nflg.1m.6m.unbounded.1m.nflg ), evaluateTimings.nflg.v3.1m.unbounded.1m.nflg ), evaluateTimings.nflg.1m.unbounded.1m.nflg );
  
  ## unbounded 6m.nflg
  evaluateTimings.nflg.v3.1m.6m.unbounded.6m.nflg <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", to.region = "v3", the.time = "1m.6m", sort.column = NULL, the.bounds.type = "unbounded.6m.nflg", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
  colnames( evaluateTimings.nflg.v3.1m.6m.unbounded.6m.nflg ) <- paste( "nflg.v3.1m.6m", colnames( evaluateTimings.nflg.v3.1m.6m.unbounded.6m.nflg ), sep = "." );
  evaluateTimings.nflg.1m.6m.unbounded.6m.nflg <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", the.time = "1m.6m", sort.column = NULL, the.bounds.type = "unbounded.6m", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
  colnames( evaluateTimings.nflg.1m.6m.unbounded.6m.nflg ) <- paste( "nflg.1m.6m", colnames( evaluateTimings.nflg.1m.6m.unbounded.6m.nflg ), sep = "." );
  evaluateTimings.nflg.v3.6m.unbounded.6m.nflg <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", to.region = "v3", the.time = "6m", sort.column = NULL, the.bounds.type = "unbounded.nflg", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
  colnames( evaluateTimings.nflg.v3.6m.unbounded.6m.nflg ) <- paste( "nflg.v3.6m", colnames( evaluateTimings.nflg.v3.6m.unbounded.6m.nflg ), sep = "." );
  evaluateTimings.nflg.6m.unbounded.6m.nflg <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", the.time = "6m", sort.column = NULL, the.bounds.type = "unbounded", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
  colnames( evaluateTimings.nflg.6m.unbounded.6m.nflg ) <- paste( "nflg.6m", colnames( evaluateTimings.nflg.6m.unbounded.6m.nflg ), sep = "." );
  
  evaluateTimings.unbounded.6m.nflg <- missing.row.safe.cbind( missing.row.safe.cbind( missing.row.safe.cbind( evaluateTimings.nflg.v3.1m.6m.unbounded.6m.nflg, evaluateTimings.nflg.1m.6m.unbounded.6m.nflg ), evaluateTimings.nflg.v3.6m.unbounded.6m.nflg ), evaluateTimings.nflg.6m.unbounded.6m.nflg );
  
  ## unbounded 1m.v3
  evaluateTimings.nflg.v3.1m.6m.unbounded.1m.v3 <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", to.region = "v3", the.time = "1m.6m", sort.column = NULL, the.bounds.type = "unbounded.1m.v3", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
  colnames( evaluateTimings.nflg.v3.1m.6m.unbounded.1m.v3 ) <- paste( "nflg.v3.1m.6m", colnames( evaluateTimings.nflg.v3.1m.6m.unbounded.1m.v3 ), sep = "." );
  evaluateTimings.v3.1m.6m.unbounded.1m.v3 <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "v3", the.time = "1m.6m", sort.column = NULL, the.bounds.type = "unbounded.1m", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
  colnames( evaluateTimings.v3.1m.6m.unbounded.1m.v3 ) <- paste( "v3.1m.6m", colnames( evaluateTimings.v3.1m.6m.unbounded.1m.v3 ), sep = "." );
  evaluateTimings.nflg.v3.1m.unbounded.1m.v3 <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", to.region = "v3", the.time = "1m", sort.column = NULL, the.bounds.type = "unbounded.v3", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
  colnames( evaluateTimings.nflg.v3.1m.unbounded.1m.v3 ) <- paste( "nflg.v3.1m", colnames( evaluateTimings.nflg.v3.1m.unbounded.1m.v3 ), sep = "." );
  evaluateTimings.v3.1m.unbounded.1m.v3 <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "v3", the.time = "1m", sort.column = NULL, the.bounds.type = "unbounded", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
  colnames( evaluateTimings.v3.1m.unbounded.1m.v3 ) <- paste( "v3.1m", colnames( evaluateTimings.v3.1m.unbounded.1m.v3 ), sep = "." );
  
  evaluateTimings.unbounded.1m.v3 <- missing.row.safe.cbind( missing.row.safe.cbind( missing.row.safe.cbind( evaluateTimings.nflg.v3.1m.6m.unbounded.1m.v3, evaluateTimings.v3.1m.6m.unbounded.1m.v3 ), evaluateTimings.nflg.v3.1m.unbounded.1m.v3 ), evaluateTimings.v3.1m.unbounded.1m.v3 );
  
  ## unbounded 6m.v3
  evaluateTimings.nflg.v3.1m.6m.unbounded.6m.v3 <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", to.region = "v3", the.time = "1m.6m", sort.column = NULL, the.bounds.type = "unbounded.6m.v3", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
  colnames( evaluateTimings.nflg.v3.1m.6m.unbounded.6m.v3 ) <- paste( "nflg.v3.1m.6m", colnames( evaluateTimings.nflg.v3.1m.6m.unbounded.6m.v3 ), sep = "." );
  evaluateTimings.v3.1m.6m.unbounded.6m.v3 <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "v3", the.time = "1m.6m", sort.column = NULL, the.bounds.type = "unbounded.6m", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
  colnames( evaluateTimings.v3.1m.6m.unbounded.6m.v3 ) <- paste( "v3.1m.6m", colnames( evaluateTimings.v3.1m.6m.unbounded.6m.v3 ), sep = "." );
  evaluateTimings.nflg.v3.6m.unbounded.6m.v3 <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", to.region = "v3", the.time = "6m", sort.column = NULL, the.bounds.type = "unbounded.v3", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
  colnames( evaluateTimings.nflg.v3.6m.unbounded.6m.v3 ) <- paste( "nflg.v3.6m", colnames( evaluateTimings.nflg.v3.6m.unbounded.6m.v3 ), sep = "." );
  evaluateTimings.v3.6m.unbounded.6m.v3 <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "v3", the.time = "6m", sort.column = NULL, the.bounds.type = "unbounded", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
  colnames( evaluateTimings.v3.6m.unbounded.6m.v3 ) <- paste( "v3.6m", colnames( evaluateTimings.v3.6m.unbounded.6m.v3 ), sep = "." );
  
  evaluateTimings.unbounded.6m.v3 <- missing.row.safe.cbind( missing.row.safe.cbind( missing.row.safe.cbind( evaluateTimings.nflg.v3.1m.6m.unbounded.6m.v3, evaluateTimings.v3.1m.6m.unbounded.6m.v3 ), evaluateTimings.nflg.v3.6m.unbounded.6m.v3 ), evaluateTimings.v3.6m.unbounded.6m.v3 );
} # END IF FALSE
##############

## endmark
#### TODO: REMOVE?
## For some reason one of the values is spuriously low (see below) so we make sure the "min" isn't below 4 for 1m and 8 for 6m.
#                                                 nflg.v3.1m.6m.glm nointercept validation results rmse
# Infer uniform 1mmtn003 6mhvtn502                                                                 0.08
# 
.m1m <- (1/max( 4, base::min( evaluateTimings.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg, evaluateTimings.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3, na.rm = TRUE ) ) );
.m6m <- (1/max( 8, base::min( evaluateTimings.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg, evaluateTimings.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3, na.rm = TRUE ) ) );

@ 

%% ### mark
Figure~\ref{fig:Timings.lPVL.intercept.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg} shows the RMSEs of
estimates of Timings, for the 1m time point sequences from RV217
(high-quality nearly-full length (nflg) sequences, about 10 nflg-equivalents
per sample). The estimates are bounded in the sense that whenever a prediction is outside the bounds, we replace it with the nearest bound.  The PREAST method presently fails on three of the ``1m'' ``nflg'' sequences, and these are replaced by the lower bound before evaluation. There is an intercept allowed (and lone indicators that can be used to shift the intercept for time and region), and log plasma viral load (lPVL) is included in every model, with interactions.
 
\begin{minipage}{\linewidth}
 {
\centering
\par
\bigskip
\captionof{figure}{\bf RMSEs for estimates of Timings using 1m samples
  from RV217, ~10 SGA nflg-equiv, and lPVL (with intercept)} \label{fig:Timings.lPVL.intercept.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg}
<<echo = FALSE, results = hide, fig = TRUE>>=
#timings.mat <- evaluateTimings.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg;
#timings.mat <- evaluateTimings.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg[ , 1:7 ];
timings.mat <- prepare.timings.mat( evaluateTimings.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg, include.intercept = include.intercept );

my.palette <- colorRampPalette(c("red", "yellow", "green"))(n = 299)
col.breaks = c(seq(0,0.5*.m1m,length=100),  # for red
  seq(0.5*.m1m,0.9*.m1m,length=101)[-1],              # for yellow
  seq(.9*.m1m,1*.m1m,length=101)[-1])              # for green

mat.text <- round( timings.mat );
mat.text[ is.na( mat.text ) ] <- "";
mat.data <- (1/timings.mat);
heatmap.2(
        mat.data,
        col = my.palette, colsep=c(1:62),rowsep=(1:62), sepwidth=c(0.05,0.05), sepcolor="white",
        trace="none", Rowv=F,Colv=F, scale="none", dendrogram="none",key=F,
        cellnote = mat.text, notecol = "black", notecex = 0.8,
        srtCol=45, adjCol = c(1,1), cexCol = 0.9,
         cexRow = 0.8,
        margins = c( 11.5, 9.5 ), breaks = col.breaks
    );
@ 
\par
\bigskip
}
\textbf{RMSEs for estimates of Timings using 1m samples
  from RV217, ~10 SGA nflg-equiv, and lPVL (with intercept)}
The first column corresponds to the uncalibrated estimates directly
from PFitter and PREAST.  Four sets of three columns follow,
corresponding to different data used in the calibration.  In the
leftmost of the four sets, labeled [RT], all of the data is included:
both regions, and both times.  In the rightmost, labeled [rt], only
sequences of the nflg region from RV217 and 1m time are used in
the parameter fitting step.   These models include log Plasma Viral Load (lPVL), and exclude the intercept and lone variables that can serve as an intercept (v3\_not\_nflg, 6m\_not\_1m, and v3\_not\_nflg :6m\_not\_1m).
\par
\bigskip
\end{minipage}

Figure~\ref{fig:Timings.lPVL.intercept.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg} shows the RMSEs of
estimates of Timings, for the 6m time point sequences from RV217
(high-quality nearly-full length (nflg) sequences, about 10 nflg-equivalents
per sample).

\begin{minipage}{\linewidth}
 {
\centering
\par
\bigskip
\captionof{figure}{\bf RMSEs for estimates of Timings using 6m samples from RV217, ~10 SGA nflg-equiv, and lPVL (with intercept)} \label{fig:Timings.lPVL.intercept.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg}
<<echo = FALSE, results = hide, fig = TRUE>>=
#timings.mat <- evaluateTimings.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg;
#timings.mat <- evaluateTimings.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg[ , 1:7 ];
timings.mat <- prepare.timings.mat( evaluateTimings.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg, include.intercept = include.intercept );

my.palette <- colorRampPalette(c("red", "yellow", "green"))(n = 299)
col.breaks = c(seq(0,0.5*.m6m,length=100),  # for red
  seq(0.5*.m6m,0.9*.m6m,length=101)[-1],              # for yellow
  seq(.9*.m6m,1*.m6m,length=101)[-1])              # for green

mat.text <- round( timings.mat );
mat.text[ is.na( mat.text ) ] <- "";
mat.data <- (1/timings.mat);
heatmap.2(
        mat.data,
        col = my.palette, colsep=c(1:62),rowsep=(1:62), sepwidth=c(0.05,0.05), sepcolor="white",
        trace="none", Rowv=F,Colv=F, scale="none", dendrogram="none",key=F,
        cellnote = mat.text, notecol = "black", notecex = 0.8,
        srtCol=45, adjCol = c(1,1), cexCol = 0.9,
         cexRow = 0.8,
        margins = c( 11.5, 9.5 ), breaks = col.breaks
    );
@ 
\par
\bigskip
}
\textbf{RMSEs for estimates of Timings using 6m samples
  from RV217, ~10 SGA nflg-equiv, and lPVL (with intercept)}
The first column corresponds to the uncalibrated estimates directly
from PFitter and PREAST.  Four sets of three columns follow,
corresponding to different data used in the calibration.  In the
leftmost of the four sets, labeled [RT], all of the data is included:
both regions, and both times.  In the rightmost, labeled [rt], only
sequences of the nflg region from RV217 and 1m time are used in
the parameter fitting step.   These models include log Plasma Viral Load (lPVL), and exclude the intercept and lone variables that can serve as an intercept (v3\_not\_nflg, 6m\_not\_1m, and v3\_not\_nflg :6m\_not\_1m).
\par
\bigskip
\end{minipage}



Figure~\ref{fig:Timings.lPVL.intercept.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3} shows the RMSEs of
estimates of Timings, for the 1m time point sequences from Caprisa 002 (deep, high-quality sequences of short region of Env, V3). 
 
\begin{minipage}{\linewidth}
 {
\centering
\par
\bigskip
\captionof{figure}{\bf RMSEs for estimates of Timings 1m samples from Caprisa 002, v3 Illumina w/PrimerID, and lPVL (with intercept)} \label{fig:Timings.lPVL.intercept.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3}
<<echo = FALSE, results = hide, fig = TRUE>>=
#timings.mat <- evaluateTimings.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3;
#timings.mat <- evaluateTimings.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3[ , 1:7 ];
timings.mat <- prepare.timings.mat( evaluateTimings.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3, include.intercept = include.intercept );

my.palette <- colorRampPalette(c("red", "yellow", "green"))(n = 299)
col.breaks = c(seq(0,0.5*.m1m,length=100),  # for red
  seq(0.5*.m1m,0.9*.m1m,length=101)[-1],              # for yellow
  seq(.9*.m1m,1*.m1m,length=101)[-1])              # for green

mat.text <- round( timings.mat );
mat.text[ is.na( mat.text ) ] <- "";
mat.data <- (1/timings.mat);
heatmap.2(
        mat.data,
        col = my.palette, colsep=c(1:62),rowsep=(1:62), sepwidth=c(0.05,0.05), sepcolor="white",
        trace="none", Rowv=F,Colv=F, scale="none", dendrogram="none",key=F,
        cellnote = mat.text, notecol = "black", notecex = 0.8,
        srtCol=45, adjCol = c(1,1), cexCol = 0.9,
         cexRow = 0.8,
        margins = c( 11.5, 9.5 ), breaks = col.breaks
    );
@ 
\par
\bigskip
}
\textbf{RMSEs for estimates of Timings 1m samples from Caprisa 002, v3 Illumina w/PrimerID, and lPVL (with intercept)}
The first column corresponds to the uncalibrated estimates directly
from PFitter and PREAST.  Four sets of three columns follow,
corresponding to different data used in the calibration.  In the
leftmost of the four sets, labeled [RT], all of the data is included:
both regions, and both times.  In the rightmost, labeled [rt], only
sequences of the v3 region from RV217 and 1m time are used in
the parameter fitting step.   These models include log Plasma Viral Load (lPVL), and exclude the intercept and lone variables that can serve as an intercept (v3\_not\_nflg, 6m\_not\_1m, and v3\_not\_nflg :6m\_not\_1m).
\par
\bigskip
\end{minipage}

Figure~\ref{fig:Timings.lPVL.intercept.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3} shows the RMSEs of
estimates of Timings, for the 6m time point sequences from Caprisa 002 (deep, high-quality sequences of short region of Env, V3). 

\begin{minipage}{\linewidth}
 {
\centering
\par
\bigskip
\captionof{figure}{\bf RMSEs for estimates of Timings using 6m samples from Caprisa 002, v3 Illumina w/PrimerID, and lPVL (with intercept)} \label{fig:Timings.lPVL.intercept.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3}
<<echo = FALSE, results = hide, fig = TRUE>>=
#timings.mat <- evaluateTimings.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3;
#timings.mat <- evaluateTimings.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3[ , 1:7 ];
timings.mat <- prepare.timings.mat( evaluateTimings.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3, include.intercept = include.intercept );

my.palette <- colorRampPalette(c("red", "yellow", "green"))(n = 299)
col.breaks = c(seq(0,0.5*.m6m,length=100),  # for red
  seq(0.5*.m6m,0.9*.m6m,length=101)[-1],              # for yellow
  seq(.9*.m6m,1*.m6m,length=101)[-1])              # for green

mat.text <- round( timings.mat );
mat.text[ is.na( mat.text ) ] <- "";
mat.data <- (1/timings.mat);
heatmap.2(
        mat.data,
        col = my.palette, colsep=c(1:62),rowsep=(1:62), sepwidth=c(0.05,0.05), sepcolor="white",
        trace="none", Rowv=F,Colv=F, scale="none", dendrogram="none",key=F,
        cellnote = mat.text, notecol = "black", notecex = 0.8,
        srtCol=45, adjCol = c(1,1), cexCol = 0.9,
         cexRow = 0.8,
        margins = c( 11.5, 9.5 ), breaks = col.breaks
    );
@ 
\par
\bigskip
}
\textbf{RMSEs for estimates of Timings using 6m samples from Caprisa 002, v3 Illumina w/PrimerID, and lPVL (with intercept)}
The first column corresponds to the uncalibrated estimates directly
from PFitter and PREAST.  Four sets of three columns follow,
corresponding to different data used in the calibration.  In the
leftmost of the four sets, labeled [RT], all of the data is included:
both regions, and both times.  In the rightmost, labeled [rt], only
sequences of the v3 region from RV217 and 1m time are used in
the parameter fitting step.  These models include log Plasma Viral Load (lPVL), and exclude the intercept and lone variables that can serve as an intercept (v3\_not\_nflg, 6m\_not\_1m, and v3\_not\_nflg :6m\_not\_1m).
\par
\bigskip
\end{minipage}

%%%%%endmark

LASSO consistently chose poor models, usually only containing lPVL. LASSO and stepwise regression prediction performance was poor (data not shown).  All methods benefit from calibration, as shown by the large RMSE values in the ``uncalibrated'' columns of the figures.

When including the intercept, even the trivial model ``days.since.infection $\sim$ 1'', which models the time since infection as simply distributed Normally around a time- and region-specific mean, does very well, and including statistics computed on the sequence data does not yield improvements over this trivial model.  This reflects the low variation in the true days-since-infection in the training data (the standard deviation is about 5 days for the ``1m'' time point and about 12 days for the ``6m'' time point).
%% TODO: Fill in with more details, include histogram.

Thus in the following analyses we exclude the intercept, and when training the models using pooled data, we also do not allow lone indicators of the region (``v3\_not\_nflg'') or the sample (``6m\_not\_1m''), although we do include interactions between these variables and lPVL, and with the estimator.  The resulting models estimate infection time as some scalar multiple of lPVL, plus (for the rows other than ``none'') a scalar multiple of a particular estimator (e.g. PFitter).

\subsubsection{Timing, summary}
<<echo = FALSE, results = hide>>=

## yesintercept
timings.mats.yesintercept.nolPVL.noV3.no6m.noGIM <- 
  getTimingsResults(
      include.intercept = TRUE,
      helpful.additional.cols = c(), #c( "lPVL" ),
      helpful.additional.cols.with.interactions = c(),#c( "v3_not_nflg", "X6m.not.1m" );
      use.gold.is.multiple = FALSE
  );
timings.mats.yesintercept.yeslPVL.noV3.no6m.noGIM <- 
 getTimingsResults(
     include.intercept = TRUE,
     helpful.additional.cols = c( "lPVL" ),
     helpful.additional.cols.with.interactions = c(),#c( "v3_not_nflg", "X6m.not.1m" );
     use.gold.is.multiple = FALSE
 );
## nointercept
timings.mats.nointercept.nolPVL.noV3.no6m.noGIM <- 
 getTimingsResults(
     include.intercept = FALSE,
     helpful.additional.cols = c(), #c( "lPVL" ),
     helpful.additional.cols.with.interactions = c(),#c( "v3_not_nflg", "X6m.not.1m" );
     use.gold.is.multiple = FALSE
 );
timings.mats.nointercept.yeslPVL.noV3.no6m.noGIM <- 
 getTimingsResults(
     include.intercept = FALSE,
     helpful.additional.cols = c( "lPVL" ),
     helpful.additional.cols.with.interactions = c(),#c( "v3_not_nflg", "X6m.not.1m" );
     use.gold.is.multiple = FALSE
 );
## nointercept, with V3
timings.mats.nointercept.nolPVL.yesV3.no6m.noGIM <- 
 getTimingsResults(
     include.intercept = FALSE,
     helpful.additional.cols = c(), #c( "lPVL" ),
     helpful.additional.cols.with.interactions = c("v3_not_nflg"),#c( "v3_not_nflg", "X6m.not.1m" );
     use.gold.is.multiple = FALSE
 );
timings.mats.nointercept.yeslPVL.yesV3.no6m.noGIM <- 
 getTimingsResults(
     include.intercept = FALSE,
     helpful.additional.cols = c( "lPVL" ),
     helpful.additional.cols.with.interactions = c("v3_not_nflg"),#c( "v3_not_nflg", "X6m.not.1m" );
     use.gold.is.multiple = FALSE
 );
## nointercept, with 6m
timings.mats.nointercept.nolPVL.noV3.yes6m.noGIM <- 
 getTimingsResults(
     include.intercept = FALSE,
     helpful.additional.cols = c(), #c( "lPVL" ),
     helpful.additional.cols.with.interactions = c("X6m.not.1m"),#c( "v3_not_nflg", "X6m.not.1m" );
     use.gold.is.multiple = FALSE
 );
timings.mats.nointercept.yeslPVL.noV3.yes6m.noGIM <- 
 getTimingsResults(
     include.intercept = FALSE,
     helpful.additional.cols = c( "lPVL" ),
     helpful.additional.cols.with.interactions = c("X6m.not.1m"),#c( "v3_not_nflg", "X6m.not.1m" );
     use.gold.is.multiple = FALSE
 );
## nointercept, with V3 and 6m
timings.mats.nointercept.nolPVL.yesV3.yes6m.noGIM <- 
 getTimingsResults(
     include.intercept = FALSE,
     helpful.additional.cols = c(), #c( "lPVL" ),
     helpful.additional.cols.with.interactions = c( "v3_not_nflg", "X6m.not.1m" ),
     use.gold.is.multiple = FALSE
 );
timings.mats.nointercept.yeslPVL.yesV3.yes6m.noGIM <- 
 getTimingsResults(
     include.intercept = FALSE,
     helpful.additional.cols = c( "lPVL" ),
     helpful.additional.cols.with.interactions = c( "v3_not_nflg", "X6m.not.1m" ),
     use.gold.is.multiple = FALSE
 );


###
@ 

<<echo = FALSE, results = hide>>=
## some computations towards the talk slides

# First, for 6m (v3), natural variation, days are approx normal with mean 179.7222 and 95% of mean (173.7212 185.7232).

# for "none"
getTimingsResultFormula( "none", include.intercept = FALSE, helpful.additional.cols = c(), regions = "v3", times = "6m" )
# $formulas
# .formulas
# days.since.infection ~ 1 
#                       18 
# 
# $evaluated.formula
# 
# Call:
# lm(formula = .formula, data = regression.df)
# 
# Residuals:
#     Min      1Q  Median      3Q     Max 
# -24.722  -8.722   2.278   7.028  25.278 
# 
# Coefficients:
#             Estimate Std. Error t value Pr(>|t|)    
# (Intercept)  179.722      2.844   63.19   <2e-16 ***
# ---
# Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
# 
# Residual standard error: 12.07 on 17 degrees of freedom
# 
# 
# $evaluated.formula.table
#             Estimate    2.5 %   97.5 %     Pr(>|t|)
# (Intercept) 179.7222 173.7212 185.7232 1.299352e-21

timings.result.formula.v3.6m <- 
    getTimingsResultFormula( "PFitter.mut.rate.coef", include.intercept = FALSE, helpful.additional.cols = c(), regions = "v3", times = "6m" );
# $formulas
# .formulas
# days.since.infection ~ 0 + PFitter.mut.rate.coef 
#                                               18 
# 
# $evaluated.formula
# 
# Call:
# lm(formula = .formula, data = regression.df)
# 
# Residuals:
#     Min      1Q  Median      3Q     Max 
# -177.45   58.84   77.03  117.91  170.86 
# 
# Coefficients:
#                       Estimate Std. Error t value Pr(>|t|)    
# PFitter.mut.rate.coef    16055       2818   5.697 2.62e-05 ***
# ---
# Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
# 
# Residual standard error: 108.7 on 17 degrees of freedom
# Multiple R-squared:  0.6563,	Adjusted R-squared:  0.6361 
# F-statistic: 32.46 on 1 and 17 DF,  p-value: 2.619e-05
# 
# 
# $evaluated.formula.table
#                       Estimate    2.5 %  97.5 %     Pr(>|t|)
# PFitter.mut.rate.coef 16055.03 10109.65 22000.4 2.618826e-05
# 1/c( 16055.03, 10109.65, 22000.4 )
# [1] 6.228578e-05 9.891539e-05 4.545372e-05

timings.result.formula.nflg.6m <- 
    getTimingsResultFormula( "PFitter.mut.rate.coef", include.intercept = FALSE, helpful.additional.cols = c(), regions = "nflg", times = "6m" );
# $formulas
# .formulas
# days.since.infection ~ 0 + PFitter.mut.rate.coef 
#                                               34 
# 
# $evaluated.formula
# 
# Call:
# lm(formula = .formula, data = regression.df)
# 
# Residuals:
#      Min       1Q   Median       3Q      Max 
# -163.278   -4.709   70.752  109.539  159.311 
# 
# Coefficients:
#                       Estimate Std. Error t value Pr(>|t|)    
# PFitter.mut.rate.coef    38410       4166   9.219 1.19e-10 ***
# ---
# Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
# 
# Residual standard error: 98.84 on 33 degrees of freedom
# Multiple R-squared:  0.7203,	Adjusted R-squared:  0.7119 
# F-statistic:    85 on 1 and 33 DF,  p-value: 1.19e-10
# 
# 
# $evaluated.formula.table
#                       Estimate    2.5 % 97.5 %     Pr(>|t|)
# PFitter.mut.rate.coef 38409.87 29933.73  46886 1.189716e-10
# 1/c( 38409.87, 29933.73,  46886 )
# signif( 1/c( 38409.87, 29933.73,  46886 ), 3 )
# [1] 2.60e-05 3.34e-05 2.13e-05

timings.result.formula.nflgv3.6m <- 
    getTimingsResultFormula( "PFitter.mut.rate.coef", include.intercept = FALSE, helpful.additional.cols = c(), regions = c( "nflg", "v3" ), times = "6m" );
# $formulas
# .formulas
# days.since.infection ~ 0 + PFitter.mut.rate.coef 
#                                               52 
# 
# $evaluated.formula
# 
# Call:
# lm(formula = .formula, data = regression.df)
# 
# Residuals:
#     Min      1Q  Median      3Q     Max 
# -309.54   42.99   98.44  134.32  170.47 
# 
# Coefficients:
#                       Estimate Std. Error t value Pr(>|t|)    
# PFitter.mut.rate.coef    22194       2638   8.415 3.28e-11 ***
# ---
# Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
# 
# Residual standard error: 119.4 on 51 degrees of freedom
# Multiple R-squared:  0.5813,	Adjusted R-squared:  0.5731 
# F-statistic: 70.81 on 1 and 51 DF,  p-value: 3.282e-11
# 
# 
# $evaluated.formula.table
#                       Estimate   2.5 %   97.5 %     Pr(>|t|)
# PFitter.mut.rate.coef 22194.29 16899.3 27489.28 3.282045e-11
# 1/c( 22194.29, 16899.3, 27489.28 )
# [1] 4.505663e-05 5.917405e-05 3.637782e-05

timings.result.formula.v3.1m6m <- 
    getTimingsResultFormula( "PFitter.mut.rate.coef", include.intercept = FALSE, helpful.additional.cols = c(), regions = c( "v3" ), times = c( "1m", "6m" ) );
# $formulas
# .formulas
# days.since.infection ~ 0 + PFitter.mut.rate.coef 
#                                               21 
# 
# $evaluated.formula
# 
# Call:
# lm(formula = .formula, data = regression.df)
# 
# Residuals:
#     Min      1Q  Median      3Q     Max 
# -232.04   22.94   60.11  112.93  177.34 
# 
# Coefficients:
#                       Estimate Std. Error t value Pr(>|t|)    
# PFitter.mut.rate.coef     9990       1813    5.51 2.89e-06 ***
# ---
# Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
# 
# Residual standard error: 99.15 on 37 degrees of freedom
# Multiple R-squared:  0.4508,	Adjusted R-squared:  0.4359 
# F-statistic: 30.37 on 1 and 37 DF,  p-value: 2.89e-06
# 
# 
# $evaluated.formula.table
#                       Estimate   2.5 %   97.5 %     Pr(>|t|)
# PFitter.mut.rate.coef 9989.484 6316.38 13662.59 2.889875e-06
# 1/c( 9989.484, 6316.38, 13662.59 )
# [1] 1.001053e-04 1.583185e-04 7.319256e-05

timings.result.formula.nflgv3.1m6m <- 
    getTimingsResultFormula( "PFitter.mut.rate.coef", include.intercept = FALSE, helpful.additional.cols = c(), regions = c( "nflg", "v3" ), times = c( "1m", "6m" ) );
# $formulas
# .formulas
# days.since.infection ~ 0 + PFitter.mut.rate.coef 
#                                               57 
# 
# $evaluated.formula
# 
# Call:
# lm(formula = .formula, data = regression.df)
# 
# Residuals:
#     Min      1Q  Median      3Q     Max 
# -353.77   34.81   50.10  123.19  180.77 
# 
# Coefficients:
#                       Estimate Std. Error t value Pr(>|t|)    
# PFitter.mut.rate.coef    14182       1655   8.571 8.55e-14 ***
# ---
# Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
# 
# Residual standard error: 102.5 on 107 degrees of freedom
# Multiple R-squared:  0.4071,	Adjusted R-squared:  0.4015 
# F-statistic: 73.45 on 1 and 107 DF,  p-value: 8.554e-14
# 
# 
# $evaluated.formula.table
#                       Estimate   2.5 %   97.5 %     Pr(>|t|)
# PFitter.mut.rate.coef 14182.03 10901.7 17462.36 8.554102e-14
# 
# 1/c( 14182.03, 10901.7, 17462.36 )
# [1] 7.051177e-05 9.172881e-05 5.726603e-05

## 1m

timings.result.formula.v3.1m <- 
    getTimingsResultFormula( "PFitter.mut.rate.coef", include.intercept = FALSE, helpful.additional.cols = c(), regions = "v3", times = "1m" );
# $formulas
# .formulas
# days.since.infection ~ 0 + PFitter.mut.rate.coef 
#                                               20 
# 
# $evaluated.formula
# 
# Call:
# lm(formula = .formula, data = regression.df)
# 
# Residuals:
#    Min     1Q Median     3Q    Max 
# -58.04  44.42  53.10  60.94  67.93 
# 
# Coefficients:
#                       Estimate Std. Error t value Pr(>|t|)   
# PFitter.mut.rate.coef     3997       1378     2.9  0.00918 **
# ---
# Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
# 
# Residual standard error: 53.46 on 19 degrees of freedom
# Multiple R-squared:  0.3068,	Adjusted R-squared:  0.2703 
# F-statistic:  8.41 on 1 and 19 DF,  p-value: 0.009178
# 
# 
# $evaluated.formula.table
#                       Estimate    2.5 %   97.5 %    Pr(>|t|)
# PFitter.mut.rate.coef 3996.554 1112.132 6880.977 0.009178273
# 1/c( 3996.554, 1112.132, 6880.977)
# [1] 0.0002502156 0.0008991738 0.0001453282
#  2.50e-04 (1.45e-04 to 8.99e-04)
# (1/c( 3996.554, 1112.132, 6880.977)) / 1.19e-05
# [1] 21.02652 75.56083 12.21245

timings.result.formula.nflg.1m <- 
    getTimingsResultFormula( "PFitter.mut.rate.coef", include.intercept = FALSE, helpful.additional.cols = c(), regions = "nflg", times = "1m" );
# $formulas
# .formulas
# days.since.infection ~ 0 + PFitter.mut.rate.coef 
#                                               36 
# 
# $evaluated.formula
# 
# Call:
# lm(formula = .formula, data = regression.df)
# 
# Residuals:
#    Min     1Q Median     3Q    Max 
# -37.94  30.05  38.76  41.92  51.24 
# 
# Coefficients:
#                       Estimate Std. Error t value Pr(>|t|)    
# PFitter.mut.rate.coef    10259       2256   4.547 6.25e-05 ***
# ---
# Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
# 
# Residual standard error: 37.7 on 35 degrees of freedom
# Multiple R-squared:  0.3714,	Adjusted R-squared:  0.3534 
# F-statistic: 20.68 on 1 and 35 DF,  p-value: 6.25e-05
# 
# 
# $evaluated.formula.table
#                       Estimate    2.5 %   97.5 %     Pr(>|t|)
# PFitter.mut.rate.coef 10259.09 5678.759 14839.42 6.249679e-05
# 1/c( 10259.09, 5678.759, 14839.42 )
# [1] 9.747453e-05 1.760948e-04 6.738808e-05
# signif( 1/c( 10259.09, 5678.759, 14839.42 ), 3 )
# [1] 9.75e-05 1.76e-04 6.74e-05

timings.result.formula.nflg.1m6m <- 
    getTimingsResultFormula( "PFitter.mut.rate.coef", include.intercept = FALSE, helpful.additional.cols = c(), regions = "nflg", times = c( "1m", "6m" ) );
# $formulas
# .formulas
# days.since.infection ~ 0 + PFitter.mut.rate.coef 
#                                               36 
# 
# $evaluated.formula
# 
# Call:
# lm(formula = .formula, data = regression.df)
# 
# Residuals:
#     Min      1Q  Median      3Q     Max 
# -195.57   15.02   31.87   96.30  165.31 
# 
# Coefficients:
#                       Estimate Std. Error t value Pr(>|t|)    
# PFitter.mut.rate.coef    29075       2992   9.719 1.49e-14 ***
# ---
# Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
# 
# Residual standard error: 86.81 on 69 degrees of freedom
# Multiple R-squared:  0.5779,	Adjusted R-squared:  0.5717 
# F-statistic: 94.45 on 1 and 69 DF,  p-value: 1.493e-14
# 
# 
# $evaluated.formula.table
#                       Estimate    2.5 %  97.5 %     Pr(>|t|)
# PFitter.mut.rate.coef 29075.21 23106.93 35043.5 1.492966e-14
# 
# 1/c( 29075.21, 23106.93, 35043.5 )
# [1] 3.439356e-05 4.327706e-05 2.853596e-05

timings.result.formula.nflgv3.1m <- 
    getTimingsResultFormula( "PFitter.mut.rate.coef", include.intercept = FALSE, helpful.additional.cols = c(), regions = c( "nflg", "v3" ), times = "1m" );
# $formulas
# .formulas
# days.since.infection ~ 0 + PFitter.mut.rate.coef 
#                                               56 
# 
# $evaluated.formula
# 
# Call:
# lm(formula = .formula, data = regression.df)
# 
# Residuals:
#    Min     1Q Median     3Q    Max 
# -86.50  37.09  42.81  47.55  67.91 
# 
# Coefficients:
#                       Estimate Std. Error t value Pr(>|t|)    
# PFitter.mut.rate.coef     4977       1074   4.632 2.26e-05 ***
# ---
# Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
# 
# Residual standard error: 45.38 on 55 degrees of freedom
# Multiple R-squared:  0.2806,	Adjusted R-squared:  0.2675 
# F-statistic: 21.45 on 1 and 55 DF,  p-value: 2.263e-05
# 
# 
# $evaluated.formula.table
#                       Estimate    2.5 %   97.5 %     Pr(>|t|)
# PFitter.mut.rate.coef 4976.816 2823.436 7130.197 2.263019e-05
# 1/c( 4976.816, 2823.436, 7130.197)
# [1] 0.0002009317 0.0003541784 0.0001402486
# 2.00e-04 (1.40e-04 to 3.54e-04)

## Forestplot the updated PFitter mutation rates.
.mat <- rbind(
    c( region = "v3", time = "1m", signif( 1/timings.result.formula.v3.1m$evaluated.formula.table[1,c(1,3,2)], 3 ) ),
    c( region = "nflg", time = "1m", signif( 1/timings.result.formula.nflg.1m$evaluated.formula.table[1,c(1,3,2)], 3 ) ),
    c( region = "nflg, v3", time = "1m", signif( 1/timings.result.formula.nflgv3.1m$evaluated.formula.table[1,c(1,3,2)], 3 ) ),
    c( region = "v3", time = "6m", signif( 1/timings.result.formula.v3.6m$evaluated.formula.table[1,c(1,3,2)], 3 ) ),
    c( region = "nflg", time = "6m", signif( 1/timings.result.formula.nflg.6m$evaluated.formula.table[1,c(1,3,2)], 3 ) ),
    c( region = "nflg, v3", time = "6m", signif( 1/timings.result.formula.nflgv3.6m$evaluated.formula.table[1,c(1,3,2)], 3 ) ),
    c( region = "v3", time = "1m, 6m", signif( 1/timings.result.formula.v3.1m6m$evaluated.formula.table[1,c(1,3,2)], 3 ) ),
    c( region = "nflg", time = "1m, 6m", signif( 1/timings.result.formula.nflg.1m6m$evaluated.formula.table[1,c(1,3,2)], 3 ) ),
    c( region = "nflg, v3", time = "1m, 6m", signif( 1/timings.result.formula.nflgv3.1m6m$evaluated.formula.table[1,c(1,3,2)], 3 ) )
);
.mat.for.table <- .mat[ , 1:2, drop = FALSE ];
.mat.for.table <- rbind( c( "Regions", "Samples" ), .mat.for.table ); # Add a row for the column headings
    
.mat.for.CIs <- .mat[ , c( "Estimate", "2.5 %", "97.5 %" ) ];
mode( .mat.for.CIs ) <- "numeric";
.mat.for.CIs <- rbind( rep( NA, ncol( .mat.for.CIs ) ), .mat.for.CIs ); # Add a row for the column headings

pdf( "PFitter Estimated Mutation Rates forestplot.pdf" );
forestplot( .mat.for.table, (.mat.for.CIs*10^5)/1.19, is.summary = c( TRUE, rep( FALSE, nrow( .mat ) ) ),
           new_page = FALSE, 
           txt_gp = fpTxtGp(label = list(gpar(fontfamily = "",
                                              col = "#660000"),
                                         gpar(fontfamily = "",
                                              col = "#660000")),
                            ticks = gpar(fontfamily = "", cex=1),
                            xlab  = gpar(fontfamily = "HersheySerif", cex = 1.5)),
           xlab="Mutation rate (x 10^-5 substitutions per day)",
               xlog=TRUE, 
               col=fpColors(box="royalblue",line="darkblue", summary="royalblue"), 
               vertices = TRUE, boxsize = 0.1, line.margin = 0.05, zero = 1.19 ); # note zero is the PFitter default.
dev.off();

## TODO: Make an updated version of this figure for the paper (?) -- if so it should be showing just the data we are showing in the paper. I think right now it's showing simpler models without lpvl, eg.

pdf( "PFitter Coefficient forestplot.pdf" );
forestplot( .mat.for.table, (.mat.for.CIs*10^5), is.summary = c( TRUE, rep( FALSE, nrow( .mat ) ) ),
           new_page = FALSE, 
           txt_gp = fpTxtGp(label = list(gpar(fontfamily = "",
                                              col = "#660000"),
                                         gpar(fontfamily = "",
                                              col = "#660000")),
                            ticks = gpar(fontfamily = "", cex=1),
                            xlab  = gpar(fontfamily = "HersheySerif", cex = 1.5)),
           xlab="Multiple of PFitter Days Estimate",
               xlog=TRUE, 
               col=fpColors(box="royalblue",line="darkblue", summary="royalblue"), 
               vertices = TRUE, boxsize = 0.1, line.margin = 0.05, zero = 1.19/1.19 ); # note zero is the PFitter default.
dev.off();
@ 

<<echo = FALSE, results = hide>>=
## For the paper's tables of fitted values we need these:
## For the PFitter mut.rate.coefs, convert it back, for now, to just a product of PFitter's estimate.
## 1m, v3
    bounded.COB.var <- "COB.sampledwidth.uniform.mtn003.time.est";
# for 6m: bounded.COB.var <-  "COB.sampledwidth.uniform.hvtn502.time.est";
    bounded.PrankenBeast.var <- "Infer.sampledwidth.uniform.mtn003.time.est";
# for 6m: bounded.PrankenBeast.var <- "Infer.sampledwidth.uniform.hvtn502.time.est";

formula.calibrated.nointercept.withlPVL.noBounds.v3.1m.COB <- getTimingsResultFormula( bounded.COB.var, withbounds = FALSE, include.intercept = FALSE, helpful.additional.cols = c("lPVL"), regions = "v3", times = "1m" );
apply( apply( formula.calibrated.nointercept.withlPVL.noBounds.v3.1m.COB$evaluated.formula.table[,1:3], 1:2, function( .value )  { sprintf( "%1.2f", .value ) } ), 1, function( .row ) { paste( .row[ 1 ], " (", .row[2], " to ", .row[3], ")", sep = "" ) } )
#                                          lPVL 
#                         "5.17 (4.46 to 5.88)" 
#      COB.sampledwidth.uniform.mtn003.time.est 
#                         "0.82 (0.48 to 1.15)" 
# lPVL:COB.sampledwidth.uniform.mtn003.time.est 
#                      "-0.07 (-0.10 to -0.04)" 
formula.calibrated.nointercept.withlPVL.noBounds.v3.1m.PrankenBeast <- getTimingsResultFormula( bounded.PrankenBeast.var, withbounds = FALSE, include.intercept = FALSE, helpful.additional.cols = c("lPVL"), regions = "v3", times = "1m" );
apply( apply( formula.calibrated.nointercept.withlPVL.noBounds.v3.1m.PrankenBeast$evaluated.formula.table[,1:3, drop = FALSE], 1:2, function( .value )  { sprintf( "%1.2f", .value ) } ), 1, function( .row ) { paste( .row[ 1 ], " (", .row[2], " to ", .row[3], ")", sep = "" ) } )
#                                            lPVL 
#                           "5.59 (4.97 to 6.20)" 
#      Infer.sampledwidth.uniform.mtn003.time.est 
#                           "0.26 (0.17 to 0.35)" 
# lPVL:Infer.sampledwidth.uniform.mtn003.time.est 
#                        "-0.02 (-0.03 to -0.02)" 
formula.calibrated.nointercept.withlPVL.noBounds.v3.1m.PFitter <- getTimingsResultFormula( "PFitter.mut.rate.coef", withbounds = FALSE, include.intercept = FALSE, helpful.additional.cols = c("lPVL"), regions = "v3", times = "1m" );
# Correct for inverse.epsilon to return to the scale of PFitter's days estimate.
formula.calibrated.nointercept.withlPVL.noBounds.v3.1m.PFitter$evaluated.formula.table[2:3, 1:3 ] <- formula.calibrated.nointercept.withlPVL.noBounds.v3.1m.PFitter$evaluated.formula.table[2:3, 1:3 ] / inverse.epsilon;
apply( apply( formula.calibrated.nointercept.withlPVL.noBounds.v3.1m.PFitter$evaluated.formula.table[,1:3], 1:2, function( .value )  { sprintf( "%1.2f", .value ) } ), 1, function( .row ) { paste( .row[ 1 ], " (", .row[2], " to ", .row[3], ")", sep = "" ) } )
#                      lPVL      PFitter.mut.rate.coef 
#      "5.56 (5.26 to 5.87)"      "0.07 (0.03 to 0.12)" 
# lPVL:PFitter.mut.rate.coef 
#   "-0.01 (-0.01 to -0.00)" 
## WAS:
#                           lPVL          PFitter.mut.rate.coef 
#          "5.56 (5.26 to 5.87)" "3306.41 (1242.82 to 5370.00)" 
#     lPVL:PFitter.mut.rate.coef 
# "-286.79 (-444.24 to -129.34)" 
formula.calibrated.nointercept.withlPVL.noBounds.v3.1m.syn.PFitter <- getTimingsResultFormula( "Synonymous.PFitter.mut.rate.coef", withbounds = FALSE, include.intercept = FALSE, helpful.additional.cols = c("lPVL"), regions = "v3", times = "1m" );
# Correct for inverse.epsilon to return to the scale of PFitter's days estimate.
formula.calibrated.nointercept.withlPVL.noBounds.v3.1m.syn.PFitter$evaluated.formula.table[2:3, 1:3 ] <- formula.calibrated.nointercept.withlPVL.noBounds.v3.1m.syn.PFitter$evaluated.formula.table[2:3, 1:3 ] / inverse.epsilon;
apply( apply( formula.calibrated.nointercept.withlPVL.noBounds.v3.1m.syn.PFitter$evaluated.formula.table[,1:3], 1:2, function( .value )  { sprintf( "%1.2f", .value ) } ), 1, function( .row ) { paste( .row[ 1 ], " (", .row[2], " to ", .row[3], ")", sep = "" ) } )
#                                 lPVL      Synonymous.PFitter.mut.rate.coef 
#                 "5.65 (5.33 to 5.97)"                 "0.50 (0.22 to 0.78)" 
# lPVL:Synonymous.PFitter.mut.rate.coef 
#              "-0.04 (-0.07 to -0.02)" 
## WAS:
#                                  lPVL      Synonymous.PFitter.mut.rate.coef 
#                 "5.65 (5.33 to 5.97)"      "23099.48 (9967.36 to 36231.60)" 
# lPVL:Synonymous.PFitter.mut.rate.coef 
#      "-2040.97 (-3088.28 to -993.65)" 
formula.calibrated.nointercept.withlPVL.noBounds.v3.1m.withinClusts.PFitter <- getTimingsResultFormula( "multifounder.PFitter.mut.rate.coef", withbounds = FALSE, include.intercept = FALSE, helpful.additional.cols = c("lPVL"), regions = "v3", times = "1m" );
# Correct for inverse.epsilon to return to the scale of PFitter's days estimate.
formula.calibrated.nointercept.withlPVL.noBounds.v3.1m.withinClusts.PFitter$evaluated.formula.table[2:3, 1:3 ] <- formula.calibrated.nointercept.withlPVL.noBounds.v3.1m.withinClusts.PFitter$evaluated.formula.table[2:3, 1:3 ] / inverse.epsilon;
apply( apply( formula.calibrated.nointercept.withlPVL.noBounds.v3.1m.withinClusts.PFitter$evaluated.formula.table[,1:3], 1:2, function( .value )  { sprintf( "%1.2f", .value ) } ), 1, function( .row ) { paste( .row[ 1 ], " (", .row[2], " to ", .row[3], ")", sep = "" ) } )
#                                   lPVL      multifounder.PFitter.mut.rate.coef 
#                   "5.54 (5.21 to 5.88)"                   "0.43 (0.17 to 0.69)" 
# lPVL:multifounder.PFitter.mut.rate.coef 
#                "-0.04 (-0.06 to -0.01)" 
## WAS:
#                                    lPVL      multifounder.PFitter.mut.rate.coef 
#                   "5.54 (5.21 to 5.88)"        "19930.43 (7903.72 to 31957.14)" 
# lPVL:multifounder.PFitter.mut.rate.coef 
#        "-1767.56 (-2842.47 to -692.65)" 
formula.calibrated.nointercept.withlPVL.noBounds.v3.1m.withinClusts.syn.PFitter <- getTimingsResultFormula( "multifounder.Synonymous.PFitter.mut.rate.coef", withbounds = FALSE, include.intercept = FALSE, helpful.additional.cols = c("lPVL"), regions = "v3", times = "1m" );
# Correct for inverse.epsilon to return to the scale of PFitter's days estimate.
formula.calibrated.nointercept.withlPVL.noBounds.v3.1m.withinClusts.syn.PFitter$evaluated.formula.table[2:3, 1:3 ] <- formula.calibrated.nointercept.withlPVL.noBounds.v3.1m.withinClusts.syn.PFitter$evaluated.formula.table[2:3, 1:3 ] / inverse.epsilon;
apply( apply( formula.calibrated.nointercept.withlPVL.noBounds.v3.1m.withinClusts.syn.PFitter$evaluated.formula.table[,1:3], 1:2, function( .value )  { sprintf( "%1.2f", .value ) } ), 1, function( .row ) { paste( .row[ 1 ], " (", .row[2], " to ", .row[3], ")", sep = "" ) } )
#                                              lPVL 
#                              "5.48 (5.18 to 5.78)" 
#      multifounder.Synonymous.PFitter.mut.rate.coef 
#                              "2.11 (1.13 to 3.10)" 
# lPVL:multifounder.Synonymous.PFitter.mut.rate.coef 
#                           "-0.17 (-0.25 to -0.09)" 
## WAS:
#                                               lPVL 
#                              "5.48 (5.18 to 5.78)" 
#      multifounder.Synonymous.PFitter.mut.rate.coef 
#                 "97909.99 (52388.47 to 143431.50)" 
# lPVL:multifounder.Synonymous.PFitter.mut.rate.coef 
#                 "-7994.98 (-11622.50 to -4367.46)" 

## 1m, nflg
    bounded.COB.var <- "COB.sampledwidth.uniform.mtn003.time.est";
# for 6m: bounded.COB.var <-  "COB.sampledwidth.uniform.hvtn502.time.est";
    bounded.PrankenBeast.var <- "Infer.sampledwidth.uniform.mtn003.time.est";
# for 6m: bounded.PrankenBeast.var <- "Infer.sampledwidth.uniform.hvtn502.time.est";

formula.calibrated.nointercept.withlPVL.noBounds.nflg.1m.COB <- getTimingsResultFormula( bounded.COB.var, withbounds = FALSE, include.intercept = FALSE, helpful.additional.cols = c("lPVL"), regions = "nflg", times = "1m" );
apply( apply( formula.calibrated.nointercept.withlPVL.noBounds.nflg.1m.COB$evaluated.formula.table[,1:3], 1:2, function( .value )  { sprintf( "%1.2f", .value ) } ), 1, function( .row ) { paste( .row[ 1 ], " (", .row[2], " to ", .row[3], ")", sep = "" ) } )
#                                          lPVL 
#                         "3.90 (3.44 to 4.37)" 
#      COB.sampledwidth.uniform.mtn003.time.est 
#                         "0.52 (0.37 to 0.67)" 
# lPVL:COB.sampledwidth.uniform.mtn003.time.est 
#                      "-0.04 (-0.06 to -0.02)" 
formula.calibrated.nointercept.withlPVL.noBounds.nflg.1m.PrankenBeast <- getTimingsResultFormula( bounded.PrankenBeast.var, withbounds = FALSE, include.intercept = FALSE, helpful.additional.cols = c("lPVL"), regions = "nflg", times = "1m" );
apply( apply( formula.calibrated.nointercept.withlPVL.noBounds.nflg.1m.PrankenBeast$evaluated.formula.table[,1:3, drop = FALSE], 1:2, function( .value )  { sprintf( "%1.2f", .value ) } ), 1, function( .row ) { paste( .row[ 1 ], " (", .row[2], " to ", .row[3], ")", sep = "" ) } )
#                                            lPVL 
#                           "4.12 (3.43 to 4.81)" 
#      Infer.sampledwidth.uniform.mtn003.time.est 
#                           "0.77 (0.55 to 0.99)" 
# lPVL:Infer.sampledwidth.uniform.mtn003.time.est 
#                        "-0.07 (-0.09 to -0.04)" 
formula.calibrated.nointercept.withlPVL.noBounds.nflg.1m.PFitter <- getTimingsResultFormula( "PFitter.mut.rate.coef", withbounds = FALSE, include.intercept = FALSE, helpful.additional.cols = c("lPVL"), regions = "nflg", times = "1m" );
# Correct for inverse.epsilon to return to the scale of PFitter's days estimate.
formula.calibrated.nointercept.withlPVL.noBounds.nflg.1m.PFitter$evaluated.formula.table[2:3, 1:3 ] <- formula.calibrated.nointercept.withlPVL.noBounds.nflg.1m.PFitter$evaluated.formula.table[2:3, 1:3 ] / inverse.epsilon;
apply( apply( formula.calibrated.nointercept.withlPVL.noBounds.nflg.1m.PFitter$evaluated.formula.table[,1:3], 1:2, function( .value )  { sprintf( "%1.2f", .value ) } ), 1, function( .row ) { paste( .row[ 1 ], " (", .row[2], " to ", .row[3], ")", sep = "" ) } )
#                      lPVL      PFitter.mut.rate.coef 
#      "4.40 (4.03 to 4.77)"      "0.28 (0.09 to 0.47)" 
# lPVL:PFitter.mut.rate.coef 
#   "-0.03 (-0.04 to -0.01)" 
## WAS:
#                             lPVL            PFitter.mut.rate.coef 
#            "4.40 (4.03 to 4.77)" "13127.54 (4275.88 to 21979.20)" 
#       lPVL:PFitter.mut.rate.coef 
# "-1203.76 (-1972.47 to -435.04)" 
formula.calibrated.nointercept.withlPVL.noBounds.nflg.1m.syn.PFitter <- getTimingsResultFormula( "Synonymous.PFitter.mut.rate.coef", withbounds = FALSE, include.intercept = FALSE, helpful.additional.cols = c("lPVL"), regions = "nflg", times = "1m" );
# Correct for inverse.epsilon to return to the scale of PFitter's days estimate.
formula.calibrated.nointercept.withlPVL.noBounds.nflg.1m.syn.PFitter$evaluated.formula.table[2:3, 1:3 ] <- formula.calibrated.nointercept.withlPVL.noBounds.nflg.1m.syn.PFitter$evaluated.formula.table[2:3, 1:3 ] / inverse.epsilon;
apply( apply( formula.calibrated.nointercept.withlPVL.noBounds.nflg.1m.syn.PFitter$evaluated.formula.table[,1:3], 1:2, function( .value )  { sprintf( "%1.2f", .value ) } ), 1, function( .row ) { paste( .row[ 1 ], " (", .row[2], " to ", .row[3], ")", sep = "" ) } )
#                                 lPVL      Synonymous.PFitter.mut.rate.coef 
#                 "4.31 (3.93 to 4.69)"                 "1.24 (0.57 to 1.90)" 
# lPVL:Synonymous.PFitter.mut.rate.coef 
#              "-0.11 (-0.17 to -0.05)" 
## WAS:
#                                  lPVL      Synonymous.PFitter.mut.rate.coef 
#                 "4.31 (3.93 to 4.69)"     "57195.53 (26279.38 to 88111.69)" 
# lPVL:Synonymous.PFitter.mut.rate.coef 
#     "-5096.55 (-7746.61 to -2446.49)" 
formula.calibrated.nointercept.withlPVL.noBounds.nflg.1m.withinClusts.PFitter <- getTimingsResultFormula( "multifounder.PFitter.mut.rate.coef", withbounds = FALSE, include.intercept = FALSE, helpful.additional.cols = c("lPVL"), regions = "nflg", times = "1m" );
# Correct for inverse.epsilon to return to the scale of PFitter's days estimate.
formula.calibrated.nointercept.withlPVL.noBounds.nflg.1m.withinClusts.PFitter$evaluated.formula.table[2:3, 1:3 ] <- formula.calibrated.nointercept.withlPVL.noBounds.nflg.1m.withinClusts.PFitter$evaluated.formula.table[2:3, 1:3 ] / inverse.epsilon;
apply( apply( formula.calibrated.nointercept.withlPVL.noBounds.nflg.1m.withinClusts.PFitter$evaluated.formula.table[,1:3], 1:2, function( .value )  { sprintf( "%1.2f", .value ) } ), 1, function( .row ) { paste( .row[ 1 ], " (", .row[2], " to ", .row[3], ")", sep = "" ) } )
#                                   lPVL      multifounder.PFitter.mut.rate.coef 
#                   "4.28 (3.94 to 4.62)"                   "0.89 (0.54 to 1.24)" 
# lPVL:multifounder.PFitter.mut.rate.coef 
#                "-0.08 (-0.11 to -0.05)" 
## WAS:
#                                    lPVL      multifounder.PFitter.mut.rate.coef 
#                   "4.28 (3.94 to 4.62)"       "41200.33 (24929.26 to 57471.39)" 
# lPVL:multifounder.PFitter.mut.rate.coef 
#       "-3691.41 (-5121.52 to -2261.31)" 
formula.calibrated.nointercept.withlPVL.noBounds.nflg.1m.withinClusts.syn.PFitter <- getTimingsResultFormula( "multifounder.Synonymous.PFitter.mut.rate.coef", withbounds = FALSE, include.intercept = FALSE, helpful.additional.cols = c("lPVL"), regions = "nflg", times = "1m" );
# Correct for inverse.epsilon to return to the scale of PFitter's days estimate.
formula.calibrated.nointercept.withlPVL.noBounds.nflg.1m.withinClusts.syn.PFitter$evaluated.formula.table[2:3, 1:3 ] <- formula.calibrated.nointercept.withlPVL.noBounds.nflg.1m.withinClusts.syn.PFitter$evaluated.formula.table[2:3, 1:3 ] / inverse.epsilon;
apply( apply( formula.calibrated.nointercept.withlPVL.noBounds.nflg.1m.withinClusts.syn.PFitter$evaluated.formula.table[,1:3], 1:2, function( .value )  { sprintf( "%1.2f", .value ) } ), 1, function( .row ) { paste( .row[ 1 ], " (", .row[2], " to ", .row[3], ")", sep = "" ) } )
#                                              lPVL 
#                              "4.29 (3.91 to 4.67)" 
#      multifounder.Synonymous.PFitter.mut.rate.coef 
#                              "2.71 (1.73 to 3.70)" 
# lPVL:multifounder.Synonymous.PFitter.mut.rate.coef 
#                           "-0.25 (-0.33 to -0.16)" 
## WAS:
#                                               lPVL 
#                              "4.29 (3.91 to 4.67)" 
#      multifounder.Synonymous.PFitter.mut.rate.coef 
#                "" 
# lPVL:multifounder.Synonymous.PFitter.mut.rate.coef 
#                "-11363.95 (-15433.80 to -7294.11)" 

## 6m
bounded.COB.var <-  "COB.sampledwidth.uniform.hvtn502.time.est";
bounded.PrankenBeast.var <- "Infer.sampledwidth.uniform.hvtn502.time.est";

formula.calibrated.nointercept.withlPVL.noBounds.6m.COB <- getTimingsResultFormula( bounded.COB.var, withbounds = FALSE, include.intercept = FALSE, helpful.additional.cols = c("lPVL"), regions = c( "nflg", "v3" ), times = "6m" );
apply( apply( formula.calibrated.nointercept.withlPVL.noBounds.6m.COB$evaluated.formula.table[,1:3], 1:2, function( .value )  { sprintf( "%1.2f", .value ) } ), 1, function( .row ) { paste( .row[ 1 ], " (", .row[2], " to ", .row[3], ")", sep = "" ) } )
#                                           lPVL 
#                       "15.60 (14.15 to 17.04)" 
#      COB.sampledwidth.uniform.hvtn502.time.est 
#                          "0.97 (0.89 to 1.06)" 
# lPVL:COB.sampledwidth.uniform.hvtn502.time.est 
#                       "-0.08 (-0.10 to -0.07)" 
formula.calibrated.nointercept.withlPVL.noBounds.6m.PrankenBeast <- getTimingsResultFormula( bounded.PrankenBeast.var, withbounds = FALSE, include.intercept = FALSE, helpful.additional.cols = c("lPVL"), regions = c( "nflg", "v3" ), times = "6m" );
apply( apply( formula.calibrated.nointercept.withlPVL.noBounds.6m.PrankenBeast$evaluated.formula.table[,1:3, drop = FALSE], 1:2, function( .value )  { sprintf( "%1.2f", .value ) } ), 1, function( .row ) { paste( .row[ 1 ], " (", .row[2], " to ", .row[3], ")", sep = "" ) } )
#                                             lPVL 
#                         "17.36 (15.59 to 19.14)" 
#      Infer.sampledwidth.uniform.hvtn502.time.est 
#                            "0.95 (0.86 to 1.04)" 
# lPVL:Infer.sampledwidth.uniform.hvtn502.time.est 
#                         "-0.09 (-0.10 to -0.08)" 
formula.calibrated.nointercept.withlPVL.noBounds.6m.PFitter <- getTimingsResultFormula( "PFitter.mut.rate.coef", withbounds = FALSE, include.intercept = FALSE, helpful.additional.cols = c("lPVL"), regions = c( "nflg", "v3" ), times = "6m" );
# Correct for inverse.epsilon to return to the scale of PFitter's days estimate.
formula.calibrated.nointercept.withlPVL.noBounds.6m.PFitter$evaluated.formula.table[2:3, 1:3 ] <- formula.calibrated.nointercept.withlPVL.noBounds.6m.PFitter$evaluated.formula.table[2:3, 1:3 ] / inverse.epsilon;
apply( apply( formula.calibrated.nointercept.withlPVL.noBounds.6m.PFitter$evaluated.formula.table[,1:3], 1:2, function( .value )  { sprintf( "%1.2f", .value ) } ), 1, function( .row ) { paste( .row[ 1 ], " (", .row[2], " to ", .row[3], ")", sep = "" ) } )
#                      lPVL      PFitter.mut.rate.coef 
#   "17.49 (15.99 to 18.98)"      "0.50 (0.32 to 0.67)" 
# lPVL:PFitter.mut.rate.coef 
#   "-0.05 (-0.06 to -0.03)" 
## WAS:
#                              lPVL             PFitter.mut.rate.coef 
#          "17.49 (15.99 to 18.98)" "23080.20 (15030.17 to 31130.22)" 
#        lPVL:PFitter.mut.rate.coef 
# "-2150.86 (-2883.60 to -1418.13)" 
formula.calibrated.nointercept.withlPVL.noBounds.6m.syn.PFitter <- getTimingsResultFormula( "Synonymous.PFitter.mut.rate.coef", withbounds = FALSE, include.intercept = FALSE, helpful.additional.cols = c("lPVL"), regions = c( "nflg", "v3" ), times = "6m" );
# Correct for inverse.epsilon to return to the scale of PFitter's days estimate.
formula.calibrated.nointercept.withlPVL.noBounds.6m.syn.PFitter$evaluated.formula.table[2:3, 1:3 ] <- formula.calibrated.nointercept.withlPVL.noBounds.6m.syn.PFitter$evaluated.formula.table[2:3, 1:3 ] / inverse.epsilon;
apply( apply( formula.calibrated.nointercept.withlPVL.noBounds.6m.syn.PFitter$evaluated.formula.table[,1:3], 1:2, function( .value )  { sprintf( "%1.2f", .value ) } ), 1, function( .row ) { paste( .row[ 1 ], " (", .row[2], " to ", .row[3], ")", sep = "" ) } )
#                                 lPVL      Synonymous.PFitter.mut.rate.coef 
#              "17.62 (16.17 to 19.07)"                 "2.23 (1.39 to 3.07)" 
# lPVL:Synonymous.PFitter.mut.rate.coef 
#              "-0.21 (-0.28 to -0.13)" 
## WAS:
#                                  lPVL      Synonymous.PFitter.mut.rate.coef 
#              "17.62 (16.17 to 19.07)"   "103325.67 (64371.47 to 142279.87)" 
# lPVL:Synonymous.PFitter.mut.rate.coef 
#    "-9533.83 (-12857.81 to -6209.85)" 
formula.calibrated.nointercept.withlPVL.noBounds.6m.withinClusts.PFitter <- getTimingsResultFormula( "multifounder.PFitter.mut.rate.coef", withbounds = FALSE, include.intercept = FALSE, helpful.additional.cols = c("lPVL"), regions = c( "nflg", "v3" ), times = "6m" );
# Correct for inverse.epsilon to return to the scale of PFitter's days estimate.
formula.calibrated.nointercept.withlPVL.noBounds.6m.withinClusts.PFitter$evaluated.formula.table[2:3, 1:3 ] <- formula.calibrated.nointercept.withlPVL.noBounds.6m.withinClusts.PFitter$evaluated.formula.table[2:3, 1:3 ] / inverse.epsilon;
apply( apply( formula.calibrated.nointercept.withlPVL.noBounds.6m.withinClusts.PFitter$evaluated.formula.table[,1:3], 1:2, function( .value )  { sprintf( "%1.2f", .value ) } ), 1, function( .row ) { paste( .row[ 1 ], " (", .row[2], " to ", .row[3], ")", sep = "" ) } )
#                                   lPVL      multifounder.PFitter.mut.rate.coef 
#                "17.39 (15.95 to 18.84)"                   "0.56 (0.30 to 0.82)" 
# lPVL:multifounder.PFitter.mut.rate.coef 
#                "-0.05 (-0.07 to -0.03)" 
## WAS:
#                                    lPVL      multifounder.PFitter.mut.rate.coef 
#                "17.39 (15.95 to 18.84)"       "25860.48 (13861.17 to 37859.78)" 
# lPVL:multifounder.PFitter.mut.rate.coef 
#       "-2326.65 (-3347.63 to -1305.67)" 
formula.calibrated.nointercept.withlPVL.noBounds.6m.withinClusts.syn.PFitter <- getTimingsResultFormula( "multifounder.Synonymous.PFitter.mut.rate.coef", withbounds = FALSE, include.intercept = FALSE, helpful.additional.cols = c("lPVL"), regions = c( "nflg", "v3" ), times = "6m" );
# Correct for inverse.epsilon to return to the scale of PFitter's days estimate.
formula.calibrated.nointercept.withlPVL.noBounds.6m.withinClusts.syn.PFitter$evaluated.formula.table[2:3, 1:3 ] <- formula.calibrated.nointercept.withlPVL.noBounds.6m.withinClusts.syn.PFitter$evaluated.formula.table[2:3, 1:3 ] / inverse.epsilon;
apply( apply( formula.calibrated.nointercept.withlPVL.noBounds.6m.withinClusts.syn.PFitter$evaluated.formula.table[,1:3], 1:2, function( .value )  { sprintf( "%1.2f", .value ) } ), 1, function( .row ) { paste( .row[ 1 ], " (", .row[2], " to ", .row[3], ")", sep = "" ) } )
#                                              lPVL 
#                           "16.86 (15.37 to 18.34)" 
#      multifounder.Synonymous.PFitter.mut.rate.coef 
#                              "3.58 (2.21 to 4.95)" 
# lPVL:multifounder.Synonymous.PFitter.mut.rate.coef 
#                           "-0.31 (-0.42 to -0.20)" 
## WAS:
#                                               lPVL 
#                           "16.86 (15.37 to 18.34)" 
#      multifounder.Synonymous.PFitter.mut.rate.coef 
#               "165721.23 (102262.52 to 229179.94)" 
# lPVL:multifounder.Synonymous.PFitter.mut.rate.coef 
#                "-14245.27 (-19329.39 to -9161.16)" 
## ENDMARK
@ 



Figure~\ref{fig:Timings.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3.summary.Rt} shows a summary of the RMSEs of
estimates of Timings, for the 1m time point sequences from Caprisa 002 (deep, high-quality sequences of short region of Env, V3), estimated using 1m data from Caprisa 002 and RV217. 

Figure~\ref{fig:Timings.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3.summary.rt} shows the corresponding summary, estimated using 1m data from only Caprisa 002. Figure~\ref{fig:Timings.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3.summary.rT} shows the corresponding summary, estimated using 1m and 6m data from only Caprisa 002. Figure~\ref{fig:Timings.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3.summary.RT} shows the corresponding summary using 1m and 6m data from Caprisa 002 and RV217. 

\begin{minipage}{\linewidth}
 {
\centering
\par
\bigskip
\captionof{figure}{\bf RMSEs for estimates of Timings using 1m samples from Caprisa 002, v3 Illumina w/PrimerID, estimated using 1m data from Caprisa 002 and RV217} \label{fig:Timings.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3.summary.Rt}
<<echo = FALSE, results = hide, fig = TRUE>>=
timings.mat <-
    prepare.summary.timings.mat( "Rt", "v3", "1m" );

my.palette <- colorRampPalette(c("red", "yellow", "green"))(n = 299)
col.breaks = c(seq(0,0.5*.m6m,length=100),  # for red
  seq(0.5*.m6m,0.9*.m6m,length=101)[-1],              # for yellow
  seq(.9*.m6m,1*.m6m,length=101)[-1])              # for green

mat.text <- round( timings.mat );
mat.text[ is.na( mat.text ) ] <- "";
mat.data <- (1/timings.mat);
heatmap.2(
        mat.data,
        col = my.palette, colsep=c(1:62),rowsep=(1:62), sepwidth=c(0.05,0.05), sepcolor="white",
        trace="none", Rowv=F,Colv=F, scale="none", dendrogram="none",key=F,
        cellnote = mat.text, notecol = "black", notecex = 0.8,
        srtCol=45, adjCol = c(1,1), cexCol = 0.9,
         cexRow = 0.8,
        margins = c( 11.5, 9.5 ), breaks = col.breaks
    );
@ 
\par
\bigskip
}
\textbf{RMSEs for estimates of Timings using 1m samples from Caprisa 002, v3 Illumina w/PrimerID, estimated using 1m data from Caprisa 002 and RV217}
The first column corresponds to the uncalibrated estimates directly
from PFitter and PREAST. The following models include a combination of parameters given by the label, for instance the values in the fifth column, labeled ``days~1+[bound]+lPVL+'', shows root mean squared prediction errors of models that included an intercept (``1''), the upper bound of the days since infection (``[bound]''), log plasma viral load at the time of sequencing (``lPVL''), and the primary predictor named in the row label (``none'' or e.g. ``PFitter''), with a term for lPVL interacting with the primary predictor. Columns with ``0+'' have no intercept.
\par
\bigskip
\end{minipage}

\begin{minipage}{\linewidth}
 {
\centering
\par
\bigskip
\captionof{figure}{\bf RMSEs for estimates of Timings using 1m samples from Caprisa 002, v3 Illumina w/PrimerID, estimated using 1m data from only Caprisa 002} \label{fig:Timings.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3.summary.rt}
<<echo = FALSE, results = hide, fig = TRUE>>=
timings.mat <-
    prepare.summary.timings.mat( "rt", "v3", "1m" );

my.palette <- colorRampPalette(c("red", "yellow", "green"))(n = 299)
col.breaks = c(seq(0,0.5*.m6m,length=100),  # for red
  seq(0.5*.m6m,0.9*.m6m,length=101)[-1],              # for yellow
  seq(.9*.m6m,1*.m6m,length=101)[-1])              # for green

mat.text <- round( timings.mat );
mat.text[ is.na( mat.text ) ] <- "";
mat.data <- (1/timings.mat);
heatmap.2(
        mat.data,
        col = my.palette, colsep=c(1:62),rowsep=(1:62), sepwidth=c(0.05,0.05), sepcolor="white",
        trace="none", Rowv=F,Colv=F, scale="none", dendrogram="none",key=F,
        cellnote = mat.text, notecol = "black", notecex = 0.8,
        srtCol=45, adjCol = c(1,1), cexCol = 0.9,
         cexRow = 0.8,
        margins = c( 11.5, 9.5 ), breaks = col.breaks
    );
    
@ 
\par
\bigskip
}
\textbf{RMSEs for estimates of Timings using 1m samples from Caprisa 002, v3 Illumina w/PrimerID, estimated using 1m data from only Caprisa 002}
The first column corresponds to the uncalibrated estimates directly
from PFitter and PREAST. The following models include a combination of parameters given by the label, for instance the values in the fifth column, labeled ``days~1+[bound]+lPVL+'', shows root mean squared prediction errors of models that included an intercept (``1''), the upper bound of the days since infection (``[bound]''), log plasma viral load at the time of sequencing (``lPVL''), and the primary predictor named in the row label (``none'' or e.g. ``PFitter''), with a term for lPVL interacting with the primary predictor. Columns with ``0+'' have no intercept.
\par
\bigskip
\end{minipage}

\begin{minipage}{\linewidth}
 {
\centering
\par
\bigskip
\captionof{figure}{\bf RMSEs for estimates of Timings using 1m samples from Caprisa 002, v3 Illumina w/PrimerID, estimated using 1m and 6m data from only Caprisa 002} \label{fig:Timings.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3.summary.rT}
<<echo = FALSE, results = hide, fig = TRUE>>=
timings.mat <-
    prepare.summary.timings.mat( "rt", "v3", "1m" );

my.palette <- colorRampPalette(c("red", "yellow", "green"))(n = 299)
col.breaks = c(seq(0,0.5*.m6m,length=100),  # for red
  seq(0.5*.m6m,0.9*.m6m,length=101)[-1],              # for yellow
  seq(.9*.m6m,1*.m6m,length=101)[-1])              # for green

mat.text <- round( timings.mat );
mat.text[ is.na( mat.text ) ] <- "";
mat.data <- (1/timings.mat);
heatmap.2(
        mat.data,
        col = my.palette, colsep=c(1:62),rowsep=(1:62), sepwidth=c(0.05,0.05), sepcolor="white",
        trace="none", Rowv=F,Colv=F, scale="none", dendrogram="none",key=F,
        cellnote = mat.text, notecol = "black", notecex = 0.8,
        srtCol=45, adjCol = c(1,1), cexCol = 0.9,
         cexRow = 0.8,
        margins = c( 11.5, 9.5 ), breaks = col.breaks
    );
@ 
\par
\bigskip
}
\textbf{RMSEs for estimates of Timings using 1m samples from Caprisa 002, v3 Illumina w/PrimerID, estimated using 1m and 6m data from only Caprisa 002}
The first column corresponds to the uncalibrated estimates directly
from PFitter and PREAST. The following models include a combination of parameters given by the label, for instance the values in the fifth column, labeled ``days~1+[bound]+lPVL+'', shows root mean squared prediction errors of models that included an intercept (``1''), the upper bound of the days since infection (``[bound]''), log plasma viral load at the time of sequencing (``lPVL''), and the primary predictor named in the row label (``none'' or e.g. ``PFitter''), with a term for lPVL interacting with the primary predictor. Columns with ``0+'' have no intercept.
\par
\bigskip
\end{minipage}

\begin{minipage}{\linewidth}
 {
\centering
\par
\bigskip
\captionof{figure}{\bf RMSEs for estimates of Timings using 1m samples from Caprisa 002, v3 Illumina w/PrimerID, estimated using 1m and 6m data from Caprisa 002 and RV217} \label{fig:Timings.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3.summary.RT}
<<echo = FALSE, results = hide, fig = TRUE>>=
timings.mat <-
    prepare.summary.timings.mat( "rt", "v3", "1m" );

my.palette <- colorRampPalette(c("red", "yellow", "green"))(n = 299)
col.breaks = c(seq(0,0.5*.m6m,length=100),  # for red
  seq(0.5*.m6m,0.9*.m6m,length=101)[-1],              # for yellow
  seq(.9*.m6m,1*.m6m,length=101)[-1])              # for green

mat.text <- round( timings.mat );
mat.text[ is.na( mat.text ) ] <- "";
mat.data <- (1/timings.mat);
heatmap.2(
        mat.data,
        col = my.palette, colsep=c(1:62),rowsep=(1:62), sepwidth=c(0.05,0.05), sepcolor="white",
        trace="none", Rowv=F,Colv=F, scale="none", dendrogram="none",key=F,
        cellnote = mat.text, notecol = "black", notecex = 0.8,
        srtCol=45, adjCol = c(1,1), cexCol = 0.9,
         cexRow = 0.8,
        margins = c( 11.5, 9.5 ), breaks = col.breaks
    );
@ 
\par
\bigskip
}
\textbf{RMSEs for estimates of Timings using 1m samples from Caprisa 002, v3 Illumina w/PrimerID, estimated using 1m and 6m data from Caprisa 002 and RV217}
The first column corresponds to the uncalibrated estimates directly
from PFitter and PREAST. The following models include a combination of parameters given by the label, for instance the values in the fifth column, labeled ``days~1+[bound]+lPVL+'', shows root mean squared prediction errors of models that included an intercept (``1''), the upper bound of the days since infection (``[bound]''), log plasma viral load at the time of sequencing (``lPVL''), and the primary predictor named in the row label (``none'' or e.g. ``PFitter''), with a term for lPVL interacting with the primary predictor. Columns with ``0+'' have no intercept.
\par
\bigskip
\end{minipage}

Figure~\ref{fig:Timings.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3.summary.Rt} shows a summary of the RMSEs of
estimates of Timings, for the 6m time point sequences from Caprisa 002 (deep, high-quality sequences of short region of Env, V3), estimated using 6m data from Caprisa 002 and RV217. 

Figure~\ref{fig:Timings.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3.summary.rt} shows the corresponding summary, estimated using 6m data from only Caprisa 002. Figure~\ref{fig:Timings.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3.summary.rT} shows the corresponding summary, estimated using 1m and 6m data from only Caprisa 002. Figure~\ref{fig:Timings.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3.summary.RT} shows the corresponding summary using 1m and 6m data from Caprisa 002 and RV217. 

\begin{minipage}{\linewidth}
 {
\centering
\par
\bigskip
\captionof{figure}{\bf RMSEs for estimates of Timings using 6m samples from Caprisa 002, v3 Illumina w/PrimerID, estimated using 6m data from Caprisa 002 and RV217} \label{fig:Timings.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3.summary.Rt}
<<echo = FALSE, results = hide, fig = TRUE>>=
timings.mat <-
    prepare.summary.timings.mat( "rt", "v3", "6m" );

my.palette <- colorRampPalette(c("red", "yellow", "green"))(n = 299)
col.breaks = c(seq(0,0.5*.m6m,length=100),  # for red
  seq(0.5*.m6m,0.9*.m6m,length=101)[-1],              # for yellow
  seq(.9*.m6m,1*.m6m,length=101)[-1])              # for green

mat.text <- round( timings.mat );
mat.text[ is.na( mat.text ) ] <- "";
mat.data <- (1/timings.mat);
heatmap.2(
        mat.data,
        col = my.palette, colsep=c(1:62),rowsep=(1:62), sepwidth=c(0.05,0.05), sepcolor="white",
        trace="none", Rowv=F,Colv=F, scale="none", dendrogram="none",key=F,
        cellnote = mat.text, notecol = "black", notecex = 0.8,
        srtCol=45, adjCol = c(1,1), cexCol = 0.9,
         cexRow = 0.8,
        margins = c( 11.5, 9.5 ), breaks = col.breaks
    );
@ 
\par
\bigskip
}
\textbf{RMSEs for estimates of Timings using 6m samples from Caprisa 002, v3 Illumina w/PrimerID, estimated using 6m data from Caprisa 002 and RV217}
The first column corresponds to the uncalibrated estimates directly
from PFitter and PREAST. The following models include a combination of parameters given by the label, for instance the values in the fifth column, labeled ``days~1+[bound]+lPVL+'', shows root mean squared prediction errors of models that included an intercept (``1''), the upper bound of the days since infection (``[bound]''), log plasma viral load at the time of sequencing (``lPVL''), and the primary predictor named in the row label (``none'' or e.g. ``PFitter''), with a term for lPVL interacting with the primary predictor. Columns with ``0+'' have no intercept.
\par
\bigskip
\end{minipage}

\begin{minipage}{\linewidth}
 {
\centering
\par
\bigskip
\captionof{figure}{\bf RMSEs for estimates of Timings using 6m samples from Caprisa 002, v3 Illumina w/PrimerID, estimated using 6m data from only Caprisa 002} \label{fig:Timings.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3.summary.rt}
<<echo = FALSE, results = hide, fig = TRUE>>=
timings.mat <-
    prepare.summary.timings.mat( "rt", "v3", "6m" );

my.palette <- colorRampPalette(c("red", "yellow", "green"))(n = 299)
col.breaks = c(seq(0,0.5*.m6m,length=100),  # for red
  seq(0.5*.m6m,0.9*.m6m,length=101)[-1],              # for yellow
  seq(.9*.m6m,1*.m6m,length=101)[-1])              # for green

mat.text <- round( timings.mat );
mat.text[ is.na( mat.text ) ] <- "";
mat.data <- (1/timings.mat);
heatmap.2(
        mat.data,
        col = my.palette, colsep=c(1:62),rowsep=(1:62), sepwidth=c(0.05,0.05), sepcolor="white",
        trace="none", Rowv=F,Colv=F, scale="none", dendrogram="none",key=F,
        cellnote = mat.text, notecol = "black", notecex = 0.8,
        srtCol=45, adjCol = c(1,1), cexCol = 0.9,
         cexRow = 0.8,
        margins = c( 11.5, 9.5 ), breaks = col.breaks
    );
    
@ 
\par
\bigskip
}
\textbf{RMSEs for estimates of Timings using 6m samples from Caprisa 002, v3 Illumina w/PrimerID, estimated using 6m data from only Caprisa 002}
The first column corresponds to the uncalibrated estimates directly
from PFitter and PREAST. The following models include a combination of parameters given by the label, for instance the values in the fifth column, labeled ``days~1+[bound]+lPVL+'', shows root mean squared prediction errors of models that included an intercept (``1''), the upper bound of the days since infection (``[bound]''), log plasma viral load at the time of sequencing (``lPVL''), and the primary predictor named in the row label (``none'' or e.g. ``PFitter''), with a term for lPVL interacting with the primary predictor. Columns with ``0+'' have no intercept.
\par
\bigskip
\end{minipage}

\begin{minipage}{\linewidth}
 {
\centering
\par
\bigskip
\captionof{figure}{\bf RMSEs for estimates of Timings using 6m samples from Caprisa 002, v3 Illumina w/PrimerID, estimated using 1m and 6m data from only Caprisa 002} \label{fig:Timings.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3.summary.rT}
<<echo = FALSE, results = hide, fig = TRUE>>=
timings.mat <-
    prepare.summary.timings.mat( "rt", "v3", "6m" );

my.palette <- colorRampPalette(c("red", "yellow", "green"))(n = 299)
col.breaks = c(seq(0,0.5*.m6m,length=100),  # for red
  seq(0.5*.m6m,0.9*.m6m,length=101)[-1],              # for yellow
  seq(.9*.m6m,1*.m6m,length=101)[-1])              # for green

mat.text <- round( timings.mat );
mat.text[ is.na( mat.text ) ] <- "";
mat.data <- (1/timings.mat);
heatmap.2(
        mat.data,
        col = my.palette, colsep=c(1:62),rowsep=(1:62), sepwidth=c(0.05,0.05), sepcolor="white",
        trace="none", Rowv=F,Colv=F, scale="none", dendrogram="none",key=F,
        cellnote = mat.text, notecol = "black", notecex = 0.8,
        srtCol=45, adjCol = c(1,1), cexCol = 0.9,
         cexRow = 0.8,
        margins = c( 11.5, 9.5 ), breaks = col.breaks
    );
@ 
\par
\bigskip
}
\textbf{RMSEs for estimates of Timings using 6m samples from Caprisa 002, v3 Illumina w/PrimerID, estimated using 1m and 6m data from only Caprisa 002}
The first column corresponds to the uncalibrated estimates directly
from PFitter and PREAST. The following models include a combination of parameters given by the label, for instance the values in the fifth column, labeled ``days~1+[bound]+lPVL+'', shows root mean squared prediction errors of models that included an intercept (``1''), the upper bound of the days since infection (``[bound]''), log plasma viral load at the time of sequencing (``lPVL''), and the primary predictor named in the row label (``none'' or e.g. ``PFitter''), with a term for lPVL interacting with the primary predictor. Columns with ``0+'' have no intercept.
\par
\bigskip
\end{minipage}

\begin{minipage}{\linewidth}
 {
\centering
\par
\bigskip
\captionof{figure}{\bf RMSEs for estimates of Timings using 6m samples from Caprisa 002, v3 Illumina w/PrimerID, estimated using 1m and 6m data from Caprisa 002 and RV217} \label{fig:Timings.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3.summary.RT}
<<echo = FALSE, results = hide, fig = TRUE>>=
timings.mat <-
    prepare.summary.timings.mat( "rt", "v3", "6m" );

my.palette <- colorRampPalette(c("red", "yellow", "green"))(n = 299)
col.breaks = c(seq(0,0.5*.m6m,length=100),  # for red
  seq(0.5*.m6m,0.9*.m6m,length=101)[-1],              # for yellow
  seq(.9*.m6m,1*.m6m,length=101)[-1])              # for green

mat.text <- round( timings.mat );
mat.text[ is.na( mat.text ) ] <- "";
mat.data <- (1/timings.mat);
heatmap.2(
        mat.data,
        col = my.palette, colsep=c(1:62),rowsep=(1:62), sepwidth=c(0.05,0.05), sepcolor="white",
        trace="none", Rowv=F,Colv=F, scale="none", dendrogram="none",key=F,
        cellnote = mat.text, notecol = "black", notecex = 0.8,
        srtCol=45, adjCol = c(1,1), cexCol = 0.9,
         cexRow = 0.8,
        margins = c( 11.5, 9.5 ), breaks = col.breaks
    );
@ 
\par
\bigskip
}
\textbf{RMSEs for estimates of Timings using 6m samples from Caprisa 002, v3 Illumina w/PrimerID, estimated using 1m and 6m data from Caprisa 002 and RV217}
The first column corresponds to the uncalibrated estimates directly
from PFitter and PREAST. The following models include a combination of parameters given by the label, for instance the values in the fifth column, labeled ``days~1+[bound]+lPVL+'', shows root mean squared prediction errors of models that included an intercept (``1''), the upper bound of the days since infection (``[bound]''), log plasma viral load at the time of sequencing (``lPVL''), and the primary predictor named in the row label (``none'' or e.g. ``PFitter''), with a term for lPVL interacting with the primary predictor. Columns with ``0+'' have no intercept.
\par
\bigskip
\end{minipage}

%%%%%endmark


\subsubsection{Timing, excluding intercept, including lPVL}

%% MARK

<<echo = FALSE, results = hide>>=
### Configuration (Defaults)
  include.intercept = FALSE;
  include.all.vars.in.lasso = TRUE;
  helpful.additional.cols = c( "lPVL" );
  helpful.additional.cols.with.interactions = c();#c( "v3_not_nflg", "X6m.not.1m" );
  use.gold.is.multiple = FALSE;

# Ensure results exist.
.results.by.region.and.time.Rda.filename <- evaluateTimings(
     include.intercept = include.intercept,
     include.all.vars.in.lasso = include.all.vars.in.lasso,
     helpful.additional.cols = helpful.additional.cols,
     helpful.additional.cols.with.interactions = helpful.additional.cols.with.interactions,
     use.gold.is.multiple = use.gold.is.multiple,
     force.recomputation = FORCE.RECOMPUTATION,
     RESULTS.DIR = RESULTS.DIR,
     results.dirname = RESULTS.DIRNAME
);

# evaluateTimings.compute.config.string(..) is defined in evaluateTimings.R.
config.string <- evaluateTimings.compute.config.string(
        include.intercept = include.intercept,
        include.all.vars.in.lasso = include.all.vars.in.lasso,
        helpful.additional.cols = helpful.additional.cols,
        helpful.additional.cols.with.interactions = helpful.additional.cols.with.interactions,
        use.gold.is.multiple = use.gold.is.multiple
);


### evaluateTimings
    if( config.string == "" ) {
        evaluateTimings.tab.file.suffix <- "_evaluateTimings.tab";
    } else {
        evaluateTimings.tab.file.suffix <- paste( "_evaluateTimings_", config.string, ".tab", sep = "" );
    }
    

### MARK ERE I AM.  Testing new stuff.
# load( .results.by.region.and.time.Rda.filename ); # adds results.by.region.and.time to environment.
#.formulas.table <- get.formulas( results.by.region.and.time, .varname = "PFitter.mut.rate.coef", model.type = "step", withbounds = TRUE );
#evaluate.specific.timings.model.formula( results.by.region.and.time,  names( which.max( .formulas.table ) ) )
# .formulas.table <- get.formulas( results.by.region.and.time, .varname = "PFitter.mut.rate.coef", model.type = "glm", withbounds = TRUE );
# evaluate.specific.timings.model.formula( results.by.region.and.time,  names( which.max( .formulas.table ) ) )

##############
## sampledwidth_uniform_1mmtn003_6mhvtn502
evaluateTimings.nflg.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", to.region = "v3", the.time = "1m.6m", sort.column = NULL, the.bounds.type = "sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
colnames( evaluateTimings.nflg.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg ) <- paste( "nflg.v3.1m.6m", colnames( evaluateTimings.nflg.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg ), sep = "." );
evaluateTimings.nflg.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", the.time = "1m.6m", sort.column = NULL, the.bounds.type = "sampledwidth_uniform_1mmtn003_6mhvtn502.1m", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
colnames( evaluateTimings.nflg.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg ) <- paste( "nflg.1m.6m", colnames( evaluateTimings.nflg.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg ), sep = "." );
evaluateTimings.nflg.v3.1m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", to.region = "v3", the.time = "1m", sort.column = NULL, the.bounds.type = "sampledwidth_uniform_mtn003.nflg", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
colnames( evaluateTimings.nflg.v3.1m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg ) <- paste( "nflg.v3.1m", colnames( evaluateTimings.nflg.v3.1m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg ), sep = "." );
evaluateTimings.nflg.1m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", the.time = "1m", sort.column = NULL, the.bounds.type = "sampledwidth_uniform_mtn003", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
colnames( evaluateTimings.nflg.1m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg ) <- paste( "nflg.1m", colnames( evaluateTimings.nflg.1m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg ), sep = "." );

evaluateTimings.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg <- missing.row.safe.cbind( missing.row.safe.cbind( missing.row.safe.cbind( evaluateTimings.nflg.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg, evaluateTimings.nflg.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg ), evaluateTimings.nflg.v3.1m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg ), evaluateTimings.nflg.1m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg );

## sampledwidth_uniform_1mmtn003_6mhvtn502 6m.nflg
evaluateTimings.nflg.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", to.region = "v3", the.time = "1m.6m", sort.column = NULL, the.bounds.type = "sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
colnames( evaluateTimings.nflg.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg ) <- paste( "nflg.v3.1m.6m", colnames( evaluateTimings.nflg.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg ), sep = "." );
evaluateTimings.nflg.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", the.time = "1m.6m", sort.column = NULL, the.bounds.type = "sampledwidth_uniform_1mmtn003_6mhvtn502.6m", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
colnames( evaluateTimings.nflg.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg ) <- paste( "nflg.1m.6m", colnames( evaluateTimings.nflg.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg ), sep = "." );
evaluateTimings.nflg.v3.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", to.region = "v3", the.time = "6m", sort.column = NULL, the.bounds.type = "sampledwidth_uniform_hvtn502.nflg", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
colnames( evaluateTimings.nflg.v3.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg ) <- paste( "nflg.v3.6m", colnames( evaluateTimings.nflg.v3.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg ), sep = "." );
evaluateTimings.nflg.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", the.time = "6m", sort.column = NULL, the.bounds.type = "sampledwidth_uniform_hvtn502", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
colnames( evaluateTimings.nflg.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg ) <- paste( "nflg.6m", colnames( evaluateTimings.nflg.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg ), sep = "." );

evaluateTimings.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg <- missing.row.safe.cbind( missing.row.safe.cbind( missing.row.safe.cbind( evaluateTimings.nflg.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg, evaluateTimings.nflg.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg ), evaluateTimings.nflg.v3.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg ), evaluateTimings.nflg.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg );

## sampledwidth_uniform_1mmtn003_6mhvtn502 1m.v3
evaluateTimings.nflg.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3 <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", to.region = "v3", the.time = "1m.6m", sort.column = NULL, the.bounds.type = "sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
colnames( evaluateTimings.nflg.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3 ) <- paste( "nflg.v3.1m.6m", colnames( evaluateTimings.nflg.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3 ), sep = "." );
evaluateTimings.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3 <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "v3", the.time = "1m.6m", sort.column = NULL, the.bounds.type = "sampledwidth_uniform_1mmtn003_6mhvtn502.1m", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
colnames( evaluateTimings.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3 ) <- paste( "v3.1m.6m", colnames( evaluateTimings.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3 ), sep = "." );
evaluateTimings.nflg.v3.1m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3 <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", to.region = "v3", the.time = "1m", sort.column = NULL, the.bounds.type = "sampledwidth_uniform_mtn003.v3", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
colnames( evaluateTimings.nflg.v3.1m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3 ) <- paste( "nflg.v3.1m", colnames( evaluateTimings.nflg.v3.1m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3 ), sep = "." );
evaluateTimings.v3.1m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3 <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "v3", the.time = "1m", sort.column = NULL, the.bounds.type = "sampledwidth_uniform_mtn003", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
colnames( evaluateTimings.v3.1m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3 ) <- paste( "v3.1m", colnames( evaluateTimings.v3.1m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3 ), sep = "." );

evaluateTimings.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3 <- missing.row.safe.cbind( missing.row.safe.cbind( missing.row.safe.cbind( evaluateTimings.nflg.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3, evaluateTimings.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3 ), evaluateTimings.nflg.v3.1m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3 ), evaluateTimings.v3.1m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3 );

## sampledwidth_uniform_1mmtn003_6mhvtn502 6m.v3
evaluateTimings.nflg.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3 <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", to.region = "v3", the.time = "1m.6m", sort.column = NULL, the.bounds.type = "sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
colnames( evaluateTimings.nflg.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3 ) <- paste( "nflg.v3.1m.6m", colnames( evaluateTimings.nflg.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3 ), sep = "." );
evaluateTimings.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3 <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "v3", the.time = "1m.6m", sort.column = NULL, the.bounds.type = "sampledwidth_uniform_1mmtn003_6mhvtn502.6m", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
colnames( evaluateTimings.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3 ) <- paste( "v3.1m.6m", colnames( evaluateTimings.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3 ), sep = "." );
evaluateTimings.nflg.v3.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3 <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", to.region = "v3", the.time = "6m", sort.column = NULL, the.bounds.type = "sampledwidth_uniform_hvtn502.v3", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
colnames( evaluateTimings.nflg.v3.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3 ) <- paste( "nflg.v3.6m", colnames( evaluateTimings.nflg.v3.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3 ), sep = "." );
evaluateTimings.v3.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3 <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "v3", the.time = "6m", sort.column = NULL, the.bounds.type = "sampledwidth_uniform_hvtn502", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
colnames( evaluateTimings.v3.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3 ) <- paste( "v3.6m", colnames( evaluateTimings.v3.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3 ), sep = "." );

evaluateTimings.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3 <- missing.row.safe.cbind( missing.row.safe.cbind( missing.row.safe.cbind( evaluateTimings.nflg.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3, evaluateTimings.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3 ), evaluateTimings.nflg.v3.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3 ), evaluateTimings.v3.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3 );
##############

if( FALSE ) {
  ##############
  ## unbounded 1m.nflg
  evaluateTimings.nflg.v3.1m.6m.unbounded.1m.nflg <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", to.region = "v3", the.time = "1m.6m", sort.column = NULL, the.bounds.type = "unbounded.1m.nflg", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
  colnames( evaluateTimings.nflg.v3.1m.6m.unbounded.1m.nflg ) <- paste( "nflg.v3.1m.6m", colnames( evaluateTimings.nflg.v3.1m.6m.unbounded.1m.nflg ), sep = "." );
  evaluateTimings.nflg.1m.6m.unbounded.1m.nflg <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", the.time = "1m.6m", sort.column = NULL, the.bounds.type = "unbounded.1m", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
  colnames( evaluateTimings.nflg.1m.6m.unbounded.1m.nflg ) <- paste( "nflg.1m.6m", colnames( evaluateTimings.nflg.1m.6m.unbounded.1m.nflg ), sep = "." );
  evaluateTimings.nflg.v3.1m.unbounded.1m.nflg <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", to.region = "v3", the.time = "1m", sort.column = NULL, the.bounds.type = "unbounded.nflg", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
  colnames( evaluateTimings.nflg.v3.1m.unbounded.1m.nflg ) <- paste( "nflg.v3.1m", colnames( evaluateTimings.nflg.v3.1m.unbounded.1m.nflg ), sep = "." );
  evaluateTimings.nflg.1m.unbounded.1m.nflg <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", the.time = "1m", sort.column = NULL, the.bounds.type = "unbounded", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
  colnames( evaluateTimings.nflg.1m.unbounded.1m.nflg ) <- paste( "nflg.1m", colnames( evaluateTimings.nflg.1m.unbounded.1m.nflg ), sep = "." );
  
  evaluateTimings.unbounded.1m.nflg <- missing.row.safe.cbind( missing.row.safe.cbind( missing.row.safe.cbind( evaluateTimings.nflg.v3.1m.6m.unbounded.1m.nflg, evaluateTimings.nflg.1m.6m.unbounded.1m.nflg ), evaluateTimings.nflg.v3.1m.unbounded.1m.nflg ), evaluateTimings.nflg.1m.unbounded.1m.nflg );
  
  ## unbounded 6m.nflg
  evaluateTimings.nflg.v3.1m.6m.unbounded.6m.nflg <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", to.region = "v3", the.time = "1m.6m", sort.column = NULL, the.bounds.type = "unbounded.6m.nflg", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
  colnames( evaluateTimings.nflg.v3.1m.6m.unbounded.6m.nflg ) <- paste( "nflg.v3.1m.6m", colnames( evaluateTimings.nflg.v3.1m.6m.unbounded.6m.nflg ), sep = "." );
  evaluateTimings.nflg.1m.6m.unbounded.6m.nflg <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", the.time = "1m.6m", sort.column = NULL, the.bounds.type = "unbounded.6m", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
  colnames( evaluateTimings.nflg.1m.6m.unbounded.6m.nflg ) <- paste( "nflg.1m.6m", colnames( evaluateTimings.nflg.1m.6m.unbounded.6m.nflg ), sep = "." );
  evaluateTimings.nflg.v3.6m.unbounded.6m.nflg <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", to.region = "v3", the.time = "6m", sort.column = NULL, the.bounds.type = "unbounded.nflg", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
  colnames( evaluateTimings.nflg.v3.6m.unbounded.6m.nflg ) <- paste( "nflg.v3.6m", colnames( evaluateTimings.nflg.v3.6m.unbounded.6m.nflg ), sep = "." );
  evaluateTimings.nflg.6m.unbounded.6m.nflg <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", the.time = "6m", sort.column = NULL, the.bounds.type = "unbounded", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
  colnames( evaluateTimings.nflg.6m.unbounded.6m.nflg ) <- paste( "nflg.6m", colnames( evaluateTimings.nflg.6m.unbounded.6m.nflg ), sep = "." );
  
  evaluateTimings.unbounded.6m.nflg <- missing.row.safe.cbind( missing.row.safe.cbind( missing.row.safe.cbind( evaluateTimings.nflg.v3.1m.6m.unbounded.6m.nflg, evaluateTimings.nflg.1m.6m.unbounded.6m.nflg ), evaluateTimings.nflg.v3.6m.unbounded.6m.nflg ), evaluateTimings.nflg.6m.unbounded.6m.nflg );
  
  ## unbounded 1m.v3
  evaluateTimings.nflg.v3.1m.6m.unbounded.1m.v3 <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", to.region = "v3", the.time = "1m.6m", sort.column = NULL, the.bounds.type = "unbounded.1m.v3", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
  colnames( evaluateTimings.nflg.v3.1m.6m.unbounded.1m.v3 ) <- paste( "nflg.v3.1m.6m", colnames( evaluateTimings.nflg.v3.1m.6m.unbounded.1m.v3 ), sep = "." );
  evaluateTimings.v3.1m.6m.unbounded.1m.v3 <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "v3", the.time = "1m.6m", sort.column = NULL, the.bounds.type = "unbounded.1m", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
  colnames( evaluateTimings.v3.1m.6m.unbounded.1m.v3 ) <- paste( "v3.1m.6m", colnames( evaluateTimings.v3.1m.6m.unbounded.1m.v3 ), sep = "." );
  evaluateTimings.nflg.v3.1m.unbounded.1m.v3 <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", to.region = "v3", the.time = "1m", sort.column = NULL, the.bounds.type = "unbounded.v3", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
  colnames( evaluateTimings.nflg.v3.1m.unbounded.1m.v3 ) <- paste( "nflg.v3.1m", colnames( evaluateTimings.nflg.v3.1m.unbounded.1m.v3 ), sep = "." );
  evaluateTimings.v3.1m.unbounded.1m.v3 <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "v3", the.time = "1m", sort.column = NULL, the.bounds.type = "unbounded", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
  colnames( evaluateTimings.v3.1m.unbounded.1m.v3 ) <- paste( "v3.1m", colnames( evaluateTimings.v3.1m.unbounded.1m.v3 ), sep = "." );
  
  evaluateTimings.unbounded.1m.v3 <- missing.row.safe.cbind( missing.row.safe.cbind( missing.row.safe.cbind( evaluateTimings.nflg.v3.1m.6m.unbounded.1m.v3, evaluateTimings.v3.1m.6m.unbounded.1m.v3 ), evaluateTimings.nflg.v3.1m.unbounded.1m.v3 ), evaluateTimings.v3.1m.unbounded.1m.v3 );
  
  ## unbounded 6m.v3
  evaluateTimings.nflg.v3.1m.6m.unbounded.6m.v3 <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", to.region = "v3", the.time = "1m.6m", sort.column = NULL, the.bounds.type = "unbounded.6m.v3", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
  colnames( evaluateTimings.nflg.v3.1m.6m.unbounded.6m.v3 ) <- paste( "nflg.v3.1m.6m", colnames( evaluateTimings.nflg.v3.1m.6m.unbounded.6m.v3 ), sep = "." );
  evaluateTimings.v3.1m.6m.unbounded.6m.v3 <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "v3", the.time = "1m.6m", sort.column = NULL, the.bounds.type = "unbounded.6m", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
  colnames( evaluateTimings.v3.1m.6m.unbounded.6m.v3 ) <- paste( "v3.1m.6m", colnames( evaluateTimings.v3.1m.6m.unbounded.6m.v3 ), sep = "." );
  evaluateTimings.nflg.v3.6m.unbounded.6m.v3 <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", to.region = "v3", the.time = "6m", sort.column = NULL, the.bounds.type = "unbounded.v3", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
  colnames( evaluateTimings.nflg.v3.6m.unbounded.6m.v3 ) <- paste( "nflg.v3.6m", colnames( evaluateTimings.nflg.v3.6m.unbounded.6m.v3 ), sep = "." );
  evaluateTimings.v3.6m.unbounded.6m.v3 <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "v3", the.time = "6m", sort.column = NULL, the.bounds.type = "unbounded", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
  colnames( evaluateTimings.v3.6m.unbounded.6m.v3 ) <- paste( "v3.6m", colnames( evaluateTimings.v3.6m.unbounded.6m.v3 ), sep = "." );
  
  evaluateTimings.unbounded.6m.v3 <- missing.row.safe.cbind( missing.row.safe.cbind( missing.row.safe.cbind( evaluateTimings.nflg.v3.1m.6m.unbounded.6m.v3, evaluateTimings.v3.1m.6m.unbounded.6m.v3 ), evaluateTimings.nflg.v3.6m.unbounded.6m.v3 ), evaluateTimings.v3.6m.unbounded.6m.v3 );
} # END IF FALSE
##############

#### TODO: REMOVE?
## For some reason one of the values is spuriously low (see below) so we make sure the "min" isn't below 4 for 1m and 8 for 6m.
#                                                 nflg.v3.1m.6m.glm nointercept validation results rmse
# Infer uniform 1mmtn003 6mhvtn502                                                                 0.08
# 
.m1m <- (1/max( 4, base::min( evaluateTimings.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg, evaluateTimings.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3, na.rm = TRUE ) ) );
.m6m <- (1/max( 8, base::min( evaluateTimings.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg, evaluateTimings.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3, na.rm = TRUE ) ) );

@ 

%% ### mark
Figure~\ref{fig:Timings.lPVL.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg} shows the RMSEs of
estimates of Timings, for the 1m time point sequences from RV217
(high-quality nearly-full length (nflg) sequences, about 10 nflg-equivalents
per sample). The estimates are bounded in the sense that whenever a prediction is outside the bounds, we replace it with the nearest bound.  The PREAST method presently fails on three of the ``1m'' ``nflg'' sequences, and these are replaced by the lower bound before evaluation. There is no intercept allowed (nor lone indicators that can be used as an intercept), and log plasma viral load (lPVL) is included in every model, with interactions.
 
\begin{minipage}{\linewidth}
 {
\centering
\par
\bigskip
\captionof{figure}{\bf RMSEs for estimates of Timings using 1m samples
  from RV217, ~10 SGA nflg-equiv, and lPVL (no intercept)} \label{fig:Timings.lPVL.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg}
<<echo = FALSE, results = hide, fig = TRUE>>=
#timings.mat <- evaluateTimings.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg;
#timings.mat <- evaluateTimings.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg[ , 1:7 ];
timings.mat <- prepare.timings.mat( evaluateTimings.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg, include.intercept = FALSE );

my.palette <- colorRampPalette(c("red", "yellow", "green"))(n = 299)
col.breaks = c(seq(0,0.5*.m1m,length=100),  # for red
  seq(0.5*.m1m,0.9*.m1m,length=101)[-1],              # for yellow
  seq(.9*.m1m,1*.m1m,length=101)[-1])              # for green

mat.text <- round( timings.mat );
mat.text[ is.na( mat.text ) ] <- "";
mat.data <- (1/timings.mat);
heatmap.2(
        mat.data,
        col = my.palette, colsep=c(1:62),rowsep=(1:62), sepwidth=c(0.05,0.05), sepcolor="white",
        trace="none", Rowv=F,Colv=F, scale="none", dendrogram="none",key=F,
        cellnote = mat.text, notecol = "black", notecex = 0.8,
        srtCol=45, adjCol = c(1,1), cexCol = 0.9,
         cexRow = 0.8,
        margins = c( 11.5, 9.5 ), breaks = col.breaks
    );
@ 
\par
\bigskip
}
\textbf{RMSEs for estimates of Timings using 1m samples
  from RV217, ~10 SGA nflg-equiv, and lPVL (no intercept)}
The first column corresponds to the uncalibrated estimates directly
from PFitter and PREAST.  Four sets of three columns follow,
corresponding to different data used in the calibration.  In the
leftmost of the four sets, labeled [RT], all of the data is included:
both regions, and both times.  In the rightmost, labeled [rt], only
sequences of the nflg region from RV217 and 1m time are used in
the parameter fitting step.   These models include log Plasma Viral Load (lPVL), and exclude the intercept and lone variables that can serve as an intercept (v3\_not\_nflg, 6m\_not\_1m, and v3\_not\_nflg :6m\_not\_1m).
\par
\bigskip
\end{minipage}

Figure~\ref{fig:Timings.lPVL.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg} shows the RMSEs of
estimates of Timings, for the 6m time point sequences from RV217
(high-quality nearly-full length (nflg) sequences, about 10 nflg-equivalents
per sample).

\begin{minipage}{\linewidth}
 {
\centering
\par
\bigskip
\captionof{figure}{\bf RMSEs for estimates of Timings using 6m samples from RV217, ~10 SGA nflg-equiv, and lPVL (no intercept)} \label{fig:Timings.lPVL.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg}
<<echo = FALSE, results = hide, fig = TRUE>>=
#timings.mat <- evaluateTimings.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg;
#timings.mat <- evaluateTimings.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg[ , 1:7 ];
timings.mat <- prepare.timings.mat( evaluateTimings.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg, include.intercept = FALSE );

my.palette <- colorRampPalette(c("red", "yellow", "green"))(n = 299)
col.breaks = c(seq(0,0.5*.m6m,length=100),  # for red
  seq(0.5*.m6m,0.9*.m6m,length=101)[-1],              # for yellow
  seq(.9*.m6m,1*.m6m,length=101)[-1])              # for green

mat.text <- round( timings.mat );
mat.text[ is.na( mat.text ) ] <- "";
mat.data <- (1/timings.mat);
heatmap.2(
        mat.data,
        col = my.palette, colsep=c(1:62),rowsep=(1:62), sepwidth=c(0.05,0.05), sepcolor="white",
        trace="none", Rowv=F,Colv=F, scale="none", dendrogram="none",key=F,
        cellnote = mat.text, notecol = "black", notecex = 0.8,
        srtCol=45, adjCol = c(1,1), cexCol = 0.9,
         cexRow = 0.8,
        margins = c( 11.5, 9.5 ), breaks = col.breaks
    );
@ 
\par
\bigskip
}
\textbf{RMSEs for estimates of Timings using 6m samples
  from RV217, ~10 SGA nflg-equiv, and lPVL (no intercept)}
The first column corresponds to the uncalibrated estimates directly
from PFitter and PREAST.  Four sets of three columns follow,
corresponding to different data used in the calibration.  In the
leftmost of the four sets, labeled [RT], all of the data is included:
both regions, and both times.  In the rightmost, labeled [rt], only
sequences of the nflg region from RV217 and 1m time are used in
the parameter fitting step.   These models include log Plasma Viral Load (lPVL), and exclude the intercept and lone variables that can serve as an intercept (v3\_not\_nflg, 6m\_not\_1m, and v3\_not\_nflg :6m\_not\_1m).
\par
\bigskip
\end{minipage}



Figure~\ref{fig:Timings.lPVL.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3} shows the RMSEs of
estimates of Timings, for the 1m time point sequences from Caprisa 002 (deep, high-quality sequences of short region of Env, V3). 
 
\begin{minipage}{\linewidth}
 {
\centering
\par
\bigskip
\captionof{figure}{\bf RMSEs for estimates of Timings 1m samples from Caprisa 002, v3 Illumina w/PrimerID, and lPVL (no intercept)} \label{fig:Timings.lPVL.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3}
<<echo = FALSE, results = hide, fig = TRUE>>=
#timings.mat <- evaluateTimings.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3;
#timings.mat <- evaluateTimings.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3[ , 1:7 ];
timings.mat <- prepare.timings.mat( evaluateTimings.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3, include.intercept = FALSE );

my.palette <- colorRampPalette(c("red", "yellow", "green"))(n = 299)
col.breaks = c(seq(0,0.5*.m1m,length=100),  # for red
  seq(0.5*.m1m,0.9*.m1m,length=101)[-1],              # for yellow
  seq(.9*.m1m,1*.m1m,length=101)[-1])              # for green

mat.text <- round( timings.mat );
mat.text[ is.na( mat.text ) ] <- "";
mat.data <- (1/timings.mat);
heatmap.2(
        mat.data,
        col = my.palette, colsep=c(1:62),rowsep=(1:62), sepwidth=c(0.05,0.05), sepcolor="white",
        trace="none", Rowv=F,Colv=F, scale="none", dendrogram="none",key=F,
        cellnote = mat.text, notecol = "black", notecex = 0.8,
        srtCol=45, adjCol = c(1,1), cexCol = 0.9,
         cexRow = 0.8,
        margins = c( 11.5, 9.5 ), breaks = col.breaks
    );
@ 
\par
\bigskip
}
\textbf{RMSEs for estimates of Timings 1m samples from Caprisa 002, v3 Illumina w/PrimerID, and lPVL (no intercept)}
The first column corresponds to the uncalibrated estimates directly
from PFitter and PREAST.  Four sets of three columns follow,
corresponding to different data used in the calibration.  In the
leftmost of the four sets, labeled [RT], all of the data is included:
both regions, and both times.  In the rightmost, labeled [rt], only
sequences of the v3 region from RV217 and 1m time are used in
the parameter fitting step.   These models include log Plasma Viral Load (lPVL), and exclude the intercept and lone variables that can serve as an intercept (v3\_not\_nflg, 6m\_not\_1m, and v3\_not\_nflg :6m\_not\_1m).
\par
\bigskip
\end{minipage}

Figure~\ref{fig:Timings.lPVL.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3} shows the RMSEs of
estimates of Timings, for the 6m time point sequences from Caprisa 002 (deep, high-quality sequences of short region of Env, V3). 

\begin{minipage}{\linewidth}
 {
\centering
\par
\bigskip
\captionof{figure}{\bf RMSEs for estimates of Timings using 6m samples from Caprisa 002, v3 Illumina w/PrimerID, and lPVL (no intercept)} \label{fig:Timings.lPVL.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3}
<<echo = FALSE, results = hide, fig = TRUE>>=
#timings.mat <- evaluateTimings.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3;
#timings.mat <- evaluateTimings.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3[ , 1:7 ];
timings.mat <- prepare.timings.mat( evaluateTimings.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3, include.intercept = FALSE );

my.palette <- colorRampPalette(c("red", "yellow", "green"))(n = 299)
col.breaks = c(seq(0,0.5*.m6m,length=100),  # for red
  seq(0.5*.m6m,0.9*.m6m,length=101)[-1],              # for yellow
  seq(.9*.m6m,1*.m6m,length=101)[-1])              # for green

mat.text <- round( timings.mat );
mat.text[ is.na( mat.text ) ] <- "";
mat.data <- (1/timings.mat);
heatmap.2(
        mat.data,
        col = my.palette, colsep=c(1:62),rowsep=(1:62), sepwidth=c(0.05,0.05), sepcolor="white",
        trace="none", Rowv=F,Colv=F, scale="none", dendrogram="none",key=F,
        cellnote = mat.text, notecol = "black", notecex = 0.8,
        srtCol=45, adjCol = c(1,1), cexCol = 0.9,
         cexRow = 0.8,
        margins = c( 11.5, 9.5 ), breaks = col.breaks
    );
@ 
\par
\bigskip
}
\textbf{RMSEs for estimates of Timings using 6m samples from Caprisa 002, v3 Illumina w/PrimerID, and lPVL (no intercept)}
The first column corresponds to the uncalibrated estimates directly
from PFitter and PREAST.  Four sets of three columns follow,
corresponding to different data used in the calibration.  In the
leftmost of the four sets, labeled [RT], all of the data is included:
both regions, and both times.  In the rightmost, labeled [rt], only
sequences of the v3 region from RV217 and 1m time are used in
the parameter fitting step.  These models include log Plasma Viral Load (lPVL), and exclude the intercept and lone variables that can serve as an intercept (v3\_not\_nflg, 6m\_not\_1m, and v3\_not\_nflg :6m\_not\_1m).
\par
\bigskip
\end{minipage}

%%%%%endmark

This analysis indicates that we can build good estimators of the infection time using lPVL and sequence data, without relying on an intercept.  The inclusion of lPVL is the most important factor for prediction (as shown by the ``none'' rows of the tables, which indicate good prediction RMSE even when excluding all sequence estimators). We also repeat the analysis below without lPVL, resulting in much poorer prediction accuracy.

\subsubsection{Timing, excluding intercept, no lPVL}
%%%% MARK

<<echo = FALSE, results = hide>>=
### Configuration (Defaults)
  include.intercept = FALSE;
  include.all.vars.in.lasso = TRUE;
  helpful.additional.cols = c(); # THIS IS THE DIFFERENCE: no lPVL here
  helpful.additional.cols.with.interactions = c(); #c( "v3_not_nflg", "X6m.not.1m" );
  use.gold.is.multiple = FALSE;

# Ensure results exist.
.results.by.region.and.time.Rda.filename <- evaluateTimings(
     include.intercept = include.intercept,
     include.all.vars.in.lasso = include.all.vars.in.lasso,
     helpful.additional.cols = helpful.additional.cols,
     helpful.additional.cols.with.interactions = helpful.additional.cols.with.interactions,
     use.gold.is.multiple = use.gold.is.multiple,
     force.recomputation = FORCE.RECOMPUTATION,
     RESULTS.DIR = RESULTS.DIR,
     results.dirname = RESULTS.DIRNAME
);

# evaluateTimings.compute.config.string(..) is defined in evaluateTimings.R.
config.string <- evaluateTimings.compute.config.string(
        include.intercept = include.intercept,
        include.all.vars.in.lasso = include.all.vars.in.lasso,
        helpful.additional.cols = helpful.additional.cols,
        helpful.additional.cols.with.interactions = helpful.additional.cols.with.interactions,
        use.gold.is.multiple = use.gold.is.multiple
);


### evaluateTimings
    if( config.string == "" ) {
        evaluateTimings.tab.file.suffix <- "_evaluateTimings.tab";
    } else {
        evaluateTimings.tab.file.suffix <- paste( "_evaluateTimings_", config.string, ".tab", sep = "" );
    }
    

### MARK ERE I AM.  Testing new stuff.
# load( .results.by.region.and.time.Rda.filename ); # adds results.by.region.and.time to environment.
#.formulas.table <- get.formulas( results.by.region.and.time, .varname = "PFitter.mut.rate.coef", model.type = "step", withbounds = TRUE );
#evaluate.specific.timings.model.formula( results.by.region.and.time,  names( which.max( .formulas.table ) ) )
# .formulas.table <- get.formulas( results.by.region.and.time, .varname = "PFitter.mut.rate.coef", model.type = "glm", withbounds = TRUE );
# evaluate.specific.timings.model.formula( results.by.region.and.time,  names( which.max( .formulas.table ) ) )

##############
## sampledwidth_uniform_1mmtn003_6mhvtn502
evaluateTimings.nflg.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", to.region = "v3", the.time = "1m.6m", sort.column = NULL, the.bounds.type = "sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
colnames( evaluateTimings.nflg.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg ) <- paste( "nflg.v3.1m.6m", colnames( evaluateTimings.nflg.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg ), sep = "." );
evaluateTimings.nflg.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", the.time = "1m.6m", sort.column = NULL, the.bounds.type = "sampledwidth_uniform_1mmtn003_6mhvtn502.1m", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
colnames( evaluateTimings.nflg.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg ) <- paste( "nflg.1m.6m", colnames( evaluateTimings.nflg.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg ), sep = "." );
evaluateTimings.nflg.v3.1m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", to.region = "v3", the.time = "1m", sort.column = NULL, the.bounds.type = "sampledwidth_uniform_mtn003.nflg", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
colnames( evaluateTimings.nflg.v3.1m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg ) <- paste( "nflg.v3.1m", colnames( evaluateTimings.nflg.v3.1m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg ), sep = "." );
evaluateTimings.nflg.1m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", the.time = "1m", sort.column = NULL, the.bounds.type = "sampledwidth_uniform_mtn003", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
colnames( evaluateTimings.nflg.1m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg ) <- paste( "nflg.1m", colnames( evaluateTimings.nflg.1m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg ), sep = "." );

evaluateTimings.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg <- missing.row.safe.cbind( missing.row.safe.cbind( missing.row.safe.cbind( evaluateTimings.nflg.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg, evaluateTimings.nflg.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg ), evaluateTimings.nflg.v3.1m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg ), evaluateTimings.nflg.1m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg );

## sampledwidth_uniform_1mmtn003_6mhvtn502 6m.nflg
evaluateTimings.nflg.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", to.region = "v3", the.time = "1m.6m", sort.column = NULL, the.bounds.type = "sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
colnames( evaluateTimings.nflg.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg ) <- paste( "nflg.v3.1m.6m", colnames( evaluateTimings.nflg.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg ), sep = "." );
evaluateTimings.nflg.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", the.time = "1m.6m", sort.column = NULL, the.bounds.type = "sampledwidth_uniform_1mmtn003_6mhvtn502.6m", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
colnames( evaluateTimings.nflg.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg ) <- paste( "nflg.1m.6m", colnames( evaluateTimings.nflg.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg ), sep = "." );
evaluateTimings.nflg.v3.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", to.region = "v3", the.time = "6m", sort.column = NULL, the.bounds.type = "sampledwidth_uniform_hvtn502.nflg", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
colnames( evaluateTimings.nflg.v3.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg ) <- paste( "nflg.v3.6m", colnames( evaluateTimings.nflg.v3.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg ), sep = "." );
evaluateTimings.nflg.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", the.time = "6m", sort.column = NULL, the.bounds.type = "sampledwidth_uniform_hvtn502", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
colnames( evaluateTimings.nflg.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg ) <- paste( "nflg.6m", colnames( evaluateTimings.nflg.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg ), sep = "." );

evaluateTimings.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg <- missing.row.safe.cbind( missing.row.safe.cbind( missing.row.safe.cbind( evaluateTimings.nflg.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg, evaluateTimings.nflg.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg ), evaluateTimings.nflg.v3.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg ), evaluateTimings.nflg.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg );

## sampledwidth_uniform_1mmtn003_6mhvtn502 1m.v3
evaluateTimings.nflg.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3 <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", to.region = "v3", the.time = "1m.6m", sort.column = NULL, the.bounds.type = "sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
colnames( evaluateTimings.nflg.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3 ) <- paste( "nflg.v3.1m.6m", colnames( evaluateTimings.nflg.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3 ), sep = "." );
evaluateTimings.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3 <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "v3", the.time = "1m.6m", sort.column = NULL, the.bounds.type = "sampledwidth_uniform_1mmtn003_6mhvtn502.1m", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
colnames( evaluateTimings.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3 ) <- paste( "v3.1m.6m", colnames( evaluateTimings.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3 ), sep = "." );
evaluateTimings.nflg.v3.1m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3 <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", to.region = "v3", the.time = "1m", sort.column = NULL, the.bounds.type = "sampledwidth_uniform_mtn003.v3", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
colnames( evaluateTimings.nflg.v3.1m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3 ) <- paste( "nflg.v3.1m", colnames( evaluateTimings.nflg.v3.1m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3 ), sep = "." );
evaluateTimings.v3.1m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3 <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "v3", the.time = "1m", sort.column = NULL, the.bounds.type = "sampledwidth_uniform_mtn003", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
colnames( evaluateTimings.v3.1m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3 ) <- paste( "v3.1m", colnames( evaluateTimings.v3.1m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3 ), sep = "." );

evaluateTimings.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3 <- missing.row.safe.cbind( missing.row.safe.cbind( missing.row.safe.cbind( evaluateTimings.nflg.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3, evaluateTimings.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3 ), evaluateTimings.nflg.v3.1m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3 ), evaluateTimings.v3.1m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3 );

## sampledwidth_uniform_1mmtn003_6mhvtn502 6m.v3
evaluateTimings.nflg.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3 <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", to.region = "v3", the.time = "1m.6m", sort.column = NULL, the.bounds.type = "sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
colnames( evaluateTimings.nflg.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3 ) <- paste( "nflg.v3.1m.6m", colnames( evaluateTimings.nflg.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3 ), sep = "." );
evaluateTimings.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3 <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "v3", the.time = "1m.6m", sort.column = NULL, the.bounds.type = "sampledwidth_uniform_1mmtn003_6mhvtn502.6m", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
colnames( evaluateTimings.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3 ) <- paste( "v3.1m.6m", colnames( evaluateTimings.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3 ), sep = "." );
evaluateTimings.nflg.v3.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3 <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", to.region = "v3", the.time = "6m", sort.column = NULL, the.bounds.type = "sampledwidth_uniform_hvtn502.v3", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
colnames( evaluateTimings.nflg.v3.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3 ) <- paste( "nflg.v3.6m", colnames( evaluateTimings.nflg.v3.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3 ), sep = "." );
evaluateTimings.v3.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3 <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "v3", the.time = "6m", sort.column = NULL, the.bounds.type = "sampledwidth_uniform_hvtn502", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
colnames( evaluateTimings.v3.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3 ) <- paste( "v3.6m", colnames( evaluateTimings.v3.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3 ), sep = "." );

evaluateTimings.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3 <- missing.row.safe.cbind( missing.row.safe.cbind( missing.row.safe.cbind( evaluateTimings.nflg.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3, evaluateTimings.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3 ), evaluateTimings.nflg.v3.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3 ), evaluateTimings.v3.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3 );
##############

if( FALSE ) {
  ##############
  ## unbounded 1m.nflg
  evaluateTimings.nflg.v3.1m.6m.unbounded.1m.nflg <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", to.region = "v3", the.time = "1m.6m", sort.column = NULL, the.bounds.type = "unbounded.1m.nflg", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
  colnames( evaluateTimings.nflg.v3.1m.6m.unbounded.1m.nflg ) <- paste( "nflg.v3.1m.6m", colnames( evaluateTimings.nflg.v3.1m.6m.unbounded.1m.nflg ), sep = "." );
  evaluateTimings.nflg.1m.6m.unbounded.1m.nflg <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", the.time = "1m.6m", sort.column = NULL, the.bounds.type = "unbounded.1m", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
  colnames( evaluateTimings.nflg.1m.6m.unbounded.1m.nflg ) <- paste( "nflg.1m.6m", colnames( evaluateTimings.nflg.1m.6m.unbounded.1m.nflg ), sep = "." );
  evaluateTimings.nflg.v3.1m.unbounded.1m.nflg <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", to.region = "v3", the.time = "1m", sort.column = NULL, the.bounds.type = "unbounded.nflg", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
  colnames( evaluateTimings.nflg.v3.1m.unbounded.1m.nflg ) <- paste( "nflg.v3.1m", colnames( evaluateTimings.nflg.v3.1m.unbounded.1m.nflg ), sep = "." );
  evaluateTimings.nflg.1m.unbounded.1m.nflg <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", the.time = "1m", sort.column = NULL, the.bounds.type = "unbounded", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
  colnames( evaluateTimings.nflg.1m.unbounded.1m.nflg ) <- paste( "nflg.1m", colnames( evaluateTimings.nflg.1m.unbounded.1m.nflg ), sep = "." );
  
  evaluateTimings.unbounded.1m.nflg <- missing.row.safe.cbind( missing.row.safe.cbind( missing.row.safe.cbind( evaluateTimings.nflg.v3.1m.6m.unbounded.1m.nflg, evaluateTimings.nflg.1m.6m.unbounded.1m.nflg ), evaluateTimings.nflg.v3.1m.unbounded.1m.nflg ), evaluateTimings.nflg.1m.unbounded.1m.nflg );
  
  ## unbounded 6m.nflg
  evaluateTimings.nflg.v3.1m.6m.unbounded.6m.nflg <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", to.region = "v3", the.time = "1m.6m", sort.column = NULL, the.bounds.type = "unbounded.6m.nflg", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
  colnames( evaluateTimings.nflg.v3.1m.6m.unbounded.6m.nflg ) <- paste( "nflg.v3.1m.6m", colnames( evaluateTimings.nflg.v3.1m.6m.unbounded.6m.nflg ), sep = "." );
  evaluateTimings.nflg.1m.6m.unbounded.6m.nflg <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", the.time = "1m.6m", sort.column = NULL, the.bounds.type = "unbounded.6m", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
  colnames( evaluateTimings.nflg.1m.6m.unbounded.6m.nflg ) <- paste( "nflg.1m.6m", colnames( evaluateTimings.nflg.1m.6m.unbounded.6m.nflg ), sep = "." );
  evaluateTimings.nflg.v3.6m.unbounded.6m.nflg <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", to.region = "v3", the.time = "6m", sort.column = NULL, the.bounds.type = "unbounded.nflg", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
  colnames( evaluateTimings.nflg.v3.6m.unbounded.6m.nflg ) <- paste( "nflg.v3.6m", colnames( evaluateTimings.nflg.v3.6m.unbounded.6m.nflg ), sep = "." );
  evaluateTimings.nflg.6m.unbounded.6m.nflg <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", the.time = "6m", sort.column = NULL, the.bounds.type = "unbounded", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
  colnames( evaluateTimings.nflg.6m.unbounded.6m.nflg ) <- paste( "nflg.6m", colnames( evaluateTimings.nflg.6m.unbounded.6m.nflg ), sep = "." );
  
  evaluateTimings.unbounded.6m.nflg <- missing.row.safe.cbind( missing.row.safe.cbind( missing.row.safe.cbind( evaluateTimings.nflg.v3.1m.6m.unbounded.6m.nflg, evaluateTimings.nflg.1m.6m.unbounded.6m.nflg ), evaluateTimings.nflg.v3.6m.unbounded.6m.nflg ), evaluateTimings.nflg.6m.unbounded.6m.nflg );
  
  ## unbounded 1m.v3
  evaluateTimings.nflg.v3.1m.6m.unbounded.1m.v3 <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", to.region = "v3", the.time = "1m.6m", sort.column = NULL, the.bounds.type = "unbounded.1m.v3", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
  colnames( evaluateTimings.nflg.v3.1m.6m.unbounded.1m.v3 ) <- paste( "nflg.v3.1m.6m", colnames( evaluateTimings.nflg.v3.1m.6m.unbounded.1m.v3 ), sep = "." );
  evaluateTimings.v3.1m.6m.unbounded.1m.v3 <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "v3", the.time = "1m.6m", sort.column = NULL, the.bounds.type = "unbounded.1m", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
  colnames( evaluateTimings.v3.1m.6m.unbounded.1m.v3 ) <- paste( "v3.1m.6m", colnames( evaluateTimings.v3.1m.6m.unbounded.1m.v3 ), sep = "." );
  evaluateTimings.nflg.v3.1m.unbounded.1m.v3 <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", to.region = "v3", the.time = "1m", sort.column = NULL, the.bounds.type = "unbounded.v3", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
  colnames( evaluateTimings.nflg.v3.1m.unbounded.1m.v3 ) <- paste( "nflg.v3.1m", colnames( evaluateTimings.nflg.v3.1m.unbounded.1m.v3 ), sep = "." );
  evaluateTimings.v3.1m.unbounded.1m.v3 <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "v3", the.time = "1m", sort.column = NULL, the.bounds.type = "unbounded", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
  colnames( evaluateTimings.v3.1m.unbounded.1m.v3 ) <- paste( "v3.1m", colnames( evaluateTimings.v3.1m.unbounded.1m.v3 ), sep = "." );
  
  evaluateTimings.unbounded.1m.v3 <- missing.row.safe.cbind( missing.row.safe.cbind( missing.row.safe.cbind( evaluateTimings.nflg.v3.1m.6m.unbounded.1m.v3, evaluateTimings.v3.1m.6m.unbounded.1m.v3 ), evaluateTimings.nflg.v3.1m.unbounded.1m.v3 ), evaluateTimings.v3.1m.unbounded.1m.v3 );
  
  ## unbounded 6m.v3
  evaluateTimings.nflg.v3.1m.6m.unbounded.6m.v3 <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", to.region = "v3", the.time = "1m.6m", sort.column = NULL, the.bounds.type = "unbounded.6m.v3", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
  colnames( evaluateTimings.nflg.v3.1m.6m.unbounded.6m.v3 ) <- paste( "nflg.v3.1m.6m", colnames( evaluateTimings.nflg.v3.1m.6m.unbounded.6m.v3 ), sep = "." );
  evaluateTimings.v3.1m.6m.unbounded.6m.v3 <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "v3", the.time = "1m.6m", sort.column = NULL, the.bounds.type = "unbounded.6m", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
  colnames( evaluateTimings.v3.1m.6m.unbounded.6m.v3 ) <- paste( "v3.1m.6m", colnames( evaluateTimings.v3.1m.6m.unbounded.6m.v3 ), sep = "." );
  evaluateTimings.nflg.v3.6m.unbounded.6m.v3 <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", to.region = "v3", the.time = "6m", sort.column = NULL, the.bounds.type = "unbounded.v3", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
  colnames( evaluateTimings.nflg.v3.6m.unbounded.6m.v3 ) <- paste( "nflg.v3.6m", colnames( evaluateTimings.nflg.v3.6m.unbounded.6m.v3 ), sep = "." );
  evaluateTimings.v3.6m.unbounded.6m.v3 <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "v3", the.time = "6m", sort.column = NULL, the.bounds.type = "unbounded", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
  colnames( evaluateTimings.v3.6m.unbounded.6m.v3 ) <- paste( "v3.6m", colnames( evaluateTimings.v3.6m.unbounded.6m.v3 ), sep = "." );
  
  evaluateTimings.unbounded.6m.v3 <- missing.row.safe.cbind( missing.row.safe.cbind( missing.row.safe.cbind( evaluateTimings.nflg.v3.1m.6m.unbounded.6m.v3, evaluateTimings.v3.1m.6m.unbounded.6m.v3 ), evaluateTimings.nflg.v3.6m.unbounded.6m.v3 ), evaluateTimings.v3.6m.unbounded.6m.v3 );
} # END IF FALSE
##############

#### TODO: REMOVE?
## For some reason one of the values is spuriously low (see below) so we make sure the "min" isn't below 4 for 1m and 8 for 6m.
#                                                 nflg.v3.1m.6m.glm nointercept validation results rmse
# Infer uniform 1mmtn003 6mhvtn502                                                                 0.08
# 
.m1m <- (1/max( 4, base::min( evaluateTimings.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg, evaluateTimings.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3, na.rm = TRUE ) ) );
.m6m <- (1/max( 8, base::min( evaluateTimings.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg, evaluateTimings.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3, na.rm = TRUE ) ) );

@ 

%% ### mark
Figure~\ref{fig:Timings.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg} shows the RMSEs of
estimates of Timings, for the 1m time point sequences from RV217
(high-quality nearly-full length (nflg) sequences, about 10 nflg-equivalents
per sample). The estimates are bounded in the sense that whenever a prediction is outside the bounds, we replace it with the nearest bound.  The PREAST method presently fails on three of the ``1m'' ``nflg'' sequences, and these are replaced by the lower bound before evaluation. There is no intercept allowed (nor lone indicators that can be used as an intercept), and only sequence data is used (lPVL is excluded).
 
\begin{minipage}{\linewidth}
 {
\centering
\par
\bigskip
\captionof{figure}{\bf RMSEs for estimates of Timings using 1m samples
  from RV217, ~10 SGA nflg-equiv (no intercept)} \label{fig:Timings.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg}
<<echo = FALSE, results = hide, fig = TRUE>>=
#timings.mat <- evaluateTimings.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg;
#timings.mat <- evaluateTimings.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg[ , 1:7 ];
timings.mat <- prepare.timings.mat( evaluateTimings.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg, include.intercept = FALSE );

my.palette <- colorRampPalette(c("red", "yellow", "green"))(n = 299)
col.breaks = c(seq(0,0.5*.m1m,length=100),  # for red
  seq(0.5*.m1m,0.9*.m1m,length=101)[-1],              # for yellow
  seq(.9*.m1m,1*.m1m,length=101)[-1])              # for green

mat.text <- round( timings.mat );
mat.text[ is.na( mat.text ) ] <- "";
mat.data <- (1/timings.mat);
heatmap.2(
        mat.data,
        col = my.palette, colsep=c(1:62),rowsep=(1:62), sepwidth=c(0.05,0.05), sepcolor="white",
        trace="none", Rowv=F,Colv=F, scale="none", dendrogram="none",key=F,
        cellnote = mat.text, notecol = "black", notecex = 0.8,
        srtCol=45, adjCol = c(1,1), cexCol = 0.9,
         cexRow = 0.8,
        margins = c( 11.5, 9.5 ), breaks = col.breaks
    );
@ 
\par
\bigskip
}
\textbf{RMSEs for estimates of Timings using 1m samples
  from RV217, ~10 SGA nflg-equiv (no intercept)}
The first column corresponds to the uncalibrated estimates directly
from PFitter and PREAST.  Four sets of three columns follow,
corresponding to different data used in the calibration.  In the
leftmost of the four sets, labeled [RT], all of the data is included:
both regions, and both times.  In the rightmost, labeled [rt], only
sequences of the nflg region from RV217 and 1m time are used in
the parameter fitting step.   These models include log Plasma Viral Load (lPVL), and exclude the intercept and lone variables that can serve as an intercept (v3\_not\_nflg, 6m\_not\_1m, and v3\_not\_nflg :6m\_not\_1m).
\par
\bigskip
\end{minipage}

Figure~\ref{fig:Timings.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg} shows the RMSEs of
estimates of Timings, for the 6m time point sequences from RV217
(high-quality nearly-full length (nflg) sequences, about 10 nflg-equivalents
per sample).

\begin{minipage}{\linewidth}
 {
\centering
\par
\bigskip
\captionof{figure}{\bf RMSEs for estimates of Timings using 6m samples from RV217, ~10 SGA nflg-equiv (no intercept)} \label{fig:Timings.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg}
<<echo = FALSE, results = hide, fig = TRUE>>=
#timings.mat <- evaluateTimings.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg;
#timings.mat <- evaluateTimings.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg[ , 1:7 ];
timings.mat <- prepare.timings.mat( evaluateTimings.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg, include.intercept = FALSE );

my.palette <- colorRampPalette(c("red", "yellow", "green"))(n = 299)
col.breaks = c(seq(0,0.5*.m6m,length=100),  # for red
  seq(0.5*.m6m,0.9*.m6m,length=101)[-1],              # for yellow
  seq(.9*.m6m,1*.m6m,length=101)[-1])              # for green

mat.text <- round( timings.mat );
mat.text[ is.na( mat.text ) ] <- "";
mat.data <- (1/timings.mat);
heatmap.2(
        mat.data,
        col = my.palette, colsep=c(1:62),rowsep=(1:62), sepwidth=c(0.05,0.05), sepcolor="white",
        trace="none", Rowv=F,Colv=F, scale="none", dendrogram="none",key=F,
        cellnote = mat.text, notecol = "black", notecex = 0.8,
        srtCol=45, adjCol = c(1,1), cexCol = 0.9,
         cexRow = 0.8,
        margins = c( 11.5, 9.5 ), breaks = col.breaks
    );
@ 
\par
\bigskip
}
\textbf{RMSEs for estimates of Timings using 6m samples
  from RV217, ~10 SGA nflg-equiv (no intercept)}
The first column corresponds to the uncalibrated estimates directly
from PFitter and PREAST.  Four sets of three columns follow,
corresponding to different data used in the calibration.  In the
leftmost of the four sets, labeled [RT], all of the data is included:
both regions, and both times.  In the rightmost, labeled [rt], only
sequences of the nflg region from RV217 and 1m time are used in
the parameter fitting step.   These models include log Plasma Viral Load (lPVL), and exclude the intercept and lone variables that can serve as an intercept (v3\_not\_nflg, 6m\_not\_1m, and v3\_not\_nflg :6m\_not\_1m).
\par
\bigskip
\end{minipage}



Figure~\ref{fig:Timings.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3} shows the RMSEs of
estimates of Timings, for the 1m time point sequences from Caprisa 002 (deep, high-quality sequences of short region of Env, V3). 
 
\begin{minipage}{\linewidth}
 {
\centering
\par
\bigskip
\captionof{figure}{\bf RMSEs for estimates of Timings 1m samples from Caprisa 002, v3 Illumina w/PrimerID (no intercept)} \label{fig:Timings.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3}
<<echo = FALSE, results = hide, fig = TRUE>>=
#timings.mat <- evaluateTimings.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3;
#timings.mat <- evaluateTimings.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3[ , 1:7 ];
timings.mat <- prepare.timings.mat( evaluateTimings.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3, include.intercept = FALSE );

my.palette <- colorRampPalette(c("red", "yellow", "green"))(n = 299)
col.breaks = c(seq(0,0.5*.m1m,length=100),  # for red
  seq(0.5*.m1m,0.9*.m1m,length=101)[-1],              # for yellow
  seq(.9*.m1m,1*.m1m,length=101)[-1])              # for green

mat.text <- round( timings.mat );
mat.text[ is.na( mat.text ) ] <- "";
mat.data <- (1/timings.mat);
heatmap.2(
        mat.data,
        col = my.palette, colsep=c(1:62),rowsep=(1:62), sepwidth=c(0.05,0.05), sepcolor="white",
        trace="none", Rowv=F,Colv=F, scale="none", dendrogram="none",key=F,
        cellnote = mat.text, notecol = "black", notecex = 0.8,
        srtCol=45, adjCol = c(1,1), cexCol = 0.9,
         cexRow = 0.8,
        margins = c( 11.5, 9.5 ), breaks = col.breaks
    );
@ 
\par
\bigskip
}
\textbf{RMSEs for estimates of Timings 1m samples from Caprisa 002, v3 Illumina w/PrimerID (no intercept)}
The first column corresponds to the uncalibrated estimates directly
from PFitter and PREAST.  Four sets of three columns follow,
corresponding to different data used in the calibration.  In the
leftmost of the four sets, labeled [RT], all of the data is included:
both regions, and both times.  In the rightmost, labeled [rt], only
sequences of the v3 region from RV217 and 1m time are used in
the parameter fitting step.   These models include log Plasma Viral Load (lPVL), and exclude the intercept and lone variables that can serve as an intercept (v3\_not\_nflg, 6m\_not\_1m, and v3\_not\_nflg :6m\_not\_1m).
\par
\bigskip
\end{minipage}

Figure~\ref{fig:Timings.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3} shows the RMSEs of
estimates of Timings, for the 6m time point sequences from Caprisa 002 (deep, high-quality sequences of short region of Env, V3). 

\begin{minipage}{\linewidth}
 {
\centering
\par
\bigskip
\captionof{figure}{\bf RMSEs for estimates of Timings using 6m samples from Caprisa 002, v3 Illumina w/PrimerID (no intercept)} \label{fig:Timings.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3}
<<echo = FALSE, results = hide, fig = TRUE>>=
#timings.mat <- evaluateTimings.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3;
#timings.mat <- evaluateTimings.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3[ , 1:7 ];
timings.mat <- prepare.timings.mat( evaluateTimings.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3, include.intercept = FALSE );

my.palette <- colorRampPalette(c("red", "yellow", "green"))(n = 299)
col.breaks = c(seq(0,0.5*.m6m,length=100),  # for red
  seq(0.5*.m6m,0.9*.m6m,length=101)[-1],              # for yellow
  seq(.9*.m6m,1*.m6m,length=101)[-1])              # for green

mat.text <- round( timings.mat );
mat.text[ is.na( mat.text ) ] <- "";
mat.data <- (1/timings.mat);
heatmap.2(
        mat.data,
        col = my.palette, colsep=c(1:62),rowsep=(1:62), sepwidth=c(0.05,0.05), sepcolor="white",
        trace="none", Rowv=F,Colv=F, scale="none", dendrogram="none",key=F,
        cellnote = mat.text, notecol = "black", notecex = 0.8,
        srtCol=45, adjCol = c(1,1), cexCol = 0.9,
         cexRow = 0.8,
        margins = c( 11.5, 9.5 ), breaks = col.breaks
    );
@ 
\par
\bigskip
}
\textbf{RMSEs for estimates of Timings using 6m samples from Caprisa 002, v3 Illumina w/PrimerID (no intercept)}
The first column corresponds to the uncalibrated estimates directly
from PFitter and PREAST.  Four sets of three columns follow,
corresponding to different data used in the calibration.  In the
leftmost of the four sets, labeled [RT], all of the data is included:
both regions, and both times.  In the rightmost, labeled [rt], only
sequences of the v3 region from RV217 and 1m time are used in
the parameter fitting step.  These models include log Plasma Viral Load (lPVL), and exclude the intercept and lone variables that can serve as an intercept (v3\_not\_nflg, 6m\_not\_1m, and v3\_not\_nflg :6m\_not\_1m).
\par
\bigskip
\end{minipage}

%%%%%endmark


\subsubsection{Timing, excluding intercept, including lPVL and gold.is.multiple}

%% MARK

<<echo = FALSE, results = hide>>=
### Configuration (Defaults)
  include.intercept = FALSE;
  include.all.vars.in.lasso = TRUE;
  helpful.additional.cols = c( "lPVL" );
  helpful.additional.cols.with.interactions = c(); #c( "v3_not_nflg", "X6m.not.1m" );
  use.gold.is.multiple = TRUE; # THIS CHANGED (above it is FALSE).

# Ensure results exist.
.results.by.region.and.time.Rda.filename <- evaluateTimings(
     include.intercept = include.intercept,
     include.all.vars.in.lasso = include.all.vars.in.lasso,
     helpful.additional.cols = helpful.additional.cols,
     helpful.additional.cols.with.interactions = helpful.additional.cols.with.interactions,
     use.gold.is.multiple = use.gold.is.multiple,
     force.recomputation = FORCE.RECOMPUTATION,
     RESULTS.DIR = RESULTS.DIR,
     results.dirname = RESULTS.DIRNAME
);

# evaluateTimings.compute.config.string(..) is defined in evaluateTimings.R.
config.string <- evaluateTimings.compute.config.string(
        include.intercept = include.intercept,
        include.all.vars.in.lasso = include.all.vars.in.lasso,
        helpful.additional.cols = helpful.additional.cols,
        helpful.additional.cols.with.interactions = helpful.additional.cols.with.interactions,
        use.gold.is.multiple = use.gold.is.multiple
);


### evaluateTimings
    if( config.string == "" ) {
        evaluateTimings.tab.file.suffix <- "_evaluateTimings.tab";
    } else {
        evaluateTimings.tab.file.suffix <- paste( "_evaluateTimings_", config.string, ".tab", sep = "" );
    }
    

### TODO: REMOVE? Testing new stuff.
# load( .results.by.region.and.time.Rda.filename ); # adds results.by.region.and.time to environment.
#.formulas.table <- get.formulas( results.by.region.and.time, .varname = "PFitter.mut.rate.coef", model.type = "step", withbounds = TRUE );
#evaluate.specific.timings.model.formula( results.by.region.and.time,  names( which.max( .formulas.table ) ) )
# .formulas.table <- get.formulas( results.by.region.and.time, .varname = "PFitter.mut.rate.coef", model.type = "glm", withbounds = TRUE );
# evaluate.specific.timings.model.formula( results.by.region.and.time,  names( which.max( .formulas.table ) ) )
#
#.gold.standard <- ( results.by.region.and.time[[ "v3" ]][[ "1m" ]][[ "days.since.infection" ]][ rownames( results.by.region.and.time[[ "v3" ]][[ "1m" ]][[ "results.per.person" ]] ) ] )

##############
## sampledwidth_uniform_1mmtn003_6mhvtn502
evaluateTimings.nflg.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", to.region = "v3", the.time = "1m.6m", sort.column = NULL, the.bounds.type = "sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
colnames( evaluateTimings.nflg.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg ) <- paste( "nflg.v3.1m.6m", colnames( evaluateTimings.nflg.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg ), sep = "." );
evaluateTimings.nflg.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", the.time = "1m.6m", sort.column = NULL, the.bounds.type = "sampledwidth_uniform_1mmtn003_6mhvtn502.1m", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
colnames( evaluateTimings.nflg.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg ) <- paste( "nflg.1m.6m", colnames( evaluateTimings.nflg.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg ), sep = "." );
evaluateTimings.nflg.v3.1m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", to.region = "v3", the.time = "1m", sort.column = NULL, the.bounds.type = "sampledwidth_uniform_mtn003.nflg", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
colnames( evaluateTimings.nflg.v3.1m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg ) <- paste( "nflg.v3.1m", colnames( evaluateTimings.nflg.v3.1m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg ), sep = "." );
evaluateTimings.nflg.1m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", the.time = "1m", sort.column = NULL, the.bounds.type = "sampledwidth_uniform_mtn003", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
colnames( evaluateTimings.nflg.1m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg ) <- paste( "nflg.1m", colnames( evaluateTimings.nflg.1m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg ), sep = "." );

evaluateTimings.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg <- missing.row.safe.cbind( missing.row.safe.cbind( missing.row.safe.cbind( evaluateTimings.nflg.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg, evaluateTimings.nflg.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg ), evaluateTimings.nflg.v3.1m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg ), evaluateTimings.nflg.1m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg );

## sampledwidth_uniform_1mmtn003_6mhvtn502 6m.nflg
evaluateTimings.nflg.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", to.region = "v3", the.time = "1m.6m", sort.column = NULL, the.bounds.type = "sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
colnames( evaluateTimings.nflg.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg ) <- paste( "nflg.v3.1m.6m", colnames( evaluateTimings.nflg.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg ), sep = "." );
evaluateTimings.nflg.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", the.time = "1m.6m", sort.column = NULL, the.bounds.type = "sampledwidth_uniform_1mmtn003_6mhvtn502.6m", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
colnames( evaluateTimings.nflg.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg ) <- paste( "nflg.1m.6m", colnames( evaluateTimings.nflg.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg ), sep = "." );
evaluateTimings.nflg.v3.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", to.region = "v3", the.time = "6m", sort.column = NULL, the.bounds.type = "sampledwidth_uniform_hvtn502.nflg", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
colnames( evaluateTimings.nflg.v3.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg ) <- paste( "nflg.v3.6m", colnames( evaluateTimings.nflg.v3.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg ), sep = "." );
evaluateTimings.nflg.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", the.time = "6m", sort.column = NULL, the.bounds.type = "sampledwidth_uniform_hvtn502", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
colnames( evaluateTimings.nflg.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg ) <- paste( "nflg.6m", colnames( evaluateTimings.nflg.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg ), sep = "." );

evaluateTimings.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg <- missing.row.safe.cbind( missing.row.safe.cbind( missing.row.safe.cbind( evaluateTimings.nflg.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg, evaluateTimings.nflg.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg ), evaluateTimings.nflg.v3.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg ), evaluateTimings.nflg.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg );

## sampledwidth_uniform_1mmtn003_6mhvtn502 1m.v3
evaluateTimings.nflg.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3 <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", to.region = "v3", the.time = "1m.6m", sort.column = NULL, the.bounds.type = "sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
colnames( evaluateTimings.nflg.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3 ) <- paste( "nflg.v3.1m.6m", colnames( evaluateTimings.nflg.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3 ), sep = "." );
evaluateTimings.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3 <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "v3", the.time = "1m.6m", sort.column = NULL, the.bounds.type = "sampledwidth_uniform_1mmtn003_6mhvtn502.1m", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
colnames( evaluateTimings.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3 ) <- paste( "v3.1m.6m", colnames( evaluateTimings.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3 ), sep = "." );
evaluateTimings.nflg.v3.1m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3 <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", to.region = "v3", the.time = "1m", sort.column = NULL, the.bounds.type = "sampledwidth_uniform_mtn003.v3", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
colnames( evaluateTimings.nflg.v3.1m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3 ) <- paste( "nflg.v3.1m", colnames( evaluateTimings.nflg.v3.1m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3 ), sep = "." );
evaluateTimings.v3.1m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3 <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "v3", the.time = "1m", sort.column = NULL, the.bounds.type = "sampledwidth_uniform_mtn003", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
colnames( evaluateTimings.v3.1m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3 ) <- paste( "v3.1m", colnames( evaluateTimings.v3.1m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3 ), sep = "." );

evaluateTimings.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3 <- missing.row.safe.cbind( missing.row.safe.cbind( missing.row.safe.cbind( evaluateTimings.nflg.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3, evaluateTimings.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3 ), evaluateTimings.nflg.v3.1m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3 ), evaluateTimings.v3.1m.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3 );

## sampledwidth_uniform_1mmtn003_6mhvtn502 6m.v3
evaluateTimings.nflg.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3 <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", to.region = "v3", the.time = "1m.6m", sort.column = NULL, the.bounds.type = "sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
colnames( evaluateTimings.nflg.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3 ) <- paste( "nflg.v3.1m.6m", colnames( evaluateTimings.nflg.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3 ), sep = "." );
evaluateTimings.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3 <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "v3", the.time = "1m.6m", sort.column = NULL, the.bounds.type = "sampledwidth_uniform_1mmtn003_6mhvtn502.6m", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
colnames( evaluateTimings.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3 ) <- paste( "v3.1m.6m", colnames( evaluateTimings.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3 ), sep = "." );
evaluateTimings.nflg.v3.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3 <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", to.region = "v3", the.time = "6m", sort.column = NULL, the.bounds.type = "sampledwidth_uniform_hvtn502.v3", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
colnames( evaluateTimings.nflg.v3.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3 ) <- paste( "nflg.v3.6m", colnames( evaluateTimings.nflg.v3.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3 ), sep = "." );
evaluateTimings.v3.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3 <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "v3", the.time = "6m", sort.column = NULL, the.bounds.type = "sampledwidth_uniform_hvtn502", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
colnames( evaluateTimings.v3.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3 ) <- paste( "v3.6m", colnames( evaluateTimings.v3.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3 ), sep = "." );

evaluateTimings.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3 <- missing.row.safe.cbind( missing.row.safe.cbind( missing.row.safe.cbind( evaluateTimings.nflg.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3, evaluateTimings.v3.1m.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3 ), evaluateTimings.nflg.v3.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3 ), evaluateTimings.v3.6m.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3 );
##############

if( FALSE ) {
  ##############
  ## unbounded 1m.nflg
  evaluateTimings.nflg.v3.1m.6m.unbounded.1m.nflg <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", to.region = "v3", the.time = "1m.6m", sort.column = NULL, the.bounds.type = "unbounded.1m.nflg", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
  colnames( evaluateTimings.nflg.v3.1m.6m.unbounded.1m.nflg ) <- paste( "nflg.v3.1m.6m", colnames( evaluateTimings.nflg.v3.1m.6m.unbounded.1m.nflg ), sep = "." );
  evaluateTimings.nflg.1m.6m.unbounded.1m.nflg <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", the.time = "1m.6m", sort.column = NULL, the.bounds.type = "unbounded.1m", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
  colnames( evaluateTimings.nflg.1m.6m.unbounded.1m.nflg ) <- paste( "nflg.1m.6m", colnames( evaluateTimings.nflg.1m.6m.unbounded.1m.nflg ), sep = "." );
  evaluateTimings.nflg.v3.1m.unbounded.1m.nflg <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", to.region = "v3", the.time = "1m", sort.column = NULL, the.bounds.type = "unbounded.nflg", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
  colnames( evaluateTimings.nflg.v3.1m.unbounded.1m.nflg ) <- paste( "nflg.v3.1m", colnames( evaluateTimings.nflg.v3.1m.unbounded.1m.nflg ), sep = "." );
  evaluateTimings.nflg.1m.unbounded.1m.nflg <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", the.time = "1m", sort.column = NULL, the.bounds.type = "unbounded", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
  colnames( evaluateTimings.nflg.1m.unbounded.1m.nflg ) <- paste( "nflg.1m", colnames( evaluateTimings.nflg.1m.unbounded.1m.nflg ), sep = "." );
  
  evaluateTimings.unbounded.1m.nflg <- missing.row.safe.cbind( missing.row.safe.cbind( missing.row.safe.cbind( evaluateTimings.nflg.v3.1m.6m.unbounded.1m.nflg, evaluateTimings.nflg.1m.6m.unbounded.1m.nflg ), evaluateTimings.nflg.v3.1m.unbounded.1m.nflg ), evaluateTimings.nflg.1m.unbounded.1m.nflg );
  
  ## unbounded 6m.nflg
  evaluateTimings.nflg.v3.1m.6m.unbounded.6m.nflg <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", to.region = "v3", the.time = "1m.6m", sort.column = NULL, the.bounds.type = "unbounded.6m.nflg", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
  colnames( evaluateTimings.nflg.v3.1m.6m.unbounded.6m.nflg ) <- paste( "nflg.v3.1m.6m", colnames( evaluateTimings.nflg.v3.1m.6m.unbounded.6m.nflg ), sep = "." );
  evaluateTimings.nflg.1m.6m.unbounded.6m.nflg <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", the.time = "1m.6m", sort.column = NULL, the.bounds.type = "unbounded.6m", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
  colnames( evaluateTimings.nflg.1m.6m.unbounded.6m.nflg ) <- paste( "nflg.1m.6m", colnames( evaluateTimings.nflg.1m.6m.unbounded.6m.nflg ), sep = "." );
  evaluateTimings.nflg.v3.6m.unbounded.6m.nflg <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", to.region = "v3", the.time = "6m", sort.column = NULL, the.bounds.type = "unbounded.nflg", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
  colnames( evaluateTimings.nflg.v3.6m.unbounded.6m.nflg ) <- paste( "nflg.v3.6m", colnames( evaluateTimings.nflg.v3.6m.unbounded.6m.nflg ), sep = "." );
  evaluateTimings.nflg.6m.unbounded.6m.nflg <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", the.time = "6m", sort.column = NULL, the.bounds.type = "unbounded", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
  colnames( evaluateTimings.nflg.6m.unbounded.6m.nflg ) <- paste( "nflg.6m", colnames( evaluateTimings.nflg.6m.unbounded.6m.nflg ), sep = "." );
  
  evaluateTimings.unbounded.6m.nflg <- missing.row.safe.cbind( missing.row.safe.cbind( missing.row.safe.cbind( evaluateTimings.nflg.v3.1m.6m.unbounded.6m.nflg, evaluateTimings.nflg.1m.6m.unbounded.6m.nflg ), evaluateTimings.nflg.v3.6m.unbounded.6m.nflg ), evaluateTimings.nflg.6m.unbounded.6m.nflg );
  
  ## unbounded 1m.v3
  evaluateTimings.nflg.v3.1m.6m.unbounded.1m.v3 <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", to.region = "v3", the.time = "1m.6m", sort.column = NULL, the.bounds.type = "unbounded.1m.v3", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
  colnames( evaluateTimings.nflg.v3.1m.6m.unbounded.1m.v3 ) <- paste( "nflg.v3.1m.6m", colnames( evaluateTimings.nflg.v3.1m.6m.unbounded.1m.v3 ), sep = "." );
  evaluateTimings.v3.1m.6m.unbounded.1m.v3 <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "v3", the.time = "1m.6m", sort.column = NULL, the.bounds.type = "unbounded.1m", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
  colnames( evaluateTimings.v3.1m.6m.unbounded.1m.v3 ) <- paste( "v3.1m.6m", colnames( evaluateTimings.v3.1m.6m.unbounded.1m.v3 ), sep = "." );
  evaluateTimings.nflg.v3.1m.unbounded.1m.v3 <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", to.region = "v3", the.time = "1m", sort.column = NULL, the.bounds.type = "unbounded.v3", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
  colnames( evaluateTimings.nflg.v3.1m.unbounded.1m.v3 ) <- paste( "nflg.v3.1m", colnames( evaluateTimings.nflg.v3.1m.unbounded.1m.v3 ), sep = "." );
  evaluateTimings.v3.1m.unbounded.1m.v3 <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "v3", the.time = "1m", sort.column = NULL, the.bounds.type = "unbounded", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
  colnames( evaluateTimings.v3.1m.unbounded.1m.v3 ) <- paste( "v3.1m", colnames( evaluateTimings.v3.1m.unbounded.1m.v3 ), sep = "." );
  
  evaluateTimings.unbounded.1m.v3 <- missing.row.safe.cbind( missing.row.safe.cbind( missing.row.safe.cbind( evaluateTimings.nflg.v3.1m.6m.unbounded.1m.v3, evaluateTimings.v3.1m.6m.unbounded.1m.v3 ), evaluateTimings.nflg.v3.1m.unbounded.1m.v3 ), evaluateTimings.v3.1m.unbounded.1m.v3 );
  
  ## unbounded 6m.v3
  evaluateTimings.nflg.v3.1m.6m.unbounded.6m.v3 <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", to.region = "v3", the.time = "1m.6m", sort.column = NULL, the.bounds.type = "unbounded.6m.v3", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
  colnames( evaluateTimings.nflg.v3.1m.6m.unbounded.6m.v3 ) <- paste( "nflg.v3.1m.6m", colnames( evaluateTimings.nflg.v3.1m.6m.unbounded.6m.v3 ), sep = "." );
  evaluateTimings.v3.1m.6m.unbounded.6m.v3 <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "v3", the.time = "1m.6m", sort.column = NULL, the.bounds.type = "unbounded.6m", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
  colnames( evaluateTimings.v3.1m.6m.unbounded.6m.v3 ) <- paste( "v3.1m.6m", colnames( evaluateTimings.v3.1m.6m.unbounded.6m.v3 ), sep = "." );
  evaluateTimings.nflg.v3.6m.unbounded.6m.v3 <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "nflg", to.region = "v3", the.time = "6m", sort.column = NULL, the.bounds.type = "unbounded.v3", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
  colnames( evaluateTimings.nflg.v3.6m.unbounded.6m.v3 ) <- paste( "nflg.v3.6m", colnames( evaluateTimings.nflg.v3.6m.unbounded.6m.v3 ), sep = "." );
  evaluateTimings.v3.6m.unbounded.6m.v3 <- getFilteredResultsTables( evaluateTimings.tab.file.suffix, the.region = "v3", the.time = "6m", sort.column = NULL, the.bounds.type = "unbounded", column.pattern = "rmse", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
  colnames( evaluateTimings.v3.6m.unbounded.6m.v3 ) <- paste( "v3.6m", colnames( evaluateTimings.v3.6m.unbounded.6m.v3 ), sep = "." );
  
  evaluateTimings.unbounded.6m.v3 <- missing.row.safe.cbind( missing.row.safe.cbind( missing.row.safe.cbind( evaluateTimings.nflg.v3.1m.6m.unbounded.6m.v3, evaluateTimings.v3.1m.6m.unbounded.6m.v3 ), evaluateTimings.nflg.v3.6m.unbounded.6m.v3 ), evaluateTimings.v3.6m.unbounded.6m.v3 );
} # END IF FALSE
##############

#### TODO: REMOVE?
## For some reason one of the values is spuriously low (see below) so we make sure the "min" isn't below 4 for 1m and 8 for 6m.
#                                                 nflg.v3.1m.6m.glm nointercept validation results rmse
# Infer uniform 1mmtn003 6mhvtn502                                                                 0.08
# 
.m1m <- (1/max( 4, base::min( evaluateTimings.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg, evaluateTimings.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3, na.rm = TRUE ) ) );
.m6m <- (1/max( 8, base::min( evaluateTimings.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg, evaluateTimings.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3, na.rm = TRUE ) ) );

@ 

%% ### mark
Figure~\ref{fig:Timings.lPVL.goldismultiple.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg} shows the RMSEs of
estimates of Timings, for the 1m time point sequences from RV217
(high-quality nearly-full length (nflg) sequences, about 10 nflg-equivalents
per sample). The estimates are bounded in the sense that whenever a prediction is outside the bounds, we replace it with the nearest bound.  The PREAST method presently fails on three of the ``1m'' ``nflg'' sequences, and these are replaced by the lower bound before evaluation. There is no intercept allowed (nor lone indicators that can be used as an intercept), and log plasma viral load (lPVL) is included in every model, with interactions. The true value of is.multiple is also included and is allowed to interact with lPVL and the sequence-based estimator.
 
\begin{minipage}{\linewidth}
 {
\centering
\par
\bigskip
\captionof{figure}{\bf RMSEs for estimates of Timings using 1m samples
  from RV217, ~10 SGA nflg-equiv, and lPVL and gold.is.multiple (no intercept)} \label{fig:Timings.lPVL.goldismultiple.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg}
<<echo = FALSE, results = hide, fig = TRUE>>=
#timings.mat <- evaluateTimings.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg;
#timings.mat <- evaluateTimings.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg[ , 1:7 ];
timings.mat <- prepare.timings.mat( evaluateTimings.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.nflg, include.intercept = FALSE );

my.palette <- colorRampPalette(c("red", "yellow", "green"))(n = 299)
col.breaks = c(seq(0,0.5*.m1m,length=100),  # for red
  seq(0.5*.m1m,0.9*.m1m,length=101)[-1],              # for yellow
  seq(.9*.m1m,1*.m1m,length=101)[-1])              # for green

mat.text <- round( timings.mat );
mat.text[ is.na( mat.text ) ] <- "";
mat.data <- (1/timings.mat);
heatmap.2(
        mat.data,
        col = my.palette, colsep=c(1:62),rowsep=(1:62), sepwidth=c(0.05,0.05), sepcolor="white",
        trace="none", Rowv=F,Colv=F, scale="none", dendrogram="none",key=F,
        cellnote = mat.text, notecol = "black", notecex = 0.8,
        srtCol=45, adjCol = c(1,1), cexCol = 0.9,
         cexRow = 0.8,
        margins = c( 11.5, 9.5 ), breaks = col.breaks
    );
@ 
\par
\bigskip
}
\textbf{RMSEs for estimates of Timings using 1m samples
  from RV217, ~10 SGA nflg-equiv, and lPVL and gold.is.multiple (no intercept)}
The first column corresponds to the uncalibrated estimates directly
from PFitter and PREAST.  Four sets of three columns follow,
corresponding to different data used in the calibration.  In the
leftmost of the four sets, labeled [RT], all of the data is included:
both regions, and both times.  In the rightmost, labeled [rt], only
sequences of the nflg region from RV217 and 1m time are used in
the parameter fitting step.   These models include log Plasma Viral Load (lPVL), and exclude the intercept and lone variables that can serve as an intercept (v3\_not\_nflg, 6m\_not\_1m, and v3\_not\_nflg :6m\_not\_1m).
\par
\bigskip
\end{minipage}

Figure~\ref{fig:Timings.lPVL.goldismultiple.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg} shows the RMSEs of
estimates of Timings, for the 6m time point sequences from RV217
(high-quality nearly-full length (nflg) sequences, about 10 nflg-equivalents
per sample).

\begin{minipage}{\linewidth}
 {
\centering
\par
\bigskip
\captionof{figure}{\bf RMSEs for estimates of Timings using 6m samples from RV217, ~10 SGA nflg-equiv, and lPVL and gold.is.multiple (no intercept)} \label{fig:Timings.lPVL.goldismultiple.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg}
<<echo = FALSE, results = hide, fig = TRUE>>=
#timings.mat <- evaluateTimings.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg;
#timings.mat <- evaluateTimings.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg[ , 1:7 ];
timings.mat <- prepare.timings.mat( evaluateTimings.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.nflg, include.intercept = FALSE );

my.palette <- colorRampPalette(c("red", "yellow", "green"))(n = 299)
col.breaks = c(seq(0,0.5*.m6m,length=100),  # for red
  seq(0.5*.m6m,0.9*.m6m,length=101)[-1],              # for yellow
  seq(.9*.m6m,1*.m6m,length=101)[-1])              # for green

mat.text <- round( timings.mat );
mat.text[ is.na( mat.text ) ] <- "";
mat.data <- (1/timings.mat);
heatmap.2(
        mat.data,
        col = my.palette, colsep=c(1:62),rowsep=(1:62), sepwidth=c(0.05,0.05), sepcolor="white",
        trace="none", Rowv=F,Colv=F, scale="none", dendrogram="none",key=F,
        cellnote = mat.text, notecol = "black", notecex = 0.8,
        srtCol=45, adjCol = c(1,1), cexCol = 0.9,
         cexRow = 0.8,
        margins = c( 11.5, 9.5 ), breaks = col.breaks
    );
@ 
\par
\bigskip
}
\textbf{RMSEs for estimates of Timings using 6m samples
  from RV217, ~10 SGA nflg-equiv, and lPVL and gold.is.multiple (no intercept)}
The first column corresponds to the uncalibrated estimates directly
from PFitter and PREAST.  Four sets of three columns follow,
corresponding to different data used in the calibration.  In the
leftmost of the four sets, labeled [RT], all of the data is included:
both regions, and both times.  In the rightmost, labeled [rt], only
sequences of the nflg region from RV217 and 1m time are used in
the parameter fitting step.   These models include log Plasma Viral Load (lPVL), and exclude the intercept and lone variables that can serve as an intercept (v3\_not\_nflg, 6m\_not\_1m, and v3\_not\_nflg :6m\_not\_1m).
\par
\bigskip
\end{minipage}



Figure~\ref{fig:Timings.lPVL.goldismultiple.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3} shows the RMSEs of
estimates of Timings, for the 1m time point sequences from Caprisa 002 (deep, high-quality sequences of short region of Env, V3). 
 
\begin{minipage}{\linewidth}
 {
\centering
\par
\bigskip
\captionof{figure}{\bf RMSEs for estimates of Timings 1m samples from Caprisa 002, v3 Illumina w/PrimerID, and lPVL and gold.is.multiple (no intercept)} \label{fig:Timings.lPVL.goldismultiple.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3}
<<echo = FALSE, results = hide, fig = TRUE>>=
#timings.mat <- evaluateTimings.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3;
#timings.mat <- evaluateTimings.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3[ , 1:7 ];
timings.mat <- prepare.timings.mat( evaluateTimings.sampledwidth_uniform_1mmtn003_6mhvtn502.1m.v3, include.intercept = FALSE );

my.palette <- colorRampPalette(c("red", "yellow", "green"))(n = 299)
col.breaks = c(seq(0,0.5*.m1m,length=100),  # for red
  seq(0.5*.m1m,0.9*.m1m,length=101)[-1],              # for yellow
  seq(.9*.m1m,1*.m1m,length=101)[-1])              # for green

mat.text <- round( timings.mat );
mat.text[ is.na( mat.text ) ] <- "";
mat.data <- (1/timings.mat);
heatmap.2(
        mat.data,
        col = my.palette, colsep=c(1:62),rowsep=(1:62), sepwidth=c(0.05,0.05), sepcolor="white",
        trace="none", Rowv=F,Colv=F, scale="none", dendrogram="none",key=F,
        cellnote = mat.text, notecol = "black", notecex = 0.8,
        srtCol=45, adjCol = c(1,1), cexCol = 0.9,
         cexRow = 0.8,
        margins = c( 11.5, 9.5 ), breaks = col.breaks
    );
@ 
\par
\bigskip
}
\textbf{RMSEs for estimates of Timings 1m samples from Caprisa 002, v3 Illumina w/PrimerID, and lPVL and gold.is.multiple (no intercept)}
The first column corresponds to the uncalibrated estimates directly
from PFitter and PREAST.  Four sets of three columns follow,
corresponding to different data used in the calibration.  In the
leftmost of the four sets, labeled [RT], all of the data is included:
both regions, and both times.  In the rightmost, labeled [rt], only
sequences of the v3 region from RV217 and 1m time are used in
the parameter fitting step.   These models include log Plasma Viral Load (lPVL), and exclude the intercept and lone variables that can serve as an intercept (v3\_not\_nflg, 6m\_not\_1m, and v3\_not\_nflg :6m\_not\_1m).
\par
\bigskip
\end{minipage}

Figure~\ref{fig:Timings.lPVL.goldismultiple.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3} shows the RMSEs of
estimates of Timings, for the 6m time point sequences from Caprisa 002 (deep, high-quality sequences of short region of Env, V3). 

\begin{minipage}{\linewidth}
 {
\centering
\par
\bigskip
\captionof{figure}{\bf RMSEs for estimates of Timings using 6m samples from Caprisa 002, v3 Illumina w/PrimerID, and lPVL and gold.is.multiple (no intercept)} \label{fig:Timings.lPVL.goldismultiple.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3}
<<echo = FALSE, results = hide, fig = TRUE>>=
#timings.mat <- evaluateTimings.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3;
#timings.mat <- evaluateTimings.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3[ , 1:7 ];
timings.mat <- prepare.timings.mat( evaluateTimings.sampledwidth_uniform_1mmtn003_6mhvtn502.6m.v3, include.intercept = FALSE );

my.palette <- colorRampPalette(c("red", "yellow", "green"))(n = 299)
col.breaks = c(seq(0,0.5*.m6m,length=100),  # for red
  seq(0.5*.m6m,0.9*.m6m,length=101)[-1],              # for yellow
  seq(.9*.m6m,1*.m6m,length=101)[-1])              # for green

mat.text <- round( timings.mat );
mat.text[ is.na( mat.text ) ] <- "";
mat.data <- (1/timings.mat);
heatmap.2(
        mat.data,
        col = my.palette, colsep=c(1:62),rowsep=(1:62), sepwidth=c(0.05,0.05), sepcolor="white",
        trace="none", Rowv=F,Colv=F, scale="none", dendrogram="none",key=F,
        cellnote = mat.text, notecol = "black", notecex = 0.8,
        srtCol=45, adjCol = c(1,1), cexCol = 0.9,
         cexRow = 0.8,
        margins = c( 11.5, 9.5 ), breaks = col.breaks
    );
@ 
\par
\bigskip
}
\textbf{RMSEs for estimates of Timings using 6m samples from Caprisa 002, v3 Illumina w/PrimerID, and lPVL and gold.is.multiple (no intercept)}
The first column corresponds to the uncalibrated estimates directly
from PFitter and PREAST.  Four sets of three columns follow,
corresponding to different data used in the calibration.  In the
leftmost of the four sets, labeled [RT], all of the data is included:
both regions, and both times.  In the rightmost, labeled [rt], only
sequences of the v3 region from RV217 and 1m time are used in
the parameter fitting step.  These models include log Plasma Viral Load (lPVL), and exclude the intercept and lone variables that can serve as an intercept (v3\_not\_nflg, 6m\_not\_1m, and v3\_not\_nflg :6m\_not\_1m).
\par
\bigskip
\end{minipage}

%%%%%endmark

\subsubsection{isMultiple}

<<echo = FALSE, results = hide>>=
### IsMultiple

# Ensure results exist.
.results.by.region.and.time.Rda.filename <- evaluateIsMultiple(
     force.recomputation = FORCE.RECOMPUTATION,
     RESULTS.DIR = RESULTS.DIR,
     results.dirname = RESULTS.DIRNAME
);

## TODO: REMOVE?
## Load all isMultiple results into results.by.region.and.time
# load( "/fh/fast/edlefsen_p/bakeoff_analysis_results/raw_edited_20160216/isMultiple.results.by.region.and.time.Rda" )
# ( results.by.region.and.time[["v3"]][["1m"]][["gold.is.one.founder.per.person"]] )
# .confusion.matrices <- apply( results.by.region.and.time[["v3"]][["1m"]][["results.per.person"]], 2, function ( estimates ) { table( results.by.region.and.time[["v3"]][["1m"]][["gold.is.one.founder.per.person"]], estimates ) } )
# .confusion.matrices <- apply( results.by.region.and.time[["v3"]][["6m"]][["results.per.person"]], 2, function ( estimates ) { table( results.by.region.and.time[["v3"]][["6m"]][["gold.is.one.founder.per.person"]], estimates ) } )

## 1m.nflg
evaluateIsMultiple.nflg.v3.1m.6m.unbounded.1m.nflg <- getFilteredResultsTables( "_evaluateIsMultiple.tab", the.region = "nflg", to.region = "v3", the.time = "1m.6m", sort.column = NULL, the.bounds.type = "unbounded.1m.nflg", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
colnames( evaluateIsMultiple.nflg.v3.1m.6m.unbounded.1m.nflg ) <- paste( "nflg.v3.1m.6m", colnames( evaluateIsMultiple.nflg.v3.1m.6m.unbounded.1m.nflg ), sep = "." );
evaluateIsMultiple.nflg.1m.6m.unbounded.1m.nflg <- getFilteredResultsTables( "_evaluateIsMultiple.tab", the.region = "nflg", the.time = "1m.6m", sort.column = NULL, the.bounds.type = "unbounded.1m", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
colnames( evaluateIsMultiple.nflg.1m.6m.unbounded.1m.nflg ) <- paste( "nflg.1m.6m", colnames( evaluateIsMultiple.nflg.1m.6m.unbounded.1m.nflg ), sep = "." );
evaluateIsMultiple.nflg.v3.1m.unbounded.1m.nflg <- getFilteredResultsTables( "_evaluateIsMultiple.tab", the.region = "nflg", to.region = "v3", the.time = "1m", sort.column = NULL, the.bounds.type = "unbounded.nflg", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
colnames( evaluateIsMultiple.nflg.v3.1m.unbounded.1m.nflg ) <- paste( "nflg.v3.1m", colnames( evaluateIsMultiple.nflg.v3.1m.unbounded.1m.nflg ), sep = "." );
evaluateIsMultiple.nflg.1m.unbounded.1m.nflg <- getFilteredResultsTables( "_evaluateIsMultiple.tab", the.region = "nflg", the.time = "1m", sort.column = NULL, the.bounds.type = "unbounded", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
colnames( evaluateIsMultiple.nflg.1m.unbounded.1m.nflg ) <- paste( "nflg.1m", colnames( evaluateIsMultiple.nflg.1m.unbounded.1m.nflg ), sep = "." );

evaluateIsMultiple.unbounded.1m.nflg <- missing.row.safe.cbind( evaluateIsMultiple.nflg.v3.1m.6m.unbounded.1m.nflg, missing.row.safe.cbind( evaluateIsMultiple.nflg.1m.6m.unbounded.1m.nflg, missing.row.safe.cbind( evaluateIsMultiple.nflg.v3.1m.unbounded.1m.nflg, evaluateIsMultiple.nflg.1m.unbounded.1m.nflg ) ) );

## 6m.nflg
evaluateIsMultiple.nflg.v3.1m.6m.unbounded.6m.nflg <- getFilteredResultsTables( "_evaluateIsMultiple.tab", the.region = "nflg", to.region = "v3", the.time = "1m.6m", sort.column = NULL, the.bounds.type = "unbounded.6m.nflg", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
colnames( evaluateIsMultiple.nflg.v3.1m.6m.unbounded.6m.nflg ) <- paste( "nflg.v3.1m.6m", colnames( evaluateIsMultiple.nflg.v3.1m.6m.unbounded.6m.nflg ), sep = "." );
evaluateIsMultiple.nflg.1m.6m.unbounded.6m.nflg <- getFilteredResultsTables( "_evaluateIsMultiple.tab", the.region = "nflg", the.time = "1m.6m", sort.column = NULL, the.bounds.type = "unbounded.6m", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
colnames( evaluateIsMultiple.nflg.1m.6m.unbounded.6m.nflg ) <- paste( "nflg.1m.6m", colnames( evaluateIsMultiple.nflg.1m.6m.unbounded.6m.nflg ), sep = "." );
evaluateIsMultiple.nflg.v3.6m.unbounded.6m.nflg <- getFilteredResultsTables( "_evaluateIsMultiple.tab", the.region = "nflg", to.region = "v3", the.time = "6m", sort.column = NULL, the.bounds.type = "unbounded.nflg", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
colnames( evaluateIsMultiple.nflg.v3.6m.unbounded.6m.nflg ) <- paste( "nflg.v3.1m", colnames( evaluateIsMultiple.nflg.v3.6m.unbounded.6m.nflg ), sep = "." );
evaluateIsMultiple.nflg.6m.unbounded.6m.nflg <- getFilteredResultsTables( "_evaluateIsMultiple.tab", the.region = "nflg", the.time = "6m", sort.column = NULL, the.bounds.type = "unbounded", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
colnames( evaluateIsMultiple.nflg.6m.unbounded.6m.nflg ) <- paste( "nflg.6m", colnames( evaluateIsMultiple.nflg.6m.unbounded.6m.nflg ), sep = "." );

evaluateIsMultiple.unbounded.6m.nflg <- missing.row.safe.cbind( evaluateIsMultiple.nflg.v3.1m.6m.unbounded.6m.nflg, missing.row.safe.cbind( evaluateIsMultiple.nflg.1m.6m.unbounded.6m.nflg, missing.row.safe.cbind( evaluateIsMultiple.nflg.v3.6m.unbounded.6m.nflg, evaluateIsMultiple.nflg.6m.unbounded.6m.nflg ) ) );

## MARK
###
## 1m.v3
evaluateIsMultiple.nflg.v3.1m.6m.unbounded.1m.v3 <- getFilteredResultsTables( "_evaluateIsMultiple.tab", the.region = "nflg", to.region = "v3", the.time = "1m.6m", sort.column = NULL, the.bounds.type = "unbounded.1m.v3", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
colnames( evaluateIsMultiple.nflg.v3.1m.6m.unbounded.1m.v3 ) <- paste( "nflg.v3.1m.6m", colnames( evaluateIsMultiple.nflg.v3.1m.6m.unbounded.1m.v3 ), sep = "." );
evaluateIsMultiple.v3.1m.6m.unbounded.1m.v3 <- getFilteredResultsTables( "_evaluateIsMultiple.tab", the.region = "v3", the.time = "1m.6m", sort.column = NULL, the.bounds.type = "unbounded.1m", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
colnames( evaluateIsMultiple.v3.1m.6m.unbounded.1m.v3 ) <- paste( "v3.1m.6m", colnames( evaluateIsMultiple.v3.1m.6m.unbounded.1m.v3 ), sep = "." );
evaluateIsMultiple.nflg.v3.1m.unbounded.1m.v3 <- getFilteredResultsTables( "_evaluateIsMultiple.tab", the.region = "nflg", to.region = "v3", the.time = "1m", sort.column = NULL, the.bounds.type = "unbounded.v3", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
colnames( evaluateIsMultiple.nflg.v3.1m.unbounded.1m.v3 ) <- paste( "nflg.v3.1m", colnames( evaluateIsMultiple.nflg.v3.1m.unbounded.1m.v3 ), sep = "." );
evaluateIsMultiple.v3.1m.unbounded.1m.v3 <- getFilteredResultsTables( "_evaluateIsMultiple.tab", the.region = "v3", the.time = "1m", sort.column = NULL, the.bounds.type = "unbounded", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
colnames( evaluateIsMultiple.v3.1m.unbounded.1m.v3 ) <- paste( "v3.1m", colnames( evaluateIsMultiple.v3.1m.unbounded.1m.v3 ), sep = "." );

evaluateIsMultiple.unbounded.1m.v3 <- missing.row.safe.cbind( evaluateIsMultiple.nflg.v3.1m.6m.unbounded.1m.v3, missing.row.safe.cbind( evaluateIsMultiple.v3.1m.6m.unbounded.1m.v3, missing.row.safe.cbind( evaluateIsMultiple.nflg.v3.1m.unbounded.1m.v3, evaluateIsMultiple.v3.1m.unbounded.1m.v3 ) ) );

## 6m.v3
evaluateIsMultiple.nflg.v3.1m.6m.unbounded.6m.v3 <- getFilteredResultsTables( "_evaluateIsMultiple.tab", the.region = "nflg", to.region = "v3", the.time = "1m.6m", sort.column = NULL, the.bounds.type = "unbounded.6m.v3", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
colnames( evaluateIsMultiple.nflg.v3.1m.6m.unbounded.6m.v3 ) <- paste( "nflg.v3.1m.6m", colnames( evaluateIsMultiple.nflg.v3.1m.6m.unbounded.6m.v3 ), sep = "." );
evaluateIsMultiple.v3.1m.6m.unbounded.6m.v3 <- getFilteredResultsTables( "_evaluateIsMultiple.tab", the.region = "v3", the.time = "1m.6m", sort.column = NULL, the.bounds.type = "unbounded.6m", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
colnames( evaluateIsMultiple.v3.1m.6m.unbounded.6m.v3 ) <- paste( "v3.1m.6m", colnames( evaluateIsMultiple.v3.1m.6m.unbounded.6m.v3 ), sep = "." );
evaluateIsMultiple.nflg.v3.6m.unbounded.6m.v3 <- getFilteredResultsTables( "_evaluateIsMultiple.tab", the.region = "nflg", to.region = "v3", the.time = "6m", sort.column = NULL, the.bounds.type = "unbounded.v3", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
colnames( evaluateIsMultiple.nflg.v3.6m.unbounded.6m.v3 ) <- paste( "nflg.v3.1m", colnames( evaluateIsMultiple.nflg.v3.6m.unbounded.6m.v3 ), sep = "." );
evaluateIsMultiple.v3.6m.unbounded.6m.v3 <- getFilteredResultsTables( "_evaluateIsMultiple.tab", the.region = "v3", the.time = "6m", sort.column = NULL, the.bounds.type = "unbounded", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
colnames( evaluateIsMultiple.v3.6m.unbounded.6m.v3 ) <- paste( "v3.6m", colnames( evaluateIsMultiple.v3.6m.unbounded.6m.v3 ), sep = "." );

evaluateIsMultiple.unbounded.6m.v3 <- missing.row.safe.cbind( evaluateIsMultiple.nflg.v3.1m.6m.unbounded.6m.v3, missing.row.safe.cbind( evaluateIsMultiple.v3.1m.6m.unbounded.6m.v3, missing.row.safe.cbind( evaluateIsMultiple.nflg.v3.6m.unbounded.6m.v3, evaluateIsMultiple.v3.6m.unbounded.6m.v3 ) ) );


@ 

Figure~\ref{fig:IsMultiple.unbounded.1m.nflg} shows the AUCs of estimates of IsMultiple, for the 1m time point sequences from RV217
(high-quality nearly-full length (nflg) sequences, about 10 nflg-equivalents
per sample). 

\begin{minipage}{\linewidth}
 {
\centering
\par
\bigskip
\captionof{figure}{\bf AUCs for estimates of IsMultiple using 1m samples from RV217, ~10 SGA nflg-equiv} \label{fig:IsMultiple.unbounded.1m.nflg}
<<echo = FALSE, results = hide, fig = TRUE>>=
# mat.data <- evaluateIsMultiple.nflg.nflg.1m.1m.unbounded;
# mat.text <- evaluateIsMultiple.nflg.nflg.1m.1m.unbounded;
mat.data <- prepare.ismultiple.mat( evaluateIsMultiple.unbounded.1m.nflg );
#pdf( "IsMultipleAUCsBarplot.nflg.1m.pdf" )
plotIsMultipleMat( mat.data )
#dev.off()

# pdf( "IsMultipleAUCsBarplotFromHalf.nflg.1m.pdf" )
# plotIsMultipleMat( mat.data, start.barplot.from.half = TRUE )
# dev.off()
@ 
\par
\bigskip
}
\textbf{AUCs for estimates of IsMultiple using 1m samples from RV217, ~10 SGA nflg-equiv}

\par
\bigskip
\end{minipage}

Figure~\ref{fig:IsMultiple.unbounded.1m.nflg} shows the AUCs of estimates of IsMultiple, for the 6m time point sequences from RV217
(high-quality nearly-full length (nflg) sequences, about 10 nflg-equivalents
per sample). 

\begin{minipage}{\linewidth}
 {
\centering
\par
\bigskip
\captionof{figure}{\bf AUCs for estimates of IsMultiple using 6m samples from RV217, ~10 SGA nflg-equiv} \label{fig:IsMultiple.unbounded.6m.nflg}
<<echo = FALSE, results = hide, fig = TRUE>>=
# mat.data <- evaluateIsMultiple.nflg.nflg.1m.6m.unbounded;
# mat.text <- evaluateIsMultiple.nflg.nflg.1m.6m.unbounded;
mat.data <- prepare.ismultiple.mat( evaluateIsMultiple.unbounded.6m.nflg );

#pdf( "IsMultipleAUCsBarplot.nflg.6m.pdf" )
plotIsMultipleMat( mat.data )
#dev.off()

#pdf( "IsMultipleAUCsBarplotFromHalf.nflg.6m.pdf" )
#plotIsMultipleMat( mat.data, start.barplot.from.half = TRUE )
#dev.off()
@ 
\par
\bigskip
}
\textbf{AUCs for estimates of IsMultiple using 6m samples from RV217, ~10 SGA nflg-equiv }
\par
\bigskip
\end{minipage}

Figure~\ref{fig:IsMultiple.unbounded.1m.nflg} shows the AUCs of estimates of IsMultiple, for the 1m time point sequences from Caprisa 002 (deep, high-quality sequences of short region of Env, V3).

\begin{minipage}{\linewidth}
 {
\centering
\par
\bigskip
\captionof{figure}{\bf AUCs for estimates of IsMultiple using 1m samples from Caprisa 002, v3 Illumina w/PrimerID} \label{fig:IsMultiple.unbounded.1m.v3}
<<echo = FALSE, results = hide, fig = TRUE>>=
# mat.data <- evaluateIsMultiple.nflg.v3.1m.1m.unbounded;
# mat.text <- evaluateIsMultiple.nflg.v3.1m.1m.unbounded;
mat.data <- prepare.ismultiple.mat( evaluateIsMultiple.unbounded.1m.v3 );

#pdf( "IsMultipleAUCsBarplot.v3.1m.pdf" )
plotIsMultipleMat( mat.data )
#dev.off()

# pdf( "IsMultipleAUCsBarplotFromHalf.v3.1m.pdf" )
# plotIsMultipleMat( mat.data, start.barplot.from.half = TRUE )
# dev.off()
@ 
\par
\bigskip
}
\textbf{AUCs for estimates of IsMultiple using 1m samples from Caprisa 002, v3 Illumina w/PrimerID }

\par
\bigskip
\end{minipage}

Figure~\ref{fig:IsMultiple.unbounded.1m.v3} shows the AUCs of estimates of IsMultiple, for the 1m time point sequences from Caprisa 002 (deep, high-quality sequences of short region of Env, V3).

\begin{minipage}{\linewidth}
 {
\centering
\par
\bigskip
\captionof{figure}{\bf AUCs for estimates of IsMultiple using 6m samples from Caprisa 002, v3 Illumina w/PrimerID} \label{fig:IsMultiple.unbounded.6m.v3}
<<echo = FALSE, results = hide, fig = TRUE>>=
# mat.data <- evaluateIsMultiple.nflg.v3.1m.6m.unbounded;
# mat.text <- evaluateIsMultiple.nflg.v3.1m.6m.unbounded;
mat.data <- prepare.ismultiple.mat( evaluateIsMultiple.unbounded.6m.v3 );

#pdf( "IsMultipleAUCsBarplot.v3.6m.pdf" )
plotIsMultipleMat( mat.data )
#dev.off()

# pdf( "IsMultipleAUCsBarplotFromHalf.v3.6m.pdf" )
# plotIsMultipleMat( mat.data, start.barplot.from.half = TRUE )
# dev.off()
# #  colnames( mat.data ) <- c( "Uncalibrated", "Calibrated", "Calibrated with LASSO" );
# #  pdf( "isMultipleAUCs_RT_6m_v3.pdf" )
# mat.text <- mat.data;
# 
#     heatmap.2(
#         mat.data,
#         col = my.palette, colsep=c(1:62),rowsep=(1:62), sepwidth=c(0.05,0.05), sepcolor="white",
#         trace="none", Rowv=F,Colv=F, scale="none", dendrogram="none",key=F,
#         cellnote = mat.text, notecol = "black", notecex = 0.9,
#         srtCol=45, adjCol = c(1,1),
#         #cexCol = 1.4, ## For PDFing.
#         #cexRow = 1.4, ## For PDFing.
#         #cexCol = 0.7,
#         #cexRow = 0.7,
#         #margins = c( 12.5, 17.5 ), breaks = col.breaks # For PDFing
#         margins = c( 11.5, 9.5 ), breaks = col.breaks
#     );
# # ## TODO: REMOVE. PDFing.
# #  dev.off()
@ 
\par
\bigskip
}
\textbf{AUCs for estimates of IsMultiple using 6m samples from Caprisa 002, v3 Illumina w/PrimerID }

\par
\bigskip
\end{minipage}


%%%%%
<<echo = FALSE, results = hide>>=
uses.by.evaluator.1m.6m <- getFilteredLassoUsageTables( "isMultiple", the.region = "nflg", to.region = "v3", the.time = "1m.6m", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
uses.by.evaluator.1m.6m <- prepare.usage.mat( uses.by.evaluator.1m.6m );
apply( uses.by.evaluator.1m.6m, 2, mean, na.rm = TRUE )
#                                   (Intercept) 
#                                    1.00000000 
#                               DSStarPhyTest R 
#                                    0.91866029 
#                                    priv sites 
#                                    0.18819777 
# sampledwidth_uniform_1mmtn003_6mhvtn502 lower 
#                                    0.16746411 
#                              InSites clusters 
#                                    0.25996810 
#                                       [bound] 
#                                    0.18979266 
#                                          lPVL 
#                                    0.16586922 
#                                   v3_not_nflg 
#                                    0.02551834 
#                                  PFitter fits 
#                                    0.09090909 
#                             PFitter star-like 
#                                    0.09090909 
#                            (syn) PFitter fits 
#                                    0.09090909 
#                       (syn) PFitter star-like 
#                                    0.09090909 
#                    (w/in c) PFitter fits 
#                                    0.09090909 
#              (w/in c+syn) PFitter fits 
#                                    0.09090909 
#                         PFitter mut rate coef 
#                                    0.09090909 
#                   (syn) PFitter mut rate coef 
#                                    0.09090909 
#           (w/in c) PFitter mut rate coef 
#                                    0.09090909 
#     (w/in c+syn) PFitter mut rate coef 
#                                    0.09090909 
uses.by.evaluator.1m <- getFilteredLassoUsageTables( "isMultiple", the.region = "nflg", to.region = "v3", the.time = "1m", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
uses.by.evaluator.1m <- prepare.usage.mat( uses.by.evaluator.1m );
apply( uses.by.evaluator.1m, 2, mean, na.rm = TRUE )
uses.by.evaluator.6m <- getFilteredLassoUsageTables( "isMultiple", the.region = "nflg", to.region = "v3", the.time = "6m", RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );
uses.by.evaluator.6m <- prepare.usage.mat( uses.by.evaluator.6m );
apply( uses.by.evaluator.6m, 2, mean, na.rm = TRUE )
#                               (Intercept) 
#                                1.00000000 
#                           DSStarPhyTest R 
#                                0.98863636 
#                                priv sites 
#                                0.41720779 
#                                   [bound] 
#                                0.91396104 
#         sampledwidth_uniform_mtn003 lower 
#                                0.40584416 
#                          InSites clusters 
#                                0.17207792 
#                               v3_not_nflg 
#                                0.62500000 
#                                      lPVL 
#                                0.10064935 
#                              PFitter fits 
#                                0.09090909 
#                         PFitter star-like 
#                                0.09090909 
#                        (syn) PFitter fits 
#                                0.09090909 
#                   (syn) PFitter star-like 
#                                0.09090909 
#                (w/in c) PFitter fits 
#                                0.09090909 
#          (w/in c+syn) PFitter fits 
#                                0.09090909 
#                     PFitter mut rate coef 
#                                0.09090909 
#               (syn) PFitter mut rate coef 
#                                0.09090909 
#       (w/in c) PFitter mut rate coef 
#                                0.09090909 
# (w/in c+syn) PFitter mut rate coef 
#                                0.09090909 
# Make a formula out of it.
uses.by.evaluator.1m.6m.raw <- getFilteredLassoUsageTables( "isMultiple", the.region = "nflg", to.region = "v3", the.time = "1m.6m", rowname.pattern.map = NULL, colname.pattern.map = NULL, RESULTS.DIR = RESULTS.DIR, results.dirname = RESULTS.DIRNAME );


## For the paper table:
isMultiple.result.formula.out <-
    getIsMultipleResultFormula( "PFitter.is.poisson", evaluate.varname = "none" );
apply( apply( isMultiple.result.formula.out$evaluated.formula.table[,1:3], 1:2, function( .value )  { sprintf( "%1.2f", .value ) } ), 1, function( .row ) { paste( .row[ 1 ], " (", .row[2], " to ", .row[3], ")", sep = "" ) } )
# 
#           (Intercept)         DSStarPhyTest.R 
# "-0.40 (-1.31 to 0.50)"   "2.81 (1.08 to 4.68)" 
@ 

%%%%%
Figure~\ref{fig:IsMultiple.lasso.uses.unbounded.1m} shows the average
across trained models (each one holding out one of the participants)
of the number of times a covariate was selected by LASSO for
inclusion in each model, for the both-regions, 1m lasso fits (``[Rt]'').

\begin{minipage}{\linewidth}
 {
\centering
\par
\bigskip
\captionof{figure}{\bf Uses of estimators in lasso-selected models for predicting IsMultiple using 1m samples from RV217 (nflg) and Caprisa 002 (Env V3)} \label{fig:IsMultiple.lasso.uses.unbounded.1m}
<<echo = FALSE, results = hide, fig = TRUE>>=
my.palette <- colorRampPalette(c("red", "yellow", "green"))(n = 299)
                                       
col.breaks = c(seq(0,0.5,length=100),  # for red
  seq(0.5,0.9,length=101)[-1],              # for yellow
  seq(.9,1,length=101)[-1])              # for green

mat.data <- uses.by.evaluator.1m;

# Can make it smaller by excluding columns that are essentially never used.
remove.column <- ( apply( mat.data, 2, max, na.rm = TRUE ) <= 0.1 );
# which( remove.column )
# Also remove the intercept column, because it's always included and that's boring.
remove.column[ 1 ] <- TRUE;
mat.data <- mat.data[ , !remove.column, drop = FALSE ];
#mat.data <- mat.data[ , grep( "\\.coef$", colnames( mat.data ), invert = T ), drop = FALSE ];

mat.text <- apply( mat.data, 1:2, function( .x ) { sprintf( "%0.2f", .x ) } );
    heatmap.2(
        mat.data,
        col = my.palette, colsep=c(1:62),rowsep=(1:62), sepwidth=c(0.05,0.05), sepcolor="white",
        trace="none", Rowv=F,Colv=F, scale="none", dendrogram="none",key=F,
        cellnote = mat.text, notecol = "black", notecex = 0.9,
        srtCol=45, adjCol = c(1,1), cexCol = 0.7,
         cexRow = 0.7,
        margins = c( 8, 9.5 ), breaks = col.breaks
    );
@ 
\par
\bigskip
}
\textbf{\bf Uses of estimators in lasso-selected models for predicting IsMultiple using 1m samples from RV217 (nflg) and Caprisa 002 (Env V3)}
Here is some description of what is going on in the heatmap.
\par
\bigskip
\end{minipage}
%%%%%
Figure~\ref{fig:IsMultiple.lasso.uses.unbounded.6m} shows the average
across trained models (each one holding out one of the participants)
of the number of times a covariate was selected by LASSO for
inclusion in each model, for the both-regions, 6m lasso fits (``[Rt]'').

\begin{minipage}{\linewidth}
 {
\centering
\par
\bigskip
\captionof{figure}{\bf Uses of estimators in lasso-selected models for predicting IsMultiple using 6m samples from RV217 (nflg) and Caprisa 002 (Env V3)} \label{fig:IsMultiple.lasso.uses.unbounded.6m}
<<echo = FALSE, results = hide, fig = TRUE>>=
my.palette <- colorRampPalette(c("red", "yellow", "green"))(n = 299)
                                       
col.breaks = c(seq(0,0.5,length=100),  # for red
  seq(0.5,0.9,length=101)[-1],              # for yellow
  seq(.9,1,length=101)[-1])              # for green

mat.data <- uses.by.evaluator.6m;

# Can make it smaller by excluding columns that are essentially never used.
remove.column <- ( apply( mat.data, 2, max, na.rm = TRUE ) <= 0.1 );
# which( remove.column )
# Also remove the intercept column, because it's always included and that's boring.
remove.column[ 1 ] <- TRUE;
mat.data <- mat.data[ , !remove.column, drop = FALSE ];
#mat.data <- mat.data[ , grep( "\\.coef$", colnames( mat.data ), invert = T ), drop = FALSE ];

mat.text <- apply( mat.data, 1:2, function( .x ) { sprintf( "%0.2f", .x ) } );
    heatmap.2(
        mat.data,
        col = my.palette, colsep=c(1:62),rowsep=(1:62), sepwidth=c(0.05,0.05), sepcolor="white",
        trace="none", Rowv=F,Colv=F, scale="none", dendrogram="none",key=F,
        cellnote = mat.text, notecol = "black", notecex = 0.9,
        srtCol=45, adjCol = c(1,1), cexCol = 0.7,
         cexRow = 0.7,
        margins = c( 8, 9.5 ), breaks = col.breaks
    );
@ 
\par
\bigskip
}
\textbf{\bf Uses of estimators in lasso-selected models for predicting IsMultiple using 6m samples from RV217 (nflg) and Caprisa 002 (Env V3)}
Here is some description of what is going on in the heatmap.
\par
\bigskip
\end{minipage}


\section{Methods}


\subsection{PREAST}
Uses Prank<sup>1</sup> to create a multiple sequence alignment and to estimate founder sequence.

To infer multiple founders, the phylogenetic tree inferred by
Prank is split at the root and the leaves on each half are used to
infer separate founders.

Time of infection is inferred with Beast<sup>4</sup>.  A strict clock and constant
population size are used as priors.  Tree height is constrained to be
consistent with samples dates on the sequences.

--------
<sup>1</sup>: L{\"o}ytynoja, A., and Goldman, N. (2008). A model of evolution and structure for multiple sequence alignment. Philosophical Transactions of the Royal Society of London. Series B, Biological Sciences, 363(1512), 3913–3919. http://doi.org/10.1098/rstb.2008.0170
<br/>
<sup>2</sup>: Giorgi EE, Funkhouser B, Athreya G, Perelson AS, Korber BT, Bhattacharya T. Estimating time since infection in early homogeneous HIV-1 samples using a Poisson model. BMC Bioinformatics 2010 Oct 25;11:532. [PMID: 20973976](http://www.ncbi.nlm.nih.gov/pubmed/20973976)
<br/>
<sup>3</sup>: Giorgi EE and Bhattacharya T. A note on two-sample tests for comparing intra-individual genetic sequence diversity between populations. Biometrics December 2012; 68:4. [PMID: 23004569](http://www.ncbi.nlm.nih.gov/pubmed/23004569)
<br/>
<sup>4</sup>: Drummond, Alexei J., and Andrew Rambaut. "BEAST: Bayesian evolutionary analysis by sampling trees." BMC evolutionary biology 7.1 (2007): 214.

\section*{Acknowledgements}
Research reported in this document was partially supported by the Bill and Melinda Gates Foundation Award Number OPP1110049.

\hspace{.2in}
%\bibliographystyle{biorefs}
%\bibliography{ref}
\newpage

% \section{Additional unsorted notes}
% Merlin (RV217 PI) is interested in this question: menstrual cycle / pregnancy association with HIV infection in E African women
% 
% RV217 sequencing already done 1 week, 1 month, 6 months. Samples twice weekly post-infection.
% 
% Models predict time of peak. Morgane wishes we had money to sequence peak timepoint. Peter says that HVTN could possibly find the money.
% 
% Are forward transmissions happening at peak VL? [I'm not sure how we'd answer this]
% 
% timing of infection is important to Merlin Robb.
% 
%     
%*) RV217: we don't know about drug use but we could ask.  But they do lots of detailed work to track down when/who etc.  (don't sequence transmitting partners though).  Morgane says she thinks they would know.  Also the East Africans aren't using IV drugs.
% - have: country, age, date of visits, viral loads at each visit, HLA on most subjects (have to ask Reshmi; maybe also host?), [also look for malaria and TB (outbreak) - none have either though; pregnancy], also: Shelly has neut assays but it would be a dreadful process to get it.
%[did not do] -  When talking to Morgane / Merlin about RV217, ask about pairwise distances within individuals, between time points for a single individual.
%[later]  - RV217 deep sequencing data would come right from Gustavo - short read amplicon 100-200nt targeted to look at specific epitopes, not overlaps.
%  - Populations are shifting and recombining a lot so proportions of founder-derived populations are hard to pin down.
%  - Very early recomb among the founders is seen in the SGA data.  4/30 have complex pops at 3 days after detection.
%  - In many subjects there is very little phylo signal / too few mutations ...
%    =) TODO: Ask Morgane followup Q: how many subjects have very little phylo signal
%  - Add notes to Trello: Erick/Chris: Not BEAST, but Java and by those folks.  Rambaut, extended by another group; No recombination.  Trying to validate the model against some MCTC data.  Parameters: pop size, mutation rates, fitness costs at individual sites/regions.
%  - Brainstorm draft of plan for using the sequences (training/test)
% *) Morgane recommends asking Jim Mullins for the deep-sequencing data of transmission pairs (was Brendan Larsen). [WIHS and MACS not acute; 37 subjects had early data - just C2V5 or Env].
% *) Morgane says she's supposed to wait for the Tanzanian seqs; two more weeks as of Jan 28.
% *) Some subjects don't have known time of infection because they stopped showing up as often. [NEED TO KNOW HOW MANY NON-phase 1/2]
% [done] Morgane will put together a spreadsheet with info including which subjects don't have acute info.
%*) doubt about number of founders from super-early time point comes "only from depth of sampling" - eg Gustavo's 3\% variant at day 3/7 that is the major variant at day 21.  "In real life the major variant at day 21 is the only one you'd catch"
%*) From Denis: "Hi Art
%
%Following our previous discussion, we are planning to sequence Nef and Env in one amplicon each. The regions we are planning to sequence are;
%
%1. Nef; from HXB2 position 8944 to 9463 (this excludes the anchor region).
%2. Env; from HXB2 position 6840 to 7380 (this covers the C2-V3-C3 region).
%
%May you please confirm if this is fine? Alternatively, if you have a primer sequences for regions that you have previously sequenced/analysed we could use those."
%  * rv217 run First timepoint results by Morgane 
% -- simulation to follow the 701 trial
% -- Siobhan [something] is the program officer
% -- Lang Wu at UBC is working on the time-dependent correlates aim.  Also Rong Fu, Peter's PhD student, has a paper that might be submitted and contributes to this.
% -- HIV simulation package "santa" paper by Erick and Chris 
% -- maybe one day a webinar on the work we've developed?
%  -- how to score / evaluate the predictions of founders?
%     *) individual AAs, but also hamming distances over k-mers, etc, and also eg PCP.
%     *) is it harder to predict in t-cell/ab epitopes vs non-epitopes?
% -- Modeling: Ben Masse is leading this; comparing traditional (deterministic) models


% \section{more from craig}
%  
% 
% Hey Paul,
% 
% In case you want to have hands-on access to some summary data
% pertaining to the RV217 sequences, I've attached a relevant CSV
% file.
% 
% Quick data dictionary:
% 
% -- Ptid:  subject identifier
% -- Visit:  visit number
% -- days.post.inf:  really days post-diagnosis, but
% -- sequenced.visit:  which sequenced visit, numerically (1, 2, or 3) was this?
% -- country:  also determinable by the ptid, but still nice to have in an easy format
% -- num.seq:  how many sequences for this ptid/visit?
% -- full.course:  did this participant have a full three visits (TRUE) or just one (FALSE)?
% 
% Conveniently, all of the subjects with bizarre visit codes (e.g., "0J, "1a") only have one sequenced visit.  I suspect this isn't a coincidence.
% 
% I've also attached a text file of the summary info I had yesterday, which has some of the information you were interested in (e.g., duplicate sequence info, etc.).
% 
% Here is a quick summary addressing yesterday's questions:
% 
% (1) How many participants with a full three visits are from each country?
% 
%    Kenya Thailand   Uganda
%       13       17        6
% 
% (2) How many participants have at least ten (or close) sequences for their second timepoint (T2)?
% 
% One Thai subject has nine sequences, which was deemed close enough.  One Kenyan subject has only five, and another Kenyan subject has only two.  This makes a total of 34 out of 36 subjects with a sufficient number of sequences.
% 
% (3) How many subjects have at least ten (or close) sequences for their first timepoint (T1)?
% 
% All 36 subjects with three sequenced visits have at least 10 sequences on T1.
% 
% (4) What is the distribution of time between T1 and T2 for the 36 subjects with more than one sequenced visit?
% 
% It's looking good:
% 
%    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
%   16.00   23.75   28.00   27.58   31.00   45.00
% 
% Those numbers include the two subjects with insufficient sequences on T2, which are 17 and 24 days between T1 and T2 each.  So removing those, the numbers go up a little bit.
% 
% 
% Summary: So while we still don't yet have the Tanzanian data, it
% looks like of these 36 subjects, 34 of them will be suitable for the
% bake-off.  17 (an even half) are Thai/male/01AE.  Of the rest, 11
% are Kenyan and 6 are Ugandan.  The other two with limited T2 data
% could be included as extra credit, since we have the T1 data to back
% them up.
% 
% \section{Craig's thought: separate strategies for diff Qs}
% BTW, as I've been giving this more thought, I'm thinking that for the bake-off, it might be best to have different training/validation strategies for the different research questions.
% 
% For example, for the question of "how many founders initiated the infection?", I think the original plan of using the Timepoint 1 (T1) samples as a gold reference, while the analysts only have access to the T2 (or T3) samples.
% 
% But for the question of "How long ago did the infection occur?", it makes sense to let the analysts have access to samples across all timepoints, to get an idea of how the data would change over time.  So for this question, there might need to be a new analysis dataset (though taken from the same sequences) where training/validation sets are not partitioned by timepoint.  Instead, the sequences for each timepoint are partitioned into training and validation, and they're combined, giving a look at not just one timepoint, but many.
% 
% Anyway, food for thought.
% 
% 
% 
% \section{more from Trello}
% \subsection{On sequencing technologies}
% Carolyn also has RSA govt grant about using myseq (already have SGA). Full length gag sequencing using overlapping 600 bp fragments. A portion of pol, a portion of nef. Driving question: does that give increased power to pick up the signature sites?
% 
% primerID from Ron Swanstrom (PNAS): amplicon-based. mix of amplicon and nexterra (indexing only). amplicons 1000bp (max for myseq). 500-600 mostly, paired 300bps to allow reads to overlap. Fragments are large (900bp) or small (600bp) - for large you lose middle ~200bps, but you still have linkage. primerID is good because it allows for quantitation.
% 
% @artpoon has a paper in NAS about primerID issues.
% 
% @artpoon says it's best to look at C2/v3 region of Env, or nef. Want to avoid high indel rates, which confounds alignment. Fast clock is key: nef & v3. If you avoid anchor regions, don't have to deal with indels so much.
% 
% Carolyn wants to do gag for cross-sectional Phambili sequencing.
% 
% Art has been doing p24 \& p17 with nexterra. Developing tools to do phylogenetic analysis with short-read sequences. Runs a sliding window across the short-read assembly and does "localized phylogenetic inference".
% 
% Carolyn could do 500bp of nef, which is all but 100bp.
% 
% @artpoon says: "If you have a few months between samples, that's enough to get a good clock estimate" (in v3 and nef, not in gag). 6 months to a year.
% 
% @artpoon proposes to use nef to get a prior estimate, do the rest on gag.
% 
% Carolyn proposes: deep first, following up with targeted Sanger sequencing
% we'll have SGA and deep data from the 43 first-timepoint Phambili subjects' sequences.
% 
% Could do more time points with fewer reads per time point / sample: need at least 100,000 reads per sample. 1000-5000 consensus. 15 Miillion reads per run, 200-300 thousand reads per sample.
% 
% 
% Paul's conclusions from all of this:
% 
% We should get seqs with three timepoints if possible; to match RV217, that'd be one week, one month, and six months; for prep for HVTN 701, doing a time point around two months is important.
% 
% for timing/founder ID we should develop methods that can handle the two-month (ish) time point and evaluate how much better we can do if we also have a six month time point.
% 
% to address the "sequencing plan for HVTN 701" aim, we can use the cross-sectional sequences from Phambili to evaluate SGA vs myseq options, and the idea of following-up deep-sequence analysis with targeted Sanger. (the answer to the question about how much is gained from the six-month time point will also be important to address this aim).
% 
% the timing and founder aims are interrelated, as resolving rates of evolution can help resolve coalescence times and if those preceed the infection window, that points to multiple founders (doesn't necessarily help with identifying what those founders are though - or does it?).
% 
% my concerns about short reads being insufficient seem to be not shared by anyone else so I'm dropping it.
% 
% ### Phambili
% 
% miseq full length gag with overlapping fragments
% primer id approach
% amplicon based sequencing
% only using the indexing part of the nextera kit (nextera allows 96-fold multiplexing)
% about 1000 bp amplicon, and get paired 300bp reads
% sequence from either end -- on amplicon
% no linkage between amplicons
% 
% Paul: Current plan for trials is to sequence every two months, so having a very acute timepoint and then sequencing at about two months would be useful.
% 
% ### Caprisa
% 
% not many are rna positive and antibody negative: perhaps 10 (there are about 4-5 in phambili)
% lots of followup
% 
% ## Sequencing region discussion
% 
% v3 env is pretty good
% nef runs about as fast as v3, if you avoid the anchor region, not much indel
% gag is imunnologically interesting, but has a very slow clock
% they have been doing sliding windows on nextera fragmented libraries to find dn/ds
% P17 does not evolve fast enough
% Art tries to go for 6 months to a year for timing
% 
% ## Subsequent discussion after departure of Art
% 
% RSA folks are happy to do CAPRISA
% They don't have full-length SGA
% Paul says that resolving the tree between individuals doesn't seem to help in terms of doing a sieve analysis
% More of a problem in the coevolution and the selection analysis
% Gene mismatch effects coming along for the ride with linkage, or alternatively some kind of fitness constraint
% Clade C is not especially well structured although it is gaining structure
% Idea is to avoid the founder effect and need phylogenetics to control for that
% Can follow up with targeted Sanger sequences to double check
% Paul proposes a cross-validation study
% Carolyn says Fiebig 1 and 4 would be sufficient, even 5
% Paul says that the real point is not the Fiebig stage
% Carolyn is a little skeptical about the Gustavo/Merlin talk saying that the source of an infection , because they might have had PCR skewing
% Carolyn says that PCR bias fluctuates with viral load
% She would be happy if the Gustavo/Merlin work was done with primer ID so we could quantitate
% With current depth, < 100,000 reads per sample -> 1,000 to 5,000 consensus sequences -> 1\% is fairly reliable
% 
% 
% @pauledlefsen and Peter in attendance.
% 
% ## Data update (need acute and a followup time point)
% 
% All but Tanzanian 217 - all women from E Africa, and all men from Thailand
% Many of the women were from Tanzania
% Carolyn - sequence CAPRISA data
% 502: have a few that are clearly in acute phase - longitudinal data is sporadic and sparse
% Partners in prep: Ying Chen would love it if we would help with founder identification
% Potential for Gates project data-- Paul has heard that they are getting incident sequences. Idea is to flesh out database with more clade C sequences. Are there multiple time points.
% 
% ## Schedule
% 
% Paper submitted in September 2015
% January: finalize set of methods
% 
% ## Methods
% 
% Art: founder identification and time since infection
% Morgane: just founder identification
% Paul: pretend that we only saw them in a window
% Peter's previous simple estimator

% \section{For R01}
% [nix]Table Y on page 8, near top: [to be turned into text]
% results of estimating founder sequences (evaluateFounders):
% " In the pilot study we included a new tool, identify-founders, that implements a simple variation of the idea of clustering PHMM update vectors. We cluster the sequences considering Hamming distances only at phylogenetically informative sites. These are positions of a multiple alignment at which there are multiple sequences sharing the same mutation. This simple version of the method, which performs hierarchical clustering on pairwise Hamming distances at phylogenetically informative sites, performed well at estimating the sequences of the founders of infection.
% But on page 7 near bottom, already text: By our metric, which compares the mismatch frequency between the estimated and actual founders, the accuracy overall in the V3 region was XX, YY, ZZ using the identify-founders method and WW using the PrankenBeast method at 6 months post infection.
% "
% so need identify-founders results.  and infer.  overall mismatch frequency in V3 region.
% 
% OK So getting this from postProcessEvaluateFounders.R.
% Answer:
% ``the accuracy overall in the CAPRISA V3 region was 72\% of samples had 100\% of V3 nucleotides correctly estimated (78\% of samples, for AAs) using data collected about 6 months post infection (max \% mismatch: 4\% nucleotides, 7\% AAs) using the identify-founders method and nearly identical results using the PrankenBeast method (max % mismatch: \3% nucs, 8\% AAs) at 6 months post-infection."
% 
% caprisa002.v3.1m.Identify.results$stats
% #                V3.AA       V3.NA
% # n         20.00000000 20.00000000
% # Min.       0.00000000  0.00000000
% # 1st Qu.    0.00000000  0.00000000
% # Median     0.00000000  0.00000000
% # Mean       0.00593000  0.00302600
% # 3rd Qu.    0.00000000  0.00000000
% # Max.       0.10630000  0.05246000
% # sd         0.02375953  0.01169363
% # frac.zero  0.85000000  0.80000000
% 
% 80% of V3 nucleotides perfectly estimated (85% of AAs) using data collected about 2 months post infection (max %mismatch 5% nucs, 10.6% AAs).  
% 
% caprisa002.v3.6m.Identify.results$stats
% #                V3.AA        V3.NA
% # n         18.00000000 18.000000000
% # Min.       0.00000000  0.000000000
% # 1st Qu.    0.00000000  0.000000000
% # Median     0.00000000  0.000000000
% # Mean       0.00697700  0.003287000
% # 3rd Qu.    0.00000000  0.000973000
% # Max.       0.07160000  0.036230000
% # sd         0.01809126  0.008702398
% # frac.zero  0.77777778  0.722222222
% 
% 72% of V3 nucleotides perfectly estimated (78% of AAs) using data collected about 6 months post infection (max %mismatch 4% nucs, 7% AAs). 
% 
%  caprisa002.v3.6m.Infer.results$stats
% #                V3.AA        V3.NA
% # n         18.00000000 18.000000000
% # Min.       0.00000000  0.000000000
% # 1st Qu.    0.00000000  0.000000000
% # Median     0.00000000  0.000000000
% # Mean       0.00660100  0.002742000
% # 3rd Qu.    0.00000000  0.000311600
% # Max.       0.08165000  0.033790000
% # sd         0.01993176  0.008093776
% # frac.zero  0.77777778  0.722222222
% 
% Using PrankenBeast, 72% of V3 nucleotides perfectly estimated (78% of AAs) using data collected about 6 months post infection (max %mismatch 3% nucs, 8% AAs). 
% 
%  caprisa002.v3.1m.Infer.results$stats
% #                V3.AA       V3.NA
% # n         19.00000000 19.00000000
% # Min.       0.00000000  0.00000000
% # 1st Qu.    0.00000000  0.00000000
% # Median     0.00000000  0.00000000
% # Mean       0.00825500  0.00423100
% # 3rd Qu.    0.00000000  0.00143300
% # Max.       0.11970000  0.05530000
% # sd         0.02778673  0.01272688
% # frac.zero  0.78947368  0.68421053
% 
% Table X on page 8, midway: [to be turned into text]
% isMultiple Results: "We also found that a simple version of the proposed formalized convolution test yields improvements over the informal Poisson Fitter convolution test, as shown in Table X [TODO: add Bake Off isMuliple results table here]."  Just describe them here too?
% TODO: ADD TEXT DESCRIBING THE [Rt] column of the heatmaps from the HIV D&E poster.
% 
% PAUL'S SOLUTION TEXT:
% We found that the informal test outperformed the formal test, and we found that masking nonsynonymous codons and breaking sequences into subsets by founder both improved AUC (from AUC 0.58 for Poisson Fitter’s informal test run on all of the RV217 data from 6 months post infection, to AUC 0.65 when masking nonsynymous codons, to AUC 0.76 when also first clustering sequences and ignoring distances between clusters). Fitting these estimators in a logistic regression model with other sequence summary statistics (but not patient covariates such as viral load), using LASSO to select covariates, increased AUC to 0.90.
% 
% Do we just not do a table of the timing results? Just quote ourselves from an abstract?  I should double-check what the values are of course.  But that could be fine placeholder text.
% Paul's solutino text:
% Importantly, in the pilot study we found that the Poisson Fitter estimate of infection time was improved by calibrating the mutation rate. We included the estimated time in a regression model and evaluated predicted values from this model, which led to drastically reduced root mean squared error (RMSE) of predictions.  Using data from about six months post infection we get RMSE values of about 9 days for multiple methods after calibration using the RV217 nearly full length genomes (about 10 per person), and (relevant especially to AMP) with the 1 month sequences we get RMSEs of about 6 days (or about 5 days using PrankenBeast).
% 
% Fig of the Markov Chain pg 10 and pg 12
% picture has two views; on the right/bottom panel it is a simple model of two circles, first says "ancestral" the second says "mutated" and there is an arrow from "ancestral" to itself labeled 1-lambda, and a label from ancestral to mutated labeled lambda, where lambda = mut/day * days, and where mut/day = [phi] * [selection strength]. The transition distribution given a change is given with each row having a zero on the diagional and other values proportional to their frequencies in the within-host selection model, and the "ancstral" node is labeled as the start node with prior frequencies given by the transmitted variation model.  The one on the left is the same but with explicit labels on the arrows for the different selection processes.
% 
% Also same fig ref'd on page 9:
% The posterior probability that a specific nucleotide was present in the founder sequence (at a particular position) is the solution to a one-step Komolgorov Backward equation describing the distribution at the initial time point of a simple two-state continuous time Markov chain after observing the state after t days ( Figure twoStateHMM).
% 
% 
% 
% Fig of two types of phylogenetic tree:
% A closely related question and one central to within-host modeling is whether the sequence data are sufficiently well-modeled by a very simple independent-random-variation model with no family tree structure (a “star-like” model; figure XA), or a branching process model (your typical phylogenetic tree; figure XB).


<<echo = FALSE, results = hide>>=
## To test my maths about relating auc to sensitivity / specificity when there's only one confusion matrix.
library( "ROCR" ) # for "prediction" and "performance"
aucroc <- function( some.test.data ) {
    performance( prediction( some.test.data$pred, some.test.data$true ), measure = "auc" )@y.values[[ 1 ]];
}
pauls.way <- function( some.test.data ) {
    .sensitivity <- performance( prediction( some.test.data$pred, some.test.data$true ), measure = "sens" )@y.values[[ 1 ]][ 2 ];
    .specificity <- performance( prediction( some.test.data$pred, some.test.data$true ), measure = "spec" )@y.values[[ 1 ]][ 2 ];
    return( 0.5 * ( 1 + ( abs( ( .sensitivity - ( 1-.specificity ) ) ) ) ) );
} # pauls.way (..)

n.total <- 20;
true.fraction <- 0.75;
true.data <- c( rep( 0, n.total - floor( true.fraction * n.total ) ), rep( 1, floor( true.fraction * n.total ) ) );
actual.true.fraction <- mean( true.data );
.result.ignored <- 
sapply( 0:n.total, function( .predicted ) { 
    some.test.data <- list( pred = c( rep( 0, n.total-.predicted ), rep( 1, .predicted ) ), true = true.data );
    stopifnot( pauls.way( some.test.data ) == aucroc( some.test.data ) );
    return( NULL );
} );
## All pass! yay. paul's way expresses AUC-ROC as a fn of sensitivity and specificity.
    
@ 

<<echo = FALSE, results = hide>>=
## These are defined above; we need these to put together the info for the paper table.
rv217.gold.standard.timings.1m <- getNFLGTimings( include.intercept = FALSE, helpful.additional.cols = c(), regions = "nflg", times = "1m" );
rv217.gold.standard.timings.6m <- getNFLGTimings( include.intercept = FALSE, helpful.additional.cols = c(), regions = "nflg", times = "6m" );

mean( rv217.gold.standard.timings.1m )
# [1] 46.69444
sd( rv217.gold.standard.timings.1m )
# [1] 4.281652
mean( rv217.gold.standard.timings.6m )
# [1] 183.7941
sd( rv217.gold.standard.timings.6m )
# [1] 11.28898

# So: the mean (SD) of the RV217 gold standard days since infection for the 1m samples is 47 (4.3) and for the 6m samples is 184 (11.3).

caprisa002.gold.standard.timings.1m <- getV3Timings( include.intercept = FALSE, helpful.additional.cols = c(), regions = "v3", times = "1m" );
caprisa002.gold.standard.timings.6m <- getV3Timings( include.intercept = FALSE, helpful.additional.cols = c(), regions = "v3", times = "6m" );

mean( caprisa002.gold.standard.timings.1m )
# [1] 62.4
sd( caprisa002.gold.standard.timings.1m )
# [1] 4.870967
mean( caprisa002.gold.standard.timings.6m )
# [1] 179.7222
sd( caprisa002.gold.standard.timings.6m )
# [1] 12.06748

# So: the mean (SD) of the CAPRISA 002 gold standard days since infection for the 1m samples is 62.4 (4.9) and for the 6m samples is 180 (12.1).

## I used that info above, to make these rows. Here I save the table.
# data.sources.for.paper.table <- cbind( rv217 = rv217.row, caprisa002 = caprisa002.row );
# write.csv( data.sources.for.paper.table, "data_sources_for_paper.csv" );

@ 

<<echo = FALSE>>=
# (un)Setup for prettier Sweave output.
options( continue = old.continue.option$continue )
@ 

\end{document}
